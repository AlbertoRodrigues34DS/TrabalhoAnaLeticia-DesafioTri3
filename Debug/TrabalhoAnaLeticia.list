
TrabalhoAnaLeticia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08007f20  08007f20  00017f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008048  08008048  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008048  08008048  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008048  08008048  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008048  08008048  00018048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800804c  0800804c  0001804c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08008050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001220  2000017c  080081cc  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000139c  080081cc  0002139c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013881  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e63  00000000  00000000  00033a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d20  00000000  00000000  00036890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  000375b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019237  00000000  00000000  00038168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dcfd  00000000  00000000  0005139f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087387  00000000  00000000  0005f09c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6423  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033ec  00000000  00000000  000e64a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007f08 	.word	0x08007f08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08007f08 	.word	0x08007f08

0800014c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000156:	2200      	movs	r2, #0
 8000158:	2110      	movs	r1, #16
 800015a:	480c      	ldr	r0, [pc, #48]	; (800018c <ST7789_WriteCommand+0x40>)
 800015c:	f001 f83c 	bl	80011d8 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000160:	2200      	movs	r2, #0
 8000162:	2101      	movs	r1, #1
 8000164:	480a      	ldr	r0, [pc, #40]	; (8000190 <ST7789_WriteCommand+0x44>)
 8000166:	f001 f837 	bl	80011d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800016a:	1df9      	adds	r1, r7, #7
 800016c:	f04f 33ff 	mov.w	r3, #4294967295
 8000170:	2201      	movs	r2, #1
 8000172:	4808      	ldr	r0, [pc, #32]	; (8000194 <ST7789_WriteCommand+0x48>)
 8000174:	f003 fa2e 	bl	80035d4 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4803      	ldr	r0, [pc, #12]	; (800018c <ST7789_WriteCommand+0x40>)
 800017e:	f001 f82b 	bl	80011d8 <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010800 	.word	0x40010800
 8000190:	40010c00 	.word	0x40010c00
 8000194:	200003c0 	.word	0x200003c0

08000198 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80001a2:	2200      	movs	r2, #0
 80001a4:	2110      	movs	r1, #16
 80001a6:	4815      	ldr	r0, [pc, #84]	; (80001fc <ST7789_WriteData+0x64>)
 80001a8:	f001 f816 	bl	80011d8 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80001ac:	2201      	movs	r2, #1
 80001ae:	2101      	movs	r1, #1
 80001b0:	4813      	ldr	r0, [pc, #76]	; (8000200 <ST7789_WriteData+0x68>)
 80001b2:	f001 f811 	bl	80011d8 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80001b6:	e015      	b.n	80001e4 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001be:	4293      	cmp	r3, r2
 80001c0:	bf28      	it	cs
 80001c2:	4613      	movcs	r3, r2
 80001c4:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80001c6:	89fa      	ldrh	r2, [r7, #14]
 80001c8:	f04f 33ff 	mov.w	r3, #4294967295
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	480d      	ldr	r0, [pc, #52]	; (8000204 <ST7789_WriteData+0x6c>)
 80001d0:	f003 fa00 	bl	80035d4 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 80001d4:	89fb      	ldrh	r3, [r7, #14]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80001dc:	89fb      	ldrh	r3, [r7, #14]
 80001de:	683a      	ldr	r2, [r7, #0]
 80001e0:	1ad3      	subs	r3, r2, r3
 80001e2:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d1e6      	bne.n	80001b8 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 80001ea:	2201      	movs	r2, #1
 80001ec:	2110      	movs	r1, #16
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <ST7789_WriteData+0x64>)
 80001f0:	f000 fff2 	bl	80011d8 <HAL_GPIO_WritePin>
}
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00
 8000204:	200003c0 	.word	0x200003c0

08000208 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480c      	ldr	r0, [pc, #48]	; (8000248 <ST7789_WriteSmallData+0x40>)
 8000218:	f000 ffde 	bl	80011d8 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800021c:	2201      	movs	r2, #1
 800021e:	2101      	movs	r1, #1
 8000220:	480a      	ldr	r0, [pc, #40]	; (800024c <ST7789_WriteSmallData+0x44>)
 8000222:	f000 ffd9 	bl	80011d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000226:	1df9      	adds	r1, r7, #7
 8000228:	f04f 33ff 	mov.w	r3, #4294967295
 800022c:	2201      	movs	r2, #1
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <ST7789_WriteSmallData+0x48>)
 8000230:	f003 f9d0 	bl	80035d4 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000234:	2201      	movs	r2, #1
 8000236:	2110      	movs	r1, #16
 8000238:	4803      	ldr	r0, [pc, #12]	; (8000248 <ST7789_WriteSmallData+0x40>)
 800023a:	f000 ffcd 	bl	80011d8 <HAL_GPIO_WritePin>
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40010800 	.word	0x40010800
 800024c:	40010c00 	.word	0x40010c00
 8000250:	200003c0 	.word	0x200003c0

08000254 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800025e:	2036      	movs	r0, #54	; 0x36
 8000260:	f7ff ff74 	bl	800014c <ST7789_WriteCommand>
	switch (m) {
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	2b03      	cmp	r3, #3
 8000268:	d81a      	bhi.n	80002a0 <ST7789_SetRotation+0x4c>
 800026a:	a201      	add	r2, pc, #4	; (adr r2, 8000270 <ST7789_SetRotation+0x1c>)
 800026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000270:	08000281 	.word	0x08000281
 8000274:	08000289 	.word	0x08000289
 8000278:	08000291 	.word	0x08000291
 800027c:	08000299 	.word	0x08000299
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000280:	20c0      	movs	r0, #192	; 0xc0
 8000282:	f7ff ffc1 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000286:	e00c      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000288:	20a0      	movs	r0, #160	; 0xa0
 800028a:	f7ff ffbd 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800028e:	e008      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ffb9 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000296:	e004      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000298:	2060      	movs	r0, #96	; 0x60
 800029a:	f7ff ffb5 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800029e:	e000      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	default:
		break;
 80002a0:	bf00      	nop
	}
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop

080002ac <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b087      	sub	sp, #28
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4604      	mov	r4, r0
 80002b4:	4608      	mov	r0, r1
 80002b6:	4611      	mov	r1, r2
 80002b8:	461a      	mov	r2, r3
 80002ba:	4623      	mov	r3, r4
 80002bc:	80fb      	strh	r3, [r7, #6]
 80002be:	4603      	mov	r3, r0
 80002c0:	80bb      	strh	r3, [r7, #4]
 80002c2:	460b      	mov	r3, r1
 80002c4:	807b      	strh	r3, [r7, #2]
 80002c6:	4613      	mov	r3, r2
 80002c8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80002ca:	2200      	movs	r2, #0
 80002cc:	2110      	movs	r1, #16
 80002ce:	4824      	ldr	r0, [pc, #144]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 80002d0:	f000 ff82 	bl	80011d8 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	82fb      	strh	r3, [r7, #22]
 80002d8:	887b      	ldrh	r3, [r7, #2]
 80002da:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80002dc:	88bb      	ldrh	r3, [r7, #4]
 80002de:	827b      	strh	r3, [r7, #18]
 80002e0:	883b      	ldrh	r3, [r7, #0]
 80002e2:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80002e4:	202a      	movs	r0, #42	; 0x2a
 80002e6:	f7ff ff31 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80002ea:	8afb      	ldrh	r3, [r7, #22]
 80002ec:	0a1b      	lsrs	r3, r3, #8
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	733b      	strb	r3, [r7, #12]
 80002f4:	8afb      	ldrh	r3, [r7, #22]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	737b      	strb	r3, [r7, #13]
 80002fa:	8abb      	ldrh	r3, [r7, #20]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	b29b      	uxth	r3, r3
 8000300:	b2db      	uxtb	r3, r3
 8000302:	73bb      	strb	r3, [r7, #14]
 8000304:	8abb      	ldrh	r3, [r7, #20]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800030a:	f107 030c 	add.w	r3, r7, #12
 800030e:	2104      	movs	r1, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff41 	bl	8000198 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000316:	202b      	movs	r0, #43	; 0x2b
 8000318:	f7ff ff18 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800031c:	8a7b      	ldrh	r3, [r7, #18]
 800031e:	0a1b      	lsrs	r3, r3, #8
 8000320:	b29b      	uxth	r3, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	723b      	strb	r3, [r7, #8]
 8000326:	8a7b      	ldrh	r3, [r7, #18]
 8000328:	b2db      	uxtb	r3, r3
 800032a:	727b      	strb	r3, [r7, #9]
 800032c:	8a3b      	ldrh	r3, [r7, #16]
 800032e:	0a1b      	lsrs	r3, r3, #8
 8000330:	b29b      	uxth	r3, r3
 8000332:	b2db      	uxtb	r3, r3
 8000334:	72bb      	strb	r3, [r7, #10]
 8000336:	8a3b      	ldrh	r3, [r7, #16]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800033c:	f107 0308 	add.w	r3, r7, #8
 8000340:	2104      	movs	r1, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff28 	bl	8000198 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000348:	202c      	movs	r0, #44	; 0x2c
 800034a:	f7ff feff 	bl	800014c <ST7789_WriteCommand>
	ST7789_UnSelect();
 800034e:	2201      	movs	r2, #1
 8000350:	2110      	movs	r1, #16
 8000352:	4803      	ldr	r0, [pc, #12]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 8000354:	f000 ff40 	bl	80011d8 <HAL_GPIO_WritePin>
}
 8000358:	bf00      	nop
 800035a:	371c      	adds	r7, #28
 800035c:	46bd      	mov	sp, r7
 800035e:	bd90      	pop	{r4, r7, pc}
 8000360:	40010800 	.word	0x40010800

08000364 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b08b      	sub	sp, #44	; 0x2c
 8000368:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 800036a:	2019      	movs	r0, #25
 800036c:	f000 fcaa 	bl	8000cc4 <HAL_Delay>
    ST7789_RST_Clr();
 8000370:	2200      	movs	r2, #0
 8000372:	2102      	movs	r1, #2
 8000374:	4846      	ldr	r0, [pc, #280]	; (8000490 <ST7789_Init+0x12c>)
 8000376:	f000 ff2f 	bl	80011d8 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 800037a:	2019      	movs	r0, #25
 800037c:	f000 fca2 	bl	8000cc4 <HAL_Delay>
    ST7789_RST_Set();
 8000380:	2201      	movs	r2, #1
 8000382:	2102      	movs	r1, #2
 8000384:	4842      	ldr	r0, [pc, #264]	; (8000490 <ST7789_Init+0x12c>)
 8000386:	f000 ff27 	bl	80011d8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800038a:	2032      	movs	r0, #50	; 0x32
 800038c:	f000 fc9a 	bl	8000cc4 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000390:	203a      	movs	r0, #58	; 0x3a
 8000392:	f7ff fedb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000396:	2055      	movs	r0, #85	; 0x55
 8000398:	f7ff ff36 	bl	8000208 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800039c:	20b2      	movs	r0, #178	; 0xb2
 800039e:	f7ff fed5 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80003a2:	4a3c      	ldr	r2, [pc, #240]	; (8000494 <ST7789_Init+0x130>)
 80003a4:	f107 0320 	add.w	r3, r7, #32
 80003a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ac:	6018      	str	r0, [r3, #0]
 80003ae:	3304      	adds	r3, #4
 80003b0:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80003b2:	f107 0320 	add.w	r3, r7, #32
 80003b6:	2105      	movs	r1, #5
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff feed 	bl	8000198 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80003be:	2002      	movs	r0, #2
 80003c0:	f7ff ff48 	bl	8000254 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80003c4:	20b7      	movs	r0, #183	; 0xb7
 80003c6:	f7ff fec1 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80003ca:	2035      	movs	r0, #53	; 0x35
 80003cc:	f7ff ff1c 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80003d0:	20bb      	movs	r0, #187	; 0xbb
 80003d2:	f7ff febb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80003d6:	2019      	movs	r0, #25
 80003d8:	f7ff ff16 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80003dc:	20c0      	movs	r0, #192	; 0xc0
 80003de:	f7ff feb5 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80003e2:	202c      	movs	r0, #44	; 0x2c
 80003e4:	f7ff ff10 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80003e8:	20c2      	movs	r0, #194	; 0xc2
 80003ea:	f7ff feaf 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80003ee:	2001      	movs	r0, #1
 80003f0:	f7ff ff0a 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80003f4:	20c3      	movs	r0, #195	; 0xc3
 80003f6:	f7ff fea9 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80003fa:	2012      	movs	r0, #18
 80003fc:	f7ff ff04 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000400:	20c4      	movs	r0, #196	; 0xc4
 8000402:	f7ff fea3 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000406:	2020      	movs	r0, #32
 8000408:	f7ff fefe 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800040c:	20c6      	movs	r0, #198	; 0xc6
 800040e:	f7ff fe9d 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000412:	200f      	movs	r0, #15
 8000414:	f7ff fef8 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000418:	20d0      	movs	r0, #208	; 0xd0
 800041a:	f7ff fe97 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800041e:	20a4      	movs	r0, #164	; 0xa4
 8000420:	f7ff fef2 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000424:	20a1      	movs	r0, #161	; 0xa1
 8000426:	f7ff feef 	bl	8000208 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800042a:	20e0      	movs	r0, #224	; 0xe0
 800042c:	f7ff fe8e 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000430:	4b19      	ldr	r3, [pc, #100]	; (8000498 <ST7789_Init+0x134>)
 8000432:	f107 0410 	add.w	r4, r7, #16
 8000436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000438:	c407      	stmia	r4!, {r0, r1, r2}
 800043a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	210e      	movs	r1, #14
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fea8 	bl	8000198 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000448:	20e1      	movs	r0, #225	; 0xe1
 800044a:	f7ff fe7f 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <ST7789_Init+0x138>)
 8000450:	463c      	mov	r4, r7
 8000452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000454:	c407      	stmia	r4!, {r0, r1, r2}
 8000456:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000458:	463b      	mov	r3, r7
 800045a:	210e      	movs	r1, #14
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff fe9b 	bl	8000198 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000462:	2021      	movs	r0, #33	; 0x21
 8000464:	f7ff fe72 	bl	800014c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000468:	2011      	movs	r0, #17
 800046a:	f7ff fe6f 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800046e:	2013      	movs	r0, #19
 8000470:	f7ff fe6c 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000474:	2029      	movs	r0, #41	; 0x29
 8000476:	f7ff fe69 	bl	800014c <ST7789_WriteCommand>

	HAL_Delay(50);
 800047a:	2032      	movs	r0, #50	; 0x32
 800047c:	f000 fc22 	bl	8000cc4 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000480:	2000      	movs	r0, #0
 8000482:	f000 f80d 	bl	80004a0 <ST7789_Fill_Color>
}
 8000486:	bf00      	nop
 8000488:	372c      	adds	r7, #44	; 0x2c
 800048a:	46bd      	mov	sp, r7
 800048c:	bd90      	pop	{r4, r7, pc}
 800048e:	bf00      	nop
 8000490:	40010c00 	.word	0x40010c00
 8000494:	08007f20 	.word	0x08007f20
 8000498:	08007f28 	.word	0x08007f28
 800049c:	08007f38 	.word	0x08007f38

080004a0 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80004aa:	23ef      	movs	r3, #239	; 0xef
 80004ac:	22ef      	movs	r2, #239	; 0xef
 80004ae:	2100      	movs	r1, #0
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fefb 	bl	80002ac <ST7789_SetAddressWindow>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	81fb      	strh	r3, [r7, #14]
 80004ba:	e019      	b.n	80004f0 <ST7789_Fill_Color+0x50>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004bc:	2300      	movs	r3, #0
 80004be:	81bb      	strh	r3, [r7, #12]
 80004c0:	e010      	b.n	80004e4 <ST7789_Fill_Color+0x44>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	0a1b      	lsrs	r3, r3, #8
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	723b      	strb	r3, [r7, #8]
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	2102      	movs	r1, #2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fe5d 	bl	8000198 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004de:	89bb      	ldrh	r3, [r7, #12]
 80004e0:	3301      	adds	r3, #1
 80004e2:	81bb      	strh	r3, [r7, #12]
 80004e4:	89bb      	ldrh	r3, [r7, #12]
 80004e6:	2bef      	cmp	r3, #239	; 0xef
 80004e8:	d9eb      	bls.n	80004c2 <ST7789_Fill_Color+0x22>
		for (i = 0; i < ST7789_WIDTH; i++)
 80004ea:	89fb      	ldrh	r3, [r7, #14]
 80004ec:	3301      	adds	r3, #1
 80004ee:	81fb      	strh	r3, [r7, #14]
 80004f0:	89fb      	ldrh	r3, [r7, #14]
 80004f2:	2bef      	cmp	r3, #239	; 0xef
 80004f4:	d9e2      	bls.n	80004bc <ST7789_Fill_Color+0x1c>
				}
	#endif
	//ALGG ST7789_UnSelect();
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
 800050a:	460b      	mov	r3, r1
 800050c:	80bb      	strh	r3, [r7, #4]
 800050e:	4613      	mov	r3, r2
 8000510:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	2bef      	cmp	r3, #239	; 0xef
 8000516:	d821      	bhi.n	800055c <ST7789_DrawPixel+0x5c>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8000518:	88bb      	ldrh	r3, [r7, #4]
 800051a:	2bef      	cmp	r3, #239	; 0xef
 800051c:	d81e      	bhi.n	800055c <ST7789_DrawPixel+0x5c>
	
	ST7789_SetAddressWindow(x, y, x, y);
 800051e:	88bb      	ldrh	r3, [r7, #4]
 8000520:	88fa      	ldrh	r2, [r7, #6]
 8000522:	88b9      	ldrh	r1, [r7, #4]
 8000524:	88f8      	ldrh	r0, [r7, #6]
 8000526:	f7ff fec1 	bl	80002ac <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	0a1b      	lsrs	r3, r3, #8
 800052e:	b29b      	uxth	r3, r3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	733b      	strb	r3, [r7, #12]
 8000534:	887b      	ldrh	r3, [r7, #2]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 800053a:	2200      	movs	r2, #0
 800053c:	2110      	movs	r1, #16
 800053e:	4809      	ldr	r0, [pc, #36]	; (8000564 <ST7789_DrawPixel+0x64>)
 8000540:	f000 fe4a 	bl	80011d8 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2102      	movs	r1, #2
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe24 	bl	8000198 <ST7789_WriteData>
	ST7789_UnSelect();
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <ST7789_DrawPixel+0x64>)
 8000556:	f000 fe3f 	bl	80011d8 <HAL_GPIO_WritePin>
 800055a:	e000      	b.n	800055e <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 800055c:	bf00      	nop
}
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40010800 	.word	0x40010800

08000568 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b087      	sub	sp, #28
 800056c:	af00      	add	r7, sp, #0
 800056e:	4604      	mov	r4, r0
 8000570:	4608      	mov	r0, r1
 8000572:	4611      	mov	r1, r2
 8000574:	461a      	mov	r2, r3
 8000576:	4623      	mov	r3, r4
 8000578:	80fb      	strh	r3, [r7, #6]
 800057a:	4603      	mov	r3, r0
 800057c:	80bb      	strh	r3, [r7, #4]
 800057e:	460b      	mov	r3, r1
 8000580:	807b      	strh	r3, [r7, #2]
 8000582:	4613      	mov	r3, r2
 8000584:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8000586:	883a      	ldrh	r2, [r7, #0]
 8000588:	88bb      	ldrh	r3, [r7, #4]
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000590:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000594:	8879      	ldrh	r1, [r7, #2]
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	1acb      	subs	r3, r1, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	bfb8      	it	lt
 800059e:	425b      	neglt	r3, r3
 80005a0:	429a      	cmp	r2, r3
 80005a2:	bfcc      	ite	gt
 80005a4:	2301      	movgt	r3, #1
 80005a6:	2300      	movle	r3, #0
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	827b      	strh	r3, [r7, #18]
    if (steep) {
 80005ac:	8a7b      	ldrh	r3, [r7, #18]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d00b      	beq.n	80005ca <ST7789_DrawLine+0x62>
		swap = x0;
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 80005ba:	8a3b      	ldrh	r3, [r7, #16]
 80005bc:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 80005be:	887b      	ldrh	r3, [r7, #2]
 80005c0:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 80005c2:	883b      	ldrh	r3, [r7, #0]
 80005c4:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 80005c6:	8a3b      	ldrh	r3, [r7, #16]
 80005c8:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80005ca:	88fa      	ldrh	r2, [r7, #6]
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d90b      	bls.n	80005ea <ST7789_DrawLine+0x82>
		swap = x0;
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 80005da:	8a3b      	ldrh	r3, [r7, #16]
 80005dc:	807b      	strh	r3, [r7, #2]

		swap = y0;
 80005de:	88bb      	ldrh	r3, [r7, #4]
 80005e0:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 80005e6:	8a3b      	ldrh	r3, [r7, #16]
 80005e8:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80005ea:	887a      	ldrh	r2, [r7, #2]
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 80005f4:	883a      	ldrh	r2, [r7, #0]
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	bfb8      	it	lt
 80005fe:	425b      	neglt	r3, r3
 8000600:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8000602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000606:	0fda      	lsrs	r2, r3, #31
 8000608:	4413      	add	r3, r2
 800060a:	105b      	asrs	r3, r3, #1
 800060c:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 800060e:	88ba      	ldrh	r2, [r7, #4]
 8000610:	883b      	ldrh	r3, [r7, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d202      	bcs.n	800061c <ST7789_DrawLine+0xb4>
        ystep = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	82bb      	strh	r3, [r7, #20]
 800061a:	e028      	b.n	800066e <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 800061c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000620:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8000622:	e024      	b.n	800066e <ST7789_DrawLine+0x106>
        if (steep) {
 8000624:	8a7b      	ldrh	r3, [r7, #18]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 800062a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800062c:	88f9      	ldrh	r1, [r7, #6]
 800062e:	88bb      	ldrh	r3, [r7, #4]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff65 	bl	8000500 <ST7789_DrawPixel>
 8000636:	e005      	b.n	8000644 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8000638:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800063a:	88b9      	ldrh	r1, [r7, #4]
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff5e 	bl	8000500 <ST7789_DrawPixel>
        }
        err -= dy;
 8000644:	8afa      	ldrh	r2, [r7, #22]
 8000646:	89bb      	ldrh	r3, [r7, #12]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b29b      	uxth	r3, r3
 800064c:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 800064e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000652:	2b00      	cmp	r3, #0
 8000654:	da08      	bge.n	8000668 <ST7789_DrawLine+0x100>
            y0 += ystep;
 8000656:	8aba      	ldrh	r2, [r7, #20]
 8000658:	88bb      	ldrh	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800065e:	8afa      	ldrh	r2, [r7, #22]
 8000660:	89fb      	ldrh	r3, [r7, #14]
 8000662:	4413      	add	r3, r2
 8000664:	b29b      	uxth	r3, r3
 8000666:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	3301      	adds	r3, #1
 800066c:	80fb      	strh	r3, [r7, #6]
 800066e:	88fa      	ldrh	r2, [r7, #6]
 8000670:	887b      	ldrh	r3, [r7, #2]
 8000672:	429a      	cmp	r2, r3
 8000674:	d9d6      	bls.n	8000624 <ST7789_DrawLine+0xbc>
        }
    }
}
 8000676:	bf00      	nop
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd90      	pop	{r4, r7, pc}
	...

08000680 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b087      	sub	sp, #28
 8000684:	af02      	add	r7, sp, #8
 8000686:	4604      	mov	r4, r0
 8000688:	4608      	mov	r0, r1
 800068a:	4611      	mov	r1, r2
 800068c:	461a      	mov	r2, r3
 800068e:	4623      	mov	r3, r4
 8000690:	80fb      	strh	r3, [r7, #6]
 8000692:	4603      	mov	r3, r0
 8000694:	80bb      	strh	r3, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	807b      	strh	r3, [r7, #2]
 800069a:	4613      	mov	r3, r2
 800069c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800069e:	2200      	movs	r2, #0
 80006a0:	2110      	movs	r1, #16
 80006a2:	4822      	ldr	r0, [pc, #136]	; (800072c <ST7789_DrawFilledRectangle+0xac>)
 80006a4:	f000 fd98 	bl	80011d8 <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	2bef      	cmp	r3, #239	; 0xef
 80006ac:	d83a      	bhi.n	8000724 <ST7789_DrawFilledRectangle+0xa4>
 80006ae:	88bb      	ldrh	r3, [r7, #4]
 80006b0:	2bef      	cmp	r3, #239	; 0xef
 80006b2:	d837      	bhi.n	8000724 <ST7789_DrawFilledRectangle+0xa4>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 80006b4:	88fa      	ldrh	r2, [r7, #6]
 80006b6:	887b      	ldrh	r3, [r7, #2]
 80006b8:	4413      	add	r3, r2
 80006ba:	2bef      	cmp	r3, #239	; 0xef
 80006bc:	dd03      	ble.n	80006c6 <ST7789_DrawFilledRectangle+0x46>
		w = ST7789_WIDTH - x;
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80006c4:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 80006c6:	88ba      	ldrh	r2, [r7, #4]
 80006c8:	883b      	ldrh	r3, [r7, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	2bef      	cmp	r3, #239	; 0xef
 80006ce:	dd03      	ble.n	80006d8 <ST7789_DrawFilledRectangle+0x58>
		h = ST7789_HEIGHT - y;
 80006d0:	88bb      	ldrh	r3, [r7, #4]
 80006d2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80006d6:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e017      	b.n	800070e <ST7789_DrawFilledRectangle+0x8e>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	88bb      	ldrh	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	b299      	uxth	r1, r3
 80006e8:	88fa      	ldrh	r2, [r7, #6]
 80006ea:	887b      	ldrh	r3, [r7, #2]
 80006ec:	4413      	add	r3, r2
 80006ee:	b29c      	uxth	r4, r3
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	88bb      	ldrh	r3, [r7, #4]
 80006f6:	4413      	add	r3, r2
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	88f8      	ldrh	r0, [r7, #6]
 80006fc:	8c3b      	ldrh	r3, [r7, #32]
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	4613      	mov	r3, r2
 8000702:	4622      	mov	r2, r4
 8000704:	f7ff ff30 	bl	8000568 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	3301      	adds	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	b29b      	uxth	r3, r3
 8000712:	883a      	ldrh	r2, [r7, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	d2e2      	bcs.n	80006de <ST7789_DrawFilledRectangle+0x5e>
	}
	ST7789_UnSelect();
 8000718:	2201      	movs	r2, #1
 800071a:	2110      	movs	r1, #16
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <ST7789_DrawFilledRectangle+0xac>)
 800071e:	f000 fd5b 	bl	80011d8 <HAL_GPIO_WritePin>
 8000722:	e000      	b.n	8000726 <ST7789_DrawFilledRectangle+0xa6>
		return;
 8000724:	bf00      	nop
}
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	bd90      	pop	{r4, r7, pc}
 800072c:	40010800 	.word	0x40010800

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fa63 	bl	8000c00 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f846 	bl	80007ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073e:	f000 f8d1 	bl	80008e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000742:	f000 f899 	bl	8000878 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000746:	f006 ff11 	bl	800756c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
#ifdef ST7789
 ST7789_Init();
 800074a:	f7ff fe0b 	bl	8000364 <ST7789_Init>
 ST7789_Fill_Color(GRAY);
 800074e:	f248 4030 	movw	r0, #33840	; 0x8430
 8000752:	f7ff fea5 	bl	80004a0 <ST7789_Fill_Color>
#endif

 flag bandeira[3];

//Alemanha - 1
 bandeira[0].vertical = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	703b      	strb	r3, [r7, #0]
 bandeira[0].cor[0] = BLACK;
 800075a:	2300      	movs	r3, #0
 800075c:	807b      	strh	r3, [r7, #2]
 bandeira[0].cor[1] = RED;
 800075e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000762:	80bb      	strh	r3, [r7, #4]
 bandeira[0].cor[2] = YELLOW;
 8000764:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000768:	80fb      	strh	r3, [r7, #6]

//Russia - 2

 bandeira[1].vertical = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	723b      	strb	r3, [r7, #8]
 bandeira[1].cor[0] = WHITE;
 800076e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000772:	817b      	strh	r3, [r7, #10]
 bandeira[1].cor[1] = BLUE;
 8000774:	231f      	movs	r3, #31
 8000776:	81bb      	strh	r3, [r7, #12]
 bandeira[1].cor[2] = RED;
 8000778:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800077c:	81fb      	strh	r3, [r7, #14]

//Italia - 3

 bandeira[2].vertical = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	743b      	strb	r3, [r7, #16]
 bandeira[2].cor[0] = GREEN;
 8000782:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000786:	827b      	strh	r3, [r7, #18]
 bandeira[2].cor[1] = WHITE;
 8000788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078c:	82bb      	strh	r3, [r7, #20]
 bandeira[2].cor[2] = RED;
 800078e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000792:	82fb      	strh	r3, [r7, #22]


  while (1)
  {
	  //DrawRectangle(&r1);
	  DrawFlag(&bandeira[0]);
 8000794:	463b      	mov	r3, r7
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f904 	bl	80009a4 <DrawFlag>
	  HAL_Delay(1000);
 800079c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a0:	f000 fa90 	bl	8000cc4 <HAL_Delay>

	  DrawFlag(&bandeira[1]);
 80007a4:	463b      	mov	r3, r7
 80007a6:	3308      	adds	r3, #8
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f8fb 	bl	80009a4 <DrawFlag>
	  HAL_Delay(1000);
 80007ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b2:	f000 fa87 	bl	8000cc4 <HAL_Delay>

	  DrawFlag(&bandeira[2]);
 80007b6:	463b      	mov	r3, r7
 80007b8:	3310      	adds	r3, #16
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f8f2 	bl	80009a4 <DrawFlag>
	  HAL_Delay(1000);
 80007c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c4:	f000 fa7e 	bl	8000cc4 <HAL_Delay>
	  DrawFlag(&bandeira[0]);
 80007c8:	e7e4      	b.n	8000794 <main+0x64>

080007ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b094      	sub	sp, #80	; 0x50
 80007ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d4:	2228      	movs	r2, #40	; 0x28
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f007 fb8d 	bl	8007ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fa:	2302      	movs	r3, #2
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fe:	2301      	movs	r3, #1
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000802:	2310      	movs	r3, #16
 8000804:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	2302      	movs	r3, #2
 8000808:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800080a:	2300      	movs	r3, #0
 800080c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800080e:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000812:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000818:	4618      	mov	r0, r3
 800081a:	f002 f9b7 	bl	8002b8c <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000824:	f000 f90e 	bl	8000a44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2302      	movs	r3, #2
 800082e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000838:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2101      	movs	r1, #1
 8000844:	4618      	mov	r0, r3
 8000846:	f002 fc21 	bl	800308c <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000850:	f000 f8f8 	bl	8000a44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000854:	2310      	movs	r3, #16
 8000856:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000858:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800085c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f002 fd7d 	bl	8003360 <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800086c:	f000 f8ea 	bl	8000a44 <Error_Handler>
  }
}
 8000870:	bf00      	nop
 8000872:	3750      	adds	r7, #80	; 0x50
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_SPI1_Init+0x64>)
 800087e:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <MX_SPI1_Init+0x68>)
 8000880:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_SPI1_Init+0x64>)
 8000884:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000888:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_SPI1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_SPI1_Init+0x64>)
 8000898:	2202      	movs	r2, #2
 800089a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_SPI1_Init+0x64>)
 80008a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_SPI1_Init+0x64>)
 80008ac:	2208      	movs	r2, #8
 80008ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_SPI1_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_SPI1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_SPI1_Init+0x64>)
 80008c4:	220a      	movs	r2, #10
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_SPI1_Init+0x64>)
 80008ca:	f002 fdff 	bl	80034cc <HAL_SPI_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008d4:	f000 f8b6 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200003c0 	.word	0x200003c0
 80008e0:	40013000 	.word	0x40013000

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <MX_GPIO_Init+0xb4>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a26      	ldr	r2, [pc, #152]	; (8000998 <MX_GPIO_Init+0xb4>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <MX_GPIO_Init+0xb4>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_GPIO_Init+0xb4>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a20      	ldr	r2, [pc, #128]	; (8000998 <MX_GPIO_Init+0xb4>)
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_GPIO_Init+0xb4>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2110      	movs	r1, #16
 800092c:	481b      	ldr	r0, [pc, #108]	; (800099c <MX_GPIO_Init+0xb8>)
 800092e:	f000 fc53 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin|ST7789_RST_Pin|GPIO_PIN_3|GPIO_PIN_4
 8000932:	2200      	movs	r2, #0
 8000934:	217b      	movs	r1, #123	; 0x7b
 8000936:	481a      	ldr	r0, [pc, #104]	; (80009a0 <MX_GPIO_Init+0xbc>)
 8000938:	f000 fc4e 	bl	80011d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 800093c:	2310      	movs	r3, #16
 800093e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2302      	movs	r3, #2
 800094a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	4619      	mov	r1, r3
 8000952:	4812      	ldr	r0, [pc, #72]	; (800099c <MX_GPIO_Init+0xb8>)
 8000954:	f000 fae6 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin|GPIO_PIN_3|GPIO_PIN_4
 8000958:	237b      	movs	r3, #123	; 0x7b
 800095a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2302      	movs	r3, #2
 8000966:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	4619      	mov	r1, r3
 800096e:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MX_GPIO_Init+0xbc>)
 8000970:	f000 fad8 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000974:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000978:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	4619      	mov	r1, r3
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_GPIO_Init+0xb8>)
 800098a:	f000 facb 	bl	8000f24 <HAL_GPIO_Init>

}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000
 800099c:	40010800 	.word	0x40010800
 80009a0:	40010c00 	.word	0x40010c00

080009a4 <DrawFlag>:

/* USER CODE BEGIN 4 */
void DrawFlag(flag* flag)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af02      	add	r7, sp, #8
 80009aa:	6078      	str	r0, [r7, #4]
	if (!flag->vertical) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d120      	bne.n	80009f6 <DrawFlag+0x52>
		uint32_t currentY = FLAG_Y;
 80009b4:	237b      	movs	r3, #123	; 0x7b
 80009b6:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < 3; i++) {
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <DrawFlag+0x9c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	e015      	b.n	80009ec <DrawFlag+0x48>
			ST7789_DrawFilledRectangle(FLAG_X, currentY, FLAG_W, HORIZONTAL_DESLOC, flag->cor[i]);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	b299      	uxth	r1, r3
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <DrawFlag+0x9c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	885b      	ldrh	r3, [r3, #2]
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	2318      	movs	r3, #24
 80009d4:	2282      	movs	r2, #130	; 0x82
 80009d6:	2037      	movs	r0, #55	; 0x37
 80009d8:	f7ff fe52 	bl	8000680 <ST7789_DrawFilledRectangle>
			currentY += HORIZONTAL_DESLOC;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3318      	adds	r3, #24
 80009e0:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < 3; i++) {
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <DrawFlag+0x9c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	3301      	adds	r3, #1
 80009e8:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <DrawFlag+0x9c>)
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <DrawFlag+0x9c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	dde5      	ble.n	80009c0 <DrawFlag+0x1c>
		for (i = 0; i < 3; i++) {
			ST7789_DrawFilledRectangle(currentX, FLAG_Y, VERTICAL_DESLOC, FLAG_H, flag->cor[i]);
			currentX += VERTICAL_DESLOC;
		}
	}
}
 80009f4:	e01f      	b.n	8000a36 <DrawFlag+0x92>
		uint32_t currentX = FLAG_X;
 80009f6:	2337      	movs	r3, #55	; 0x37
 80009f8:	60bb      	str	r3, [r7, #8]
		for (i = 0; i < 3; i++) {
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <DrawFlag+0x9c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	e015      	b.n	8000a2e <DrawFlag+0x8a>
			ST7789_DrawFilledRectangle(currentX, FLAG_Y, VERTICAL_DESLOC, FLAG_H, flag->cor[i]);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	b298      	uxth	r0, r3
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <DrawFlag+0x9c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	885b      	ldrh	r3, [r3, #2]
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	234a      	movs	r3, #74	; 0x4a
 8000a16:	222b      	movs	r2, #43	; 0x2b
 8000a18:	217b      	movs	r1, #123	; 0x7b
 8000a1a:	f7ff fe31 	bl	8000680 <ST7789_DrawFilledRectangle>
			currentX += VERTICAL_DESLOC;
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	332b      	adds	r3, #43	; 0x2b
 8000a22:	60bb      	str	r3, [r7, #8]
		for (i = 0; i < 3; i++) {
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <DrawFlag+0x9c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <DrawFlag+0x9c>)
 8000a2c:	6013      	str	r3, [r2, #0]
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <DrawFlag+0x9c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	dde5      	ble.n	8000a02 <DrawFlag+0x5e>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000198 	.word	0x20000198

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <Error_Handler+0x6>

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_MspInit+0x5c>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <HAL_MspInit+0x5c>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6193      	str	r3, [r2, #24]
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_MspInit+0x5c>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_MspInit+0x5c>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <HAL_MspInit+0x5c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	61d3      	str	r3, [r2, #28]
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <HAL_MspInit+0x5c>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_MspInit+0x60>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <HAL_MspInit+0x60>)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010000 	.word	0x40010000

08000ab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <HAL_SPI_MspInit+0x88>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d12f      	bne.n	8000b30 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <HAL_SPI_MspInit+0x8c>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <HAL_SPI_MspInit+0x8c>)
 8000ad6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_SPI_MspInit+0x8c>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_SPI_MspInit+0x8c>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <HAL_SPI_MspInit+0x8c>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_SPI_MspInit+0x8c>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b00:	23a0      	movs	r3, #160	; 0xa0
 8000b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4619      	mov	r1, r3
 8000b12:	480b      	ldr	r0, [pc, #44]	; (8000b40 <HAL_SPI_MspInit+0x90>)
 8000b14:	f000 fa06 	bl	8000f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b18:	2340      	movs	r3, #64	; 0x40
 8000b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <HAL_SPI_MspInit+0x90>)
 8000b2c:	f000 f9fa 	bl	8000f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40013000 	.word	0x40013000
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010800 	.word	0x40010800

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8a:	f000 f87f 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b9a:	f000 fc66 	bl	800146a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200010b0 	.word	0x200010b0

08000ba8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bda:	f7ff ffe5 	bl	8000ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f007 f967 	bl	8007eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be2:	f7ff fda5 	bl	8000730 <main>
  bx lr
 8000be6:	4770      	bx	lr
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000bf0:	08008050 	.word	0x08008050
  ldr r2, =_sbss
 8000bf4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000bf8:	2000139c 	.word	0x2000139c

08000bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC1_2_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_Init+0x28>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_Init+0x28>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f945 	bl	8000ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 f808 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff ff16 	bl	8000a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40022000 	.word	0x40022000

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x54>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x58>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f95d 	bl	8000f0a <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f925 	bl	8000eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_InitTick+0x5c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000004 	.word	0x20000004

08000c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_IncTick+0x1c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_IncTick+0x20>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a03      	ldr	r2, [pc, #12]	; (8000cac <HAL_IncTick+0x20>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000418 	.word	0x20000418

08000cb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b02      	ldr	r3, [pc, #8]	; (8000cc0 <HAL_GetTick+0x10>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	20000418 	.word	0x20000418

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff fff0 	bl	8000cb0 <HAL_GetTick>
 8000cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	d005      	beq.n	8000cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_Delay+0x40>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cea:	bf00      	nop
 8000cec:	f7ff ffe0 	bl	8000cb0 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8f7      	bhi.n	8000cec <HAL_Delay+0x28>
  {
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000008 	.word	0x20000008

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4906      	ldr	r1, [pc, #24]	; (8000da0 <__NVIC_EnableIRQ+0x34>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e6c:	d301      	bcc.n	8000e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00f      	b.n	8000e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <SysTick_Config+0x40>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f7ff ff90 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <SysTick_Config+0x40>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <SysTick_Config+0x40>)
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff2d 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec8:	f7ff ff42 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	6978      	ldr	r0, [r7, #20]
 8000ed4:	f7ff ff90 	bl	8000df8 <NVIC_EncodePriority>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff5f 	bl	8000da4 <__NVIC_SetPriority>
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff35 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffa2 	bl	8000e5c <SysTick_Config>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b08b      	sub	sp, #44	; 0x2c
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	e127      	b.n	8001188 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 8116 	bne.w	8001182 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b12      	cmp	r3, #18
 8000f5c:	d034      	beq.n	8000fc8 <HAL_GPIO_Init+0xa4>
 8000f5e:	2b12      	cmp	r3, #18
 8000f60:	d80d      	bhi.n	8000f7e <HAL_GPIO_Init+0x5a>
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d02b      	beq.n	8000fbe <HAL_GPIO_Init+0x9a>
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d804      	bhi.n	8000f74 <HAL_GPIO_Init+0x50>
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d031      	beq.n	8000fd2 <HAL_GPIO_Init+0xae>
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d01c      	beq.n	8000fac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f72:	e048      	b.n	8001006 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d043      	beq.n	8001000 <HAL_GPIO_Init+0xdc>
 8000f78:	2b11      	cmp	r3, #17
 8000f7a:	d01b      	beq.n	8000fb4 <HAL_GPIO_Init+0x90>
          break;
 8000f7c:	e043      	b.n	8001006 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f7e:	4a89      	ldr	r2, [pc, #548]	; (80011a4 <HAL_GPIO_Init+0x280>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d026      	beq.n	8000fd2 <HAL_GPIO_Init+0xae>
 8000f84:	4a87      	ldr	r2, [pc, #540]	; (80011a4 <HAL_GPIO_Init+0x280>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d806      	bhi.n	8000f98 <HAL_GPIO_Init+0x74>
 8000f8a:	4a87      	ldr	r2, [pc, #540]	; (80011a8 <HAL_GPIO_Init+0x284>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d020      	beq.n	8000fd2 <HAL_GPIO_Init+0xae>
 8000f90:	4a86      	ldr	r2, [pc, #536]	; (80011ac <HAL_GPIO_Init+0x288>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d01d      	beq.n	8000fd2 <HAL_GPIO_Init+0xae>
          break;
 8000f96:	e036      	b.n	8001006 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f98:	4a85      	ldr	r2, [pc, #532]	; (80011b0 <HAL_GPIO_Init+0x28c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d019      	beq.n	8000fd2 <HAL_GPIO_Init+0xae>
 8000f9e:	4a85      	ldr	r2, [pc, #532]	; (80011b4 <HAL_GPIO_Init+0x290>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d016      	beq.n	8000fd2 <HAL_GPIO_Init+0xae>
 8000fa4:	4a84      	ldr	r2, [pc, #528]	; (80011b8 <HAL_GPIO_Init+0x294>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d013      	beq.n	8000fd2 <HAL_GPIO_Init+0xae>
          break;
 8000faa:	e02c      	b.n	8001006 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	623b      	str	r3, [r7, #32]
          break;
 8000fb2:	e028      	b.n	8001006 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	623b      	str	r3, [r7, #32]
          break;
 8000fbc:	e023      	b.n	8001006 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	3308      	adds	r3, #8
 8000fc4:	623b      	str	r3, [r7, #32]
          break;
 8000fc6:	e01e      	b.n	8001006 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	330c      	adds	r3, #12
 8000fce:	623b      	str	r3, [r7, #32]
          break;
 8000fd0:	e019      	b.n	8001006 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	623b      	str	r3, [r7, #32]
          break;
 8000fde:	e012      	b.n	8001006 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d105      	bne.n	8000ff4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	611a      	str	r2, [r3, #16]
          break;
 8000ff2:	e008      	b.n	8001006 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	615a      	str	r2, [r3, #20]
          break;
 8000ffe:	e002      	b.n	8001006 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
          break;
 8001004:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	2bff      	cmp	r3, #255	; 0xff
 800100a:	d801      	bhi.n	8001010 <HAL_GPIO_Init+0xec>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	e001      	b.n	8001014 <HAL_GPIO_Init+0xf0>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3304      	adds	r3, #4
 8001014:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	2bff      	cmp	r3, #255	; 0xff
 800101a:	d802      	bhi.n	8001022 <HAL_GPIO_Init+0xfe>
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	e002      	b.n	8001028 <HAL_GPIO_Init+0x104>
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	3b08      	subs	r3, #8
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	210f      	movs	r1, #15
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	401a      	ands	r2, r3
 800103a:	6a39      	ldr	r1, [r7, #32]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	431a      	orrs	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 8096 	beq.w	8001182 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001056:	4b59      	ldr	r3, [pc, #356]	; (80011bc <HAL_GPIO_Init+0x298>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4a58      	ldr	r2, [pc, #352]	; (80011bc <HAL_GPIO_Init+0x298>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6193      	str	r3, [r2, #24]
 8001062:	4b56      	ldr	r3, [pc, #344]	; (80011bc <HAL_GPIO_Init+0x298>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800106e:	4a54      	ldr	r2, [pc, #336]	; (80011c0 <HAL_GPIO_Init+0x29c>)
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	4013      	ands	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4b      	ldr	r2, [pc, #300]	; (80011c4 <HAL_GPIO_Init+0x2a0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d013      	beq.n	80010c2 <HAL_GPIO_Init+0x19e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4a      	ldr	r2, [pc, #296]	; (80011c8 <HAL_GPIO_Init+0x2a4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d00d      	beq.n	80010be <HAL_GPIO_Init+0x19a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a49      	ldr	r2, [pc, #292]	; (80011cc <HAL_GPIO_Init+0x2a8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d007      	beq.n	80010ba <HAL_GPIO_Init+0x196>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a48      	ldr	r2, [pc, #288]	; (80011d0 <HAL_GPIO_Init+0x2ac>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_GPIO_Init+0x192>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x1a0>
 80010b6:	2304      	movs	r3, #4
 80010b8:	e004      	b.n	80010c4 <HAL_GPIO_Init+0x1a0>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_Init+0x1a0>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x1a0>
 80010c2:	2300      	movs	r3, #0
 80010c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c6:	f002 0203 	and.w	r2, r2, #3
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	4093      	lsls	r3, r2
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010d4:	493a      	ldr	r1, [pc, #232]	; (80011c0 <HAL_GPIO_Init+0x29c>)
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d006      	beq.n	80010fc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010ee:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4938      	ldr	r1, [pc, #224]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]
 80010fa:	e006      	b.n	800110a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010fc:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	43db      	mvns	r3, r3
 8001104:	4933      	ldr	r1, [pc, #204]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001106:	4013      	ands	r3, r2
 8001108:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d006      	beq.n	8001124 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001116:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	492e      	ldr	r1, [pc, #184]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	604b      	str	r3, [r1, #4]
 8001122:	e006      	b.n	8001132 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	43db      	mvns	r3, r3
 800112c:	4929      	ldr	r1, [pc, #164]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 800112e:	4013      	ands	r3, r2
 8001130:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d006      	beq.n	800114c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	4924      	ldr	r1, [pc, #144]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	608b      	str	r3, [r1, #8]
 800114a:	e006      	b.n	800115a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	43db      	mvns	r3, r3
 8001154:	491f      	ldr	r1, [pc, #124]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001156:	4013      	ands	r3, r2
 8001158:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d006      	beq.n	8001174 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	491a      	ldr	r1, [pc, #104]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	60cb      	str	r3, [r1, #12]
 8001172:	e006      	b.n	8001182 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	43db      	mvns	r3, r3
 800117c:	4915      	ldr	r1, [pc, #84]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 800117e:	4013      	ands	r3, r2
 8001180:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	3301      	adds	r3, #1
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	fa22 f303 	lsr.w	r3, r2, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	f47f aed0 	bne.w	8000f38 <HAL_GPIO_Init+0x14>
  }
}
 8001198:	bf00      	nop
 800119a:	372c      	adds	r7, #44	; 0x2c
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	10210000 	.word	0x10210000
 80011a8:	10110000 	.word	0x10110000
 80011ac:	10120000 	.word	0x10120000
 80011b0:	10310000 	.word	0x10310000
 80011b4:	10320000 	.word	0x10320000
 80011b8:	10220000 	.word	0x10220000
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000
 80011c4:	40010800 	.word	0x40010800
 80011c8:	40010c00 	.word	0x40010c00
 80011cc:	40011000 	.word	0x40011000
 80011d0:	40011400 	.word	0x40011400
 80011d4:	40010400 	.word	0x40010400

080011d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011f4:	e003      	b.n	80011fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	041a      	lsls	r2, r3, #16
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	611a      	str	r2, [r3, #16]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120a:	b08b      	sub	sp, #44	; 0x2c
 800120c:	af06      	add	r7, sp, #24
 800120e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e0fd      	b.n	8001416 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d106      	bne.n	8001234 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f006 fb94 	bl	800795c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2203      	movs	r2, #3
 8001238:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f002 fbcf 	bl	80039e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	687e      	ldr	r6, [r7, #4]
 800124e:	466d      	mov	r5, sp
 8001250:	f106 0410 	add.w	r4, r6, #16
 8001254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	602b      	str	r3, [r5, #0]
 800125c:	1d33      	adds	r3, r6, #4
 800125e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001260:	6838      	ldr	r0, [r7, #0]
 8001262:	f002 fb99 	bl	8003998 <USB_CoreInit>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2202      	movs	r2, #2
 8001270:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0ce      	b.n	8001416 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fbca 	bl	8003a18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e04c      	b.n	8001324 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	440b      	add	r3, r1
 800129a:	3301      	adds	r3, #1
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	b298      	uxth	r0, r3
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	440b      	add	r3, r1
 80012c6:	3336      	adds	r3, #54	; 0x36
 80012c8:	4602      	mov	r2, r0
 80012ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	440b      	add	r3, r1
 80012dc:	3303      	adds	r3, #3
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	440b      	add	r3, r1
 80012f0:	3338      	adds	r3, #56	; 0x38
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	440b      	add	r3, r1
 8001304:	333c      	adds	r3, #60	; 0x3c
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800130a:	7bfa      	ldrb	r2, [r7, #15]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	3340      	adds	r3, #64	; 0x40
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	3301      	adds	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	d3ad      	bcc.n	800128a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	e044      	b.n	80013be <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	440b      	add	r3, r1
 800136e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	440b      	add	r3, r1
 8001384:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	440b      	add	r3, r1
 800139a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	440b      	add	r3, r1
 80013b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	3301      	adds	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d3b5      	bcc.n	8001334 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	687e      	ldr	r6, [r7, #4]
 80013d0:	466d      	mov	r5, sp
 80013d2:	f106 0410 	add.w	r4, r6, #16
 80013d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	602b      	str	r3, [r5, #0]
 80013de:	1d33      	adds	r3, r6, #4
 80013e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e2:	6838      	ldr	r0, [r7, #0]
 80013e4:	f002 fb24 	bl	8003a30 <USB_DevInit>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2202      	movs	r2, #2
 80013f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00d      	b.n	8001416 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f004 fc95 	bl	8005d3e <USB_DevDisconnect>

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800141e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_PCD_Start+0x16>
 8001430:	2302      	movs	r3, #2
 8001432:	e016      	b.n	8001462 <HAL_PCD_Start+0x44>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f002 fab9 	bl	80039b8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001446:	2101      	movs	r1, #1
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f006 fcfa 	bl	8007e42 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f004 fc69 	bl	8005d2a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b088      	sub	sp, #32
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f004 fc6b 	bl	8005d52 <USB_ReadInterrupts>
 800147c:	4603      	mov	r3, r0
 800147e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001486:	d102      	bne.n	800148e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fb61 	bl	8001b50 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f004 fc5d 	bl	8005d52 <USB_ReadInterrupts>
 8001498:	4603      	mov	r3, r0
 800149a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a2:	d112      	bne.n	80014ca <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014b6:	b292      	uxth	r2, r2
 80014b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f006 fac8 	bl	8007a52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80014c2:	2100      	movs	r1, #0
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f925 	bl	8001714 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f004 fc3f 	bl	8005d52 <USB_ReadInterrupts>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014de:	d10b      	bne.n	80014f8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014f2:	b292      	uxth	r2, r2
 80014f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f004 fc28 	bl	8005d52 <USB_ReadInterrupts>
 8001502:	4603      	mov	r3, r0
 8001504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800150c:	d10b      	bne.n	8001526 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001516:	b29a      	uxth	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001520:	b292      	uxth	r2, r2
 8001522:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f004 fc11 	bl	8005d52 <USB_ReadInterrupts>
 8001530:	4603      	mov	r3, r0
 8001532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800153a:	d126      	bne.n	800158a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001544:	b29a      	uxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0204 	bic.w	r2, r2, #4
 800154e:	b292      	uxth	r2, r2
 8001550:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800155c:	b29a      	uxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0208 	bic.w	r2, r2, #8
 8001566:	b292      	uxth	r2, r2
 8001568:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f006 faa9 	bl	8007ac4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800157a:	b29a      	uxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001584:	b292      	uxth	r2, r2
 8001586:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f004 fbdf 	bl	8005d52 <USB_ReadInterrupts>
 8001594:	4603      	mov	r3, r0
 8001596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800159a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800159e:	f040 8084 	bne.w	80016aa <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	77fb      	strb	r3, [r7, #31]
 80015a6:	e011      	b.n	80015cc <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	7ffb      	ldrb	r3, [r7, #31]
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	441a      	add	r2, r3
 80015b4:	7ffb      	ldrb	r3, [r7, #31]
 80015b6:	8812      	ldrh	r2, [r2, #0]
 80015b8:	b292      	uxth	r2, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	f107 0120 	add.w	r1, r7, #32
 80015c0:	440b      	add	r3, r1
 80015c2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80015c6:	7ffb      	ldrb	r3, [r7, #31]
 80015c8:	3301      	adds	r3, #1
 80015ca:	77fb      	strb	r3, [r7, #31]
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
 80015ce:	2b07      	cmp	r3, #7
 80015d0:	d9ea      	bls.n	80015a8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015da:	b29a      	uxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0201 	orr.w	r2, r2, #1
 80015e4:	b292      	uxth	r2, r2
 80015e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0201 	bic.w	r2, r2, #1
 80015fc:	b292      	uxth	r2, r2
 80015fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001602:	bf00      	nop
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800160c:	b29b      	uxth	r3, r3
 800160e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f6      	beq.n	8001604 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800161e:	b29a      	uxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001628:	b292      	uxth	r2, r2
 800162a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800162e:	2300      	movs	r3, #0
 8001630:	77fb      	strb	r3, [r7, #31]
 8001632:	e010      	b.n	8001656 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	4611      	mov	r1, r2
 800163c:	7ffa      	ldrb	r2, [r7, #31]
 800163e:	0092      	lsls	r2, r2, #2
 8001640:	440a      	add	r2, r1
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	f107 0120 	add.w	r1, r7, #32
 8001648:	440b      	add	r3, r1
 800164a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800164e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001650:	7ffb      	ldrb	r3, [r7, #31]
 8001652:	3301      	adds	r3, #1
 8001654:	77fb      	strb	r3, [r7, #31]
 8001656:	7ffb      	ldrb	r3, [r7, #31]
 8001658:	2b07      	cmp	r3, #7
 800165a:	d9eb      	bls.n	8001634 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001664:	b29a      	uxth	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0208 	orr.w	r2, r2, #8
 800166e:	b292      	uxth	r2, r2
 8001670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800167c:	b29a      	uxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001686:	b292      	uxth	r2, r2
 8001688:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001694:	b29a      	uxth	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0204 	orr.w	r2, r2, #4
 800169e:	b292      	uxth	r2, r2
 80016a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f006 f9f3 	bl	8007a90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f004 fb4f 	bl	8005d52 <USB_ReadInterrupts>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016be:	d10e      	bne.n	80016de <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016d2:	b292      	uxth	r2, r2
 80016d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f006 f9ac 	bl	8007a36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f004 fb35 	bl	8005d52 <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f2:	d10b      	bne.n	800170c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001706:	b292      	uxth	r2, r2
 8001708:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800170c:	bf00      	nop
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_PCD_SetAddress+0x1a>
 800172a:	2302      	movs	r3, #2
 800172c:	e013      	b.n	8001756 <HAL_PCD_SetAddress+0x42>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f004 fadc 	bl	8005d04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	4608      	mov	r0, r1
 8001768:	4611      	mov	r1, r2
 800176a:	461a      	mov	r2, r3
 800176c:	4603      	mov	r3, r0
 800176e:	70fb      	strb	r3, [r7, #3]
 8001770:	460b      	mov	r3, r1
 8001772:	803b      	strh	r3, [r7, #0]
 8001774:	4613      	mov	r3, r2
 8001776:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800177c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001780:	2b00      	cmp	r3, #0
 8001782:	da0e      	bge.n	80017a2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2201      	movs	r2, #1
 800179e:	705a      	strb	r2, [r3, #1]
 80017a0:	e00e      	b.n	80017c0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	f003 0207 	and.w	r2, r3, #7
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80017cc:	883a      	ldrh	r2, [r7, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	78ba      	ldrb	r2, [r7, #2]
 80017d6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	785b      	ldrb	r3, [r3, #1]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d004      	beq.n	80017ea <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017ea:	78bb      	ldrb	r3, [r7, #2]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d102      	bne.n	80017f6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_PCD_EP_Open+0xa6>
 8001800:	2302      	movs	r3, #2
 8001802:	e00e      	b.n	8001822 <HAL_PCD_EP_Open+0xc4>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	4618      	mov	r0, r3
 8001814:	f002 f92c 	bl	8003a70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001820:	7afb      	ldrb	r3, [r7, #11]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800183a:	2b00      	cmp	r3, #0
 800183c:	da0e      	bge.n	800185c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2201      	movs	r2, #1
 8001858:	705a      	strb	r2, [r3, #1]
 800185a:	e00e      	b.n	800187a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	f003 0207 	and.w	r2, r3, #7
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	b2da      	uxtb	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_PCD_EP_Close+0x6a>
 8001890:	2302      	movs	r3, #2
 8001892:	e00e      	b.n	80018b2 <HAL_PCD_EP_Close+0x88>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68f9      	ldr	r1, [r7, #12]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f002 fc4e 	bl	8004144 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	460b      	mov	r3, r1
 80018c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018ca:	7afb      	ldrb	r3, [r7, #11]
 80018cc:	f003 0207 	and.w	r2, r3, #7
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2200      	movs	r2, #0
 80018f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2200      	movs	r2, #0
 80018f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018fa:	7afb      	ldrb	r3, [r7, #11]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	b2da      	uxtb	r2, r3
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001906:	7afb      	ldrb	r3, [r7, #11]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	2b00      	cmp	r3, #0
 800190e:	d106      	bne.n	800191e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6979      	ldr	r1, [r7, #20]
 8001916:	4618      	mov	r0, r3
 8001918:	f002 fe00 	bl	800451c <USB_EPStartXfer>
 800191c:	e005      	b.n	800192a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6979      	ldr	r1, [r7, #20]
 8001924:	4618      	mov	r0, r3
 8001926:	f002 fdf9 	bl	800451c <USB_EPStartXfer>
  }

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	f003 0207 	and.w	r2, r3, #7
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	460b      	mov	r3, r1
 8001970:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001972:	7afb      	ldrb	r3, [r7, #11]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4413      	add	r3, r2
 8001986:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2200      	movs	r2, #0
 80019a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	2201      	movs	r2, #1
 80019ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ae:	7afb      	ldrb	r3, [r7, #11]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019ba:	7afb      	ldrb	r3, [r7, #11]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d106      	bne.n	80019d2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6979      	ldr	r1, [r7, #20]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 fda6 	bl	800451c <USB_EPStartXfer>
 80019d0:	e005      	b.n	80019de <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6979      	ldr	r1, [r7, #20]
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 fd9f 	bl	800451c <USB_EPStartXfer>
  }

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	f003 0207 	and.w	r2, r3, #7
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d901      	bls.n	8001a06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e04c      	b.n	8001aa0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da0e      	bge.n	8001a2c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	705a      	strb	r2, [r3, #1]
 8001a2a:	e00c      	b.n	8001a46 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_PCD_EP_SetStall+0x7e>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e01c      	b.n	8001aa0 <HAL_PCD_EP_SetStall+0xb8>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68f9      	ldr	r1, [r7, #12]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f004 f848 	bl	8005b0a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4610      	mov	r0, r2
 8001a92:	f004 f96d 	bl	8005d70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	f003 020f 	and.w	r2, r3, #15
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d901      	bls.n	8001ac6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e040      	b.n	8001b48 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ac6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da0e      	bge.n	8001aec <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	705a      	strb	r2, [r3, #1]
 8001aea:	e00e      	b.n	8001b0a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	f003 0207 	and.w	r2, r3, #7
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_PCD_EP_ClrStall+0x82>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e00e      	b.n	8001b48 <HAL_PCD_EP_ClrStall+0xa0>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68f9      	ldr	r1, [r7, #12]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f004 f836 	bl	8005baa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08e      	sub	sp, #56	; 0x38
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b58:	e2ec      	b.n	8002134 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b62:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001b70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f040 8161 	bne.w	8001e3c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d152      	bne.n	8001c2a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b94:	81fb      	strh	r3, [r7, #14]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	89fb      	ldrh	r3, [r7, #14]
 8001b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3328      	adds	r3, #40	; 0x28
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	441a      	add	r2, r3
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001be8:	2100      	movs	r1, #0
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f005 ff09 	bl	8007a02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 829b 	beq.w	8002134 <PCD_EP_ISR_Handler+0x5e4>
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f040 8296 	bne.w	8002134 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b292      	uxth	r2, r2
 8001c1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c28:	e284      	b.n	8002134 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d034      	beq.n	8001cae <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	3306      	adds	r3, #6
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f004 f8c3 	bl	8005e0e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c94:	4013      	ands	r3, r2
 8001c96:	823b      	strh	r3, [r7, #16]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	8a3a      	ldrh	r2, [r7, #16]
 8001c9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ca2:	b292      	uxth	r2, r2
 8001ca4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f005 fe7e 	bl	80079a8 <HAL_PCD_SetupStageCallback>
 8001cac:	e242      	b.n	8002134 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cae:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f280 823e 	bge.w	8002134 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	83bb      	strh	r3, [r7, #28]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	8bba      	ldrh	r2, [r7, #28]
 8001cce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cd2:	b292      	uxth	r2, r2
 8001cd4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	3306      	adds	r3, #6
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d019      	beq.n	8001d3e <PCD_EP_ISR_Handler+0x1ee>
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d015      	beq.n	8001d3e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	6959      	ldr	r1, [r3, #20]
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	f004 f873 	bl	8005e0e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	441a      	add	r2, r3
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d36:	2100      	movs	r1, #0
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f005 fe47 	bl	80079cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 81f2 	bne.w	8002134 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	4413      	add	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d112      	bne.n	8001d9e <PCD_EP_ISR_Handler+0x24e>
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	801a      	strh	r2, [r3, #0]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	801a      	strh	r2, [r3, #0]
 8001d9c:	e02f      	b.n	8001dfe <PCD_EP_ISR_Handler+0x2ae>
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b3e      	cmp	r3, #62	; 0x3e
 8001da4:	d813      	bhi.n	8001dce <PCD_EP_ISR_Handler+0x27e>
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	633b      	str	r3, [r7, #48]	; 0x30
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <PCD_EP_ISR_Handler+0x270>
 8001dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8001dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	029b      	lsls	r3, r3, #10
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	801a      	strh	r2, [r3, #0]
 8001dcc:	e017      	b.n	8001dfe <PCD_EP_ISR_Handler+0x2ae>
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <PCD_EP_ISR_Handler+0x298>
 8001de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de4:	3b01      	subs	r3, #1
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	029b      	lsls	r3, r3, #10
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0e:	827b      	strh	r3, [r7, #18]
 8001e10:	8a7b      	ldrh	r3, [r7, #18]
 8001e12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e16:	827b      	strh	r3, [r7, #18]
 8001e18:	8a7b      	ldrh	r3, [r7, #18]
 8001e1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e1e:	827b      	strh	r3, [r7, #18]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	8a7b      	ldrh	r3, [r7, #18]
 8001e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	8013      	strh	r3, [r2, #0]
 8001e3a:	e17b      	b.n	8002134 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e4e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f280 80ea 	bge.w	800202c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e6e:	4013      	ands	r3, r2
 8001e70:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e86:	b292      	uxth	r2, r2
 8001e88:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e8a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	7b1b      	ldrb	r3, [r3, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d122      	bne.n	8001eee <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	3306      	adds	r3, #6
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001ed2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 8087 	beq.w	8001fe8 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	6959      	ldr	r1, [r3, #20]
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	88da      	ldrh	r2, [r3, #6]
 8001ee6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ee8:	f003 ff91 	bl	8005e0e <USB_ReadPMA>
 8001eec:	e07c      	b.n	8001fe8 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	78db      	ldrb	r3, [r3, #3]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d108      	bne.n	8001f08 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ef6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f927 	bl	8002150 <HAL_PCD_EP_DB_Receive>
 8001f02:	4603      	mov	r3, r0
 8001f04:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001f06:	e06f      	b.n	8001fe8 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f22:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	441a      	add	r2, r3
 8001f32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d021      	beq.n	8001fa6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	3302      	adds	r3, #2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f8a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d02a      	beq.n	8001fe8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	6959      	ldr	r1, [r3, #20]
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	891a      	ldrh	r2, [r3, #8]
 8001f9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fa0:	f003 ff35 	bl	8005e0e <USB_ReadPMA>
 8001fa4:	e020      	b.n	8001fe8 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	3306      	adds	r3, #6
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fce:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	6959      	ldr	r1, [r3, #20]
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	895a      	ldrh	r2, [r3, #10]
 8001fe2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fe4:	f003 ff13 	bl	8005e0e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	69da      	ldr	r2, [r3, #28]
 8001fec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fee:	441a      	add	r2, r3
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ffa:	441a      	add	r2, r3
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <PCD_EP_ISR_Handler+0x4c2>
 8002008:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	429a      	cmp	r2, r3
 8002010:	d206      	bcs.n	8002020 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f005 fcd7 	bl	80079cc <HAL_PCD_DataOutStageCallback>
 800201e:	e005      	b.n	800202c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002026:	4618      	mov	r0, r3
 8002028:	f002 fa78 	bl	800451c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800202c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d07e      	beq.n	8002134 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002036:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002064:	843b      	strh	r3, [r7, #32]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	441a      	add	r2, r3
 8002074:	8c3b      	ldrh	r3, [r7, #32]
 8002076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800207a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800207e:	b29b      	uxth	r3, r3
 8002080:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	78db      	ldrb	r3, [r3, #3]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d00c      	beq.n	80020a4 <PCD_EP_ISR_Handler+0x554>
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	78db      	ldrb	r3, [r3, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002096:	2b02      	cmp	r3, #2
 8002098:	d146      	bne.n	8002128 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800209a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d141      	bne.n	8002128 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	3302      	adds	r3, #2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6812      	ldr	r2, [r2, #0]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020cc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	8bfb      	ldrh	r3, [r7, #30]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d906      	bls.n	80020e6 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	8bfb      	ldrh	r3, [r7, #30]
 80020de:	1ad2      	subs	r2, r2, r3
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	619a      	str	r2, [r3, #24]
 80020e4:	e002      	b.n	80020ec <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d106      	bne.n	8002102 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	4619      	mov	r1, r3
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f005 fc81 	bl	8007a02 <HAL_PCD_DataInStageCallback>
 8002100:	e018      	b.n	8002134 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	8bfb      	ldrh	r3, [r7, #30]
 8002108:	441a      	add	r2, r3
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	69da      	ldr	r2, [r3, #28]
 8002112:	8bfb      	ldrh	r3, [r7, #30]
 8002114:	441a      	add	r2, r3
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002120:	4618      	mov	r0, r3
 8002122:	f002 f9fb 	bl	800451c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002126:	e005      	b.n	8002134 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002128:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800212a:	461a      	mov	r2, r3
 800212c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f91b 	bl	800236a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800213c:	b29b      	uxth	r3, r3
 800213e:	b21b      	sxth	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	f6ff ad0a 	blt.w	8001b5a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3738      	adds	r7, #56	; 0x38
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	4613      	mov	r3, r2
 800215c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d07e      	beq.n	8002266 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002170:	b29b      	uxth	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4413      	add	r3, r2
 800217c:	3302      	adds	r3, #2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	4413      	add	r3, r2
 8002186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002190:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	8b7b      	ldrh	r3, [r7, #26]
 8002198:	429a      	cmp	r2, r3
 800219a:	d306      	bcc.n	80021aa <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	8b7b      	ldrh	r3, [r7, #26]
 80021a2:	1ad2      	subs	r2, r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	619a      	str	r2, [r3, #24]
 80021a8:	e002      	b.n	80021b0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d123      	bne.n	8002200 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d2:	833b      	strh	r3, [r7, #24]
 80021d4:	8b3b      	ldrh	r3, [r7, #24]
 80021d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021da:	833b      	strh	r3, [r7, #24]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	441a      	add	r2, r3
 80021ea:	8b3b      	ldrh	r3, [r7, #24]
 80021ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	d01f      	beq.n	800224a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002224:	82fb      	strh	r3, [r7, #22]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	441a      	add	r2, r3
 8002234:	8afb      	ldrh	r3, [r7, #22]
 8002236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800223a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800223e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002242:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002246:	b29b      	uxth	r3, r3
 8002248:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800224a:	8b7b      	ldrh	r3, [r7, #26]
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 8087 	beq.w	8002360 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	6959      	ldr	r1, [r3, #20]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	891a      	ldrh	r2, [r3, #8]
 800225e:	8b7b      	ldrh	r3, [r7, #26]
 8002260:	f003 fdd5 	bl	8005e0e <USB_ReadPMA>
 8002264:	e07c      	b.n	8002360 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800226e:	b29b      	uxth	r3, r3
 8002270:	461a      	mov	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	3306      	adds	r3, #6
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	4413      	add	r3, r2
 8002284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800228e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	699a      	ldr	r2, [r3, #24]
 8002294:	8b7b      	ldrh	r3, [r7, #26]
 8002296:	429a      	cmp	r2, r3
 8002298:	d306      	bcc.n	80022a8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	8b7b      	ldrh	r3, [r7, #26]
 80022a0:	1ad2      	subs	r2, r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	619a      	str	r2, [r3, #24]
 80022a6:	e002      	b.n	80022ae <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d123      	bne.n	80022fe <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d0:	83fb      	strh	r3, [r7, #30]
 80022d2:	8bfb      	ldrh	r3, [r7, #30]
 80022d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022d8:	83fb      	strh	r3, [r7, #30]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	441a      	add	r2, r3
 80022e8:	8bfb      	ldrh	r3, [r7, #30]
 80022ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002304:	2b00      	cmp	r3, #0
 8002306:	d11f      	bne.n	8002348 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800231e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002322:	83bb      	strh	r3, [r7, #28]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	441a      	add	r2, r3
 8002332:	8bbb      	ldrh	r3, [r7, #28]
 8002334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800233c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002340:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002344:	b29b      	uxth	r3, r3
 8002346:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002348:	8b7b      	ldrh	r3, [r7, #26]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	6959      	ldr	r1, [r3, #20]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	895a      	ldrh	r2, [r3, #10]
 800235a:	8b7b      	ldrh	r3, [r7, #26]
 800235c:	f003 fd57 	bl	8005e0e <USB_ReadPMA>
    }
  }

  return count;
 8002360:	8b7b      	ldrh	r3, [r7, #26]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b0a2      	sub	sp, #136	; 0x88
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	4613      	mov	r3, r2
 8002376:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 81c7 	beq.w	8002712 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800238c:	b29b      	uxth	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	3302      	adds	r3, #2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len > TxByteNbre)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	699a      	ldr	r2, [r3, #24]
 80023b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d907      	bls.n	80023cc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	699a      	ldr	r2, [r3, #24]
 80023c0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80023c4:	1ad2      	subs	r2, r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	619a      	str	r2, [r3, #24]
 80023ca:	e002      	b.n	80023d2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 80b9 	bne.w	800254e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	785b      	ldrb	r3, [r3, #1]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d126      	bne.n	8002432 <HAL_PCD_EP_DB_Transmit+0xc8>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	4413      	add	r3, r2
 80023fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	011a      	lsls	r2, r3, #4
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	4413      	add	r3, r2
 8002406:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002416:	b29a      	uxth	r2, r3
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	801a      	strh	r2, [r3, #0]
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	b29b      	uxth	r3, r3
 8002422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800242a:	b29a      	uxth	r2, r3
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	801a      	strh	r2, [r3, #0]
 8002430:	e01a      	b.n	8002468 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	785b      	ldrb	r3, [r3, #1]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d116      	bne.n	8002468 <HAL_PCD_EP_DB_Transmit+0xfe>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	633b      	str	r3, [r7, #48]	; 0x30
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002448:	b29b      	uxth	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	4413      	add	r3, r2
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	011a      	lsls	r2, r3, #4
 8002458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245a:	4413      	add	r3, r2
 800245c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	2200      	movs	r2, #0
 8002466:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	623b      	str	r3, [r7, #32]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	785b      	ldrb	r3, [r3, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d126      	bne.n	80024c4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	61bb      	str	r3, [r7, #24]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002484:	b29b      	uxth	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	4413      	add	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	011a      	lsls	r2, r3, #4
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	4413      	add	r3, r2
 8002498:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	801a      	strh	r2, [r3, #0]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024bc:	b29a      	uxth	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	801a      	strh	r2, [r3, #0]
 80024c2:	e017      	b.n	80024f4 <HAL_PCD_EP_DB_Transmit+0x18a>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	785b      	ldrb	r3, [r3, #1]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d113      	bne.n	80024f4 <HAL_PCD_EP_DB_Transmit+0x18a>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	4413      	add	r3, r2
 80024dc:	623b      	str	r3, [r7, #32]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	011a      	lsls	r2, r3, #4
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	4413      	add	r3, r2
 80024e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	2200      	movs	r2, #0
 80024f2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f005 fa81 	bl	8007a02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 82d1 	beq.w	8002aae <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002526:	827b      	strh	r3, [r7, #18]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	441a      	add	r2, r3
 8002536:	8a7b      	ldrh	r3, [r7, #18]
 8002538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800253c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002548:	b29b      	uxth	r3, r3
 800254a:	8013      	strh	r3, [r2, #0]
 800254c:	e2af      	b.n	8002aae <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d021      	beq.n	800259c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800256e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002572:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	441a      	add	r2, r3
 8002584:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800258c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002598:	b29b      	uxth	r3, r3
 800259a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	f040 8283 	bne.w	8002aae <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80025b0:	441a      	add	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80025be:	441a      	add	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	6a1a      	ldr	r2, [r3, #32]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d309      	bcc.n	80025e4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	6a1a      	ldr	r2, [r3, #32]
 80025da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025dc:	1ad2      	subs	r2, r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	621a      	str	r2, [r3, #32]
 80025e2:	e015      	b.n	8002610 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80025ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80025f0:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025fa:	e009      	b.n	8002610 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2200      	movs	r2, #0
 800260e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	785b      	ldrb	r3, [r3, #1]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d155      	bne.n	80026c4 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	63bb      	str	r3, [r7, #56]	; 0x38
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002626:	b29b      	uxth	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	4413      	add	r3, r2
 800262e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	011a      	lsls	r2, r3, #4
 8002636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002638:	4413      	add	r3, r2
 800263a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800263e:	637b      	str	r3, [r7, #52]	; 0x34
 8002640:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002642:	2b00      	cmp	r3, #0
 8002644:	d112      	bne.n	800266c <HAL_PCD_EP_DB_Transmit+0x302>
 8002646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002650:	b29a      	uxth	r2, r3
 8002652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002654:	801a      	strh	r2, [r3, #0]
 8002656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002664:	b29a      	uxth	r2, r3
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	801a      	strh	r2, [r3, #0]
 800266a:	e047      	b.n	80026fc <HAL_PCD_EP_DB_Transmit+0x392>
 800266c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800266e:	2b3e      	cmp	r3, #62	; 0x3e
 8002670:	d811      	bhi.n	8002696 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002674:	085b      	lsrs	r3, r3, #1
 8002676:	653b      	str	r3, [r7, #80]	; 0x50
 8002678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002684:	3301      	adds	r3, #1
 8002686:	653b      	str	r3, [r7, #80]	; 0x50
 8002688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800268a:	b29b      	uxth	r3, r3
 800268c:	029b      	lsls	r3, r3, #10
 800268e:	b29a      	uxth	r2, r3
 8002690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002692:	801a      	strh	r2, [r3, #0]
 8002694:	e032      	b.n	80026fc <HAL_PCD_EP_DB_Transmit+0x392>
 8002696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	653b      	str	r3, [r7, #80]	; 0x50
 800269c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <HAL_PCD_EP_DB_Transmit+0x342>
 80026a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a8:	3b01      	subs	r3, #1
 80026aa:	653b      	str	r3, [r7, #80]	; 0x50
 80026ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	029b      	lsls	r3, r3, #10
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026bc:	b29a      	uxth	r2, r3
 80026be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	e01b      	b.n	80026fc <HAL_PCD_EP_DB_Transmit+0x392>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	785b      	ldrb	r3, [r3, #1]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d117      	bne.n	80026fc <HAL_PCD_EP_DB_Transmit+0x392>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	643b      	str	r3, [r7, #64]	; 0x40
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026da:	b29b      	uxth	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e0:	4413      	add	r3, r2
 80026e2:	643b      	str	r3, [r7, #64]	; 0x40
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	011a      	lsls	r2, r3, #4
 80026ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ec:	4413      	add	r3, r2
 80026ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6959      	ldr	r1, [r3, #20]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	891a      	ldrh	r2, [r3, #8]
 8002708:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800270a:	b29b      	uxth	r3, r3
 800270c:	f003 fb3b 	bl	8005d86 <USB_WritePMA>
 8002710:	e1cd      	b.n	8002aae <HAL_PCD_EP_DB_Transmit+0x744>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800271a:	b29b      	uxth	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4413      	add	r3, r2
 8002726:	3306      	adds	r3, #6
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	4413      	add	r3, r2
 8002730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800273a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len >= TxByteNbre)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002746:	429a      	cmp	r2, r3
 8002748:	d307      	bcc.n	800275a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002752:	1ad2      	subs	r2, r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	619a      	str	r2, [r3, #24]
 8002758:	e002      	b.n	8002760 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b00      	cmp	r3, #0
 8002766:	f040 80c1 	bne.w	80028ec <HAL_PCD_EP_DB_Transmit+0x582>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	785b      	ldrb	r3, [r3, #1]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d126      	bne.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x456>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002780:	b29b      	uxth	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002786:	4413      	add	r3, r2
 8002788:	67fb      	str	r3, [r7, #124]	; 0x7c
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	011a      	lsls	r2, r3, #4
 8002790:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002792:	4413      	add	r3, r2
 8002794:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002798:	67bb      	str	r3, [r7, #120]	; 0x78
 800279a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027a8:	801a      	strh	r2, [r3, #0]
 80027aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027bc:	801a      	strh	r2, [r3, #0]
 80027be:	e01a      	b.n	80027f6 <HAL_PCD_EP_DB_Transmit+0x48c>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	785b      	ldrb	r3, [r3, #1]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d116      	bne.n	80027f6 <HAL_PCD_EP_DB_Transmit+0x48c>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	673b      	str	r3, [r7, #112]	; 0x70
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027dc:	4413      	add	r3, r2
 80027de:	673b      	str	r3, [r7, #112]	; 0x70
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	011a      	lsls	r2, r3, #4
 80027e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027e8:	4413      	add	r3, r2
 80027ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f2:	2200      	movs	r2, #0
 80027f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	785b      	ldrb	r3, [r3, #1]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d126      	bne.n	8002854 <HAL_PCD_EP_DB_Transmit+0x4ea>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002814:	b29b      	uxth	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800281a:	4413      	add	r3, r2
 800281c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	011a      	lsls	r2, r3, #4
 8002824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002826:	4413      	add	r3, r2
 8002828:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800282c:	64bb      	str	r3, [r7, #72]	; 0x48
 800282e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	b29b      	uxth	r3, r3
 8002834:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002838:	b29a      	uxth	r2, r3
 800283a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283c:	801a      	strh	r2, [r3, #0]
 800283e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800284c:	b29a      	uxth	r2, r3
 800284e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002850:	801a      	strh	r2, [r3, #0]
 8002852:	e01c      	b.n	800288e <HAL_PCD_EP_DB_Transmit+0x524>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	785b      	ldrb	r3, [r3, #1]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d118      	bne.n	800288e <HAL_PCD_EP_DB_Transmit+0x524>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002864:	b29b      	uxth	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800286c:	4413      	add	r3, r2
 800286e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	011a      	lsls	r2, r3, #4
 8002878:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800287c:	4413      	add	r3, r2
 800287e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002882:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002886:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800288a:	2200      	movs	r2, #0
 800288c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	4619      	mov	r1, r3
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f005 f8b4 	bl	8007a02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f040 8104 	bne.w	8002aae <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	441a      	add	r2, r3
 80028d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80028d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	8013      	strh	r3, [r2, #0]
 80028ea:	e0e0      	b.n	8002aae <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d121      	bne.n	800293a <HAL_PCD_EP_DB_Transmit+0x5d0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800290c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002910:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	441a      	add	r2, r3
 8002922:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800292a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800292e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002936:	b29b      	uxth	r3, r3
 8002938:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002940:	2b01      	cmp	r3, #1
 8002942:	f040 80b4 	bne.w	8002aae <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800294e:	441a      	add	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	69da      	ldr	r2, [r3, #28]
 8002958:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800295c:	441a      	add	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	6a1a      	ldr	r2, [r3, #32]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	429a      	cmp	r2, r3
 800296c:	d309      	bcc.n	8002982 <HAL_PCD_EP_DB_Transmit+0x618>
        {
          len = ep->maxpacket;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	6a1a      	ldr	r2, [r3, #32]
 8002978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800297a:	1ad2      	subs	r2, r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	621a      	str	r2, [r3, #32]
 8002980:	e015      	b.n	80029ae <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else if (ep->xfer_len_db == 0U)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <HAL_PCD_EP_DB_Transmit+0x630>
        {
          len = TxByteNbre;
 800298a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800298e:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002998:	e009      	b.n	80029ae <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else
        {
          len = ep->xfer_len_db;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2200      	movs	r2, #0
 80029a4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	667b      	str	r3, [r7, #100]	; 0x64
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	785b      	ldrb	r3, [r3, #1]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d155      	bne.n	8002a68 <HAL_PCD_EP_DB_Transmit+0x6fe>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d0:	4413      	add	r3, r2
 80029d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	011a      	lsls	r2, r3, #4
 80029da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029dc:	4413      	add	r3, r2
 80029de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80029e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d112      	bne.n	8002a10 <HAL_PCD_EP_DB_Transmit+0x6a6>
 80029ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029f8:	801a      	strh	r2, [r3, #0]
 80029fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a0c:	801a      	strh	r2, [r3, #0]
 8002a0e:	e044      	b.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x730>
 8002a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a12:	2b3e      	cmp	r3, #62	; 0x3e
 8002a14:	d811      	bhi.n	8002a3a <HAL_PCD_EP_DB_Transmit+0x6d0>
 8002a16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a18:	085b      	lsrs	r3, r3, #1
 8002a1a:	677b      	str	r3, [r7, #116]	; 0x74
 8002a1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_PCD_EP_DB_Transmit+0x6c2>
 8002a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a28:	3301      	adds	r3, #1
 8002a2a:	677b      	str	r3, [r7, #116]	; 0x74
 8002a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	029b      	lsls	r3, r3, #10
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a36:	801a      	strh	r2, [r3, #0]
 8002a38:	e02f      	b.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x730>
 8002a3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	677b      	str	r3, [r7, #116]	; 0x74
 8002a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d102      	bne.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x6e6>
 8002a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	677b      	str	r3, [r7, #116]	; 0x74
 8002a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	029b      	lsls	r3, r3, #10
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a64:	801a      	strh	r2, [r3, #0]
 8002a66:	e018      	b.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x730>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	785b      	ldrb	r3, [r3, #1]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d114      	bne.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x730>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a7e:	4413      	add	r3, r2
 8002a80:	667b      	str	r3, [r7, #100]	; 0x64
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	011a      	lsls	r2, r3, #4
 8002a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a90:	663b      	str	r3, [r7, #96]	; 0x60
 8002a92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a98:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	6959      	ldr	r1, [r3, #20]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	895a      	ldrh	r2, [r3, #10]
 8002aa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f003 f96c 	bl	8005d86 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac8:	823b      	strh	r3, [r7, #16]
 8002aca:	8a3b      	ldrh	r3, [r7, #16]
 8002acc:	f083 0310 	eor.w	r3, r3, #16
 8002ad0:	823b      	strh	r3, [r7, #16]
 8002ad2:	8a3b      	ldrh	r3, [r7, #16]
 8002ad4:	f083 0320 	eor.w	r3, r3, #32
 8002ad8:	823b      	strh	r3, [r7, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	441a      	add	r2, r3
 8002ae8:	8a3b      	ldrh	r3, [r7, #16]
 8002aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3788      	adds	r7, #136	; 0x88
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	817b      	strh	r3, [r7, #10]
 8002b16:	4613      	mov	r3, r2
 8002b18:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b1a:	897b      	ldrh	r3, [r7, #10]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b26:	897b      	ldrh	r3, [r7, #10]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4413      	add	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	e009      	b.n	8002b52 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b3e:	897a      	ldrh	r2, [r7, #10]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b52:	893b      	ldrh	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d107      	bne.n	8002b68 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	80da      	strh	r2, [r3, #6]
 8002b66:	e00b      	b.n	8002b80 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e26c      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8087 	beq.w	8002cba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bac:	4b92      	ldr	r3, [pc, #584]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d00c      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb8:	4b8f      	ldr	r3, [pc, #572]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d112      	bne.n	8002bea <HAL_RCC_OscConfig+0x5e>
 8002bc4:	4b8c      	ldr	r3, [pc, #560]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd0:	d10b      	bne.n	8002bea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd2:	4b89      	ldr	r3, [pc, #548]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d06c      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x12c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d168      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e246      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x76>
 8002bf4:	4b80      	ldr	r3, [pc, #512]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a7f      	ldr	r2, [pc, #508]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	e02e      	b.n	8002c60 <HAL_RCC_OscConfig+0xd4>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x98>
 8002c0a:	4b7b      	ldr	r3, [pc, #492]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a7a      	ldr	r2, [pc, #488]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b78      	ldr	r3, [pc, #480]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a77      	ldr	r2, [pc, #476]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e01d      	b.n	8002c60 <HAL_RCC_OscConfig+0xd4>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0xbc>
 8002c2e:	4b72      	ldr	r3, [pc, #456]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a71      	ldr	r2, [pc, #452]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b6f      	ldr	r3, [pc, #444]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a6e      	ldr	r2, [pc, #440]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0xd4>
 8002c48:	4b6b      	ldr	r3, [pc, #428]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a6a      	ldr	r2, [pc, #424]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b68      	ldr	r3, [pc, #416]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a67      	ldr	r2, [pc, #412]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe f822 	bl	8000cb0 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fe f81e 	bl	8000cb0 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e1fa      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b5d      	ldr	r3, [pc, #372]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0xe4>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe f80e 	bl	8000cb0 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fe f80a 	bl	8000cb0 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e1e6      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	4b53      	ldr	r3, [pc, #332]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x10c>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d063      	beq.n	8002d8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc6:	4b4c      	ldr	r3, [pc, #304]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cd2:	4b49      	ldr	r3, [pc, #292]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d11c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x18c>
 8002cde:	4b46      	ldr	r3, [pc, #280]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d116      	bne.n	8002d18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	4b43      	ldr	r3, [pc, #268]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x176>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e1ba      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b3d      	ldr	r3, [pc, #244]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4939      	ldr	r1, [pc, #228]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	e03a      	b.n	8002d8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d20:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fd ffc3 	bl	8000cb0 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fd ffbf 	bl	8000cb0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e19b      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4927      	ldr	r1, [pc, #156]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
 8002d60:	e015      	b.n	8002d8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fd ffa2 	bl	8000cb0 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d70:	f7fd ff9e 	bl	8000cb0 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e17a      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d03a      	beq.n	8002e10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d019      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <HAL_RCC_OscConfig+0x274>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da8:	f7fd ff82 	bl	8000cb0 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db0:	f7fd ff7e 	bl	8000cb0 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e15a      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f000 faa8 	bl	8003324 <RCC_Delay>
 8002dd4:	e01c      	b.n	8002e10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ddc:	f7fd ff68 	bl	8000cb0 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de2:	e00f      	b.n	8002e04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de4:	f7fd ff64 	bl	8000cb0 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d908      	bls.n	8002e04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e140      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	42420000 	.word	0x42420000
 8002e00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e04:	4b9e      	ldr	r3, [pc, #632]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e9      	bne.n	8002de4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80a6 	beq.w	8002f6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e22:	4b97      	ldr	r3, [pc, #604]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10d      	bne.n	8002e4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	4b94      	ldr	r3, [pc, #592]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	4a93      	ldr	r2, [pc, #588]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	61d3      	str	r3, [r2, #28]
 8002e3a:	4b91      	ldr	r3, [pc, #580]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e46:	2301      	movs	r3, #1
 8002e48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4a:	4b8e      	ldr	r3, [pc, #568]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d118      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e56:	4b8b      	ldr	r3, [pc, #556]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a8a      	ldr	r2, [pc, #552]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e62:	f7fd ff25 	bl	8000cb0 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6a:	f7fd ff21 	bl	8000cb0 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b64      	cmp	r3, #100	; 0x64
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e0fd      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x312>
 8002e90:	4b7b      	ldr	r3, [pc, #492]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	4a7a      	ldr	r2, [pc, #488]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6213      	str	r3, [r2, #32]
 8002e9c:	e02d      	b.n	8002efa <HAL_RCC_OscConfig+0x36e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x334>
 8002ea6:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4a75      	ldr	r2, [pc, #468]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	6213      	str	r3, [r2, #32]
 8002eb2:	4b73      	ldr	r3, [pc, #460]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a72      	ldr	r2, [pc, #456]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	f023 0304 	bic.w	r3, r3, #4
 8002ebc:	6213      	str	r3, [r2, #32]
 8002ebe:	e01c      	b.n	8002efa <HAL_RCC_OscConfig+0x36e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d10c      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x356>
 8002ec8:	4b6d      	ldr	r3, [pc, #436]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4a6c      	ldr	r2, [pc, #432]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	6213      	str	r3, [r2, #32]
 8002ed4:	4b6a      	ldr	r3, [pc, #424]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4a69      	ldr	r2, [pc, #420]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6213      	str	r3, [r2, #32]
 8002ee0:	e00b      	b.n	8002efa <HAL_RCC_OscConfig+0x36e>
 8002ee2:	4b67      	ldr	r3, [pc, #412]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4a66      	ldr	r2, [pc, #408]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	6213      	str	r3, [r2, #32]
 8002eee:	4b64      	ldr	r3, [pc, #400]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a63      	ldr	r2, [pc, #396]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	f023 0304 	bic.w	r3, r3, #4
 8002ef8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d015      	beq.n	8002f2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f02:	f7fd fed5 	bl	8000cb0 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fd fed1 	bl	8000cb0 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0ab      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	4b57      	ldr	r3, [pc, #348]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ee      	beq.n	8002f0a <HAL_RCC_OscConfig+0x37e>
 8002f2c:	e014      	b.n	8002f58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fd febf 	bl	8000cb0 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fd febb 	bl	8000cb0 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e095      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4c:	4b4c      	ldr	r3, [pc, #304]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ee      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d105      	bne.n	8002f6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4b48      	ldr	r3, [pc, #288]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4a47      	ldr	r2, [pc, #284]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8081 	beq.w	8003076 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f74:	4b42      	ldr	r3, [pc, #264]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d061      	beq.n	8003044 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d146      	bne.n	8003016 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f88:	4b3f      	ldr	r3, [pc, #252]	; (8003088 <HAL_RCC_OscConfig+0x4fc>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fd fe8f 	bl	8000cb0 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fd fe8b 	bl	8000cb0 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e067      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa8:	4b35      	ldr	r3, [pc, #212]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d108      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fbe:	4b30      	ldr	r3, [pc, #192]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	492d      	ldr	r1, [pc, #180]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a19      	ldr	r1, [r3, #32]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	4927      	ldr	r1, [pc, #156]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_RCC_OscConfig+0x4fc>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fd fe5f 	bl	8000cb0 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fd fe5b 	bl	8000cb0 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e037      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x46a>
 8003014:	e02f      	b.n	8003076 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_RCC_OscConfig+0x4fc>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fd fe48 	bl	8000cb0 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fd fe44 	bl	8000cb0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e020      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x498>
 8003042:	e018      	b.n	8003076 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e013      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	429a      	cmp	r2, r3
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	40007000 	.word	0x40007000
 8003088:	42420060 	.word	0x42420060

0800308c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0d0      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a0:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d910      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b67      	ldr	r3, [pc, #412]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 0207 	bic.w	r2, r3, #7
 80030b6:	4965      	ldr	r1, [pc, #404]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b63      	ldr	r3, [pc, #396]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0b8      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d020      	beq.n	800311e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e8:	4b59      	ldr	r3, [pc, #356]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4a58      	ldr	r2, [pc, #352]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003100:	4b53      	ldr	r3, [pc, #332]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a52      	ldr	r2, [pc, #328]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800310a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b50      	ldr	r3, [pc, #320]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	494d      	ldr	r1, [pc, #308]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d040      	beq.n	80031ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b47      	ldr	r3, [pc, #284]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d115      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e073      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e06b      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316a:	4b39      	ldr	r3, [pc, #228]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4936      	ldr	r1, [pc, #216]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800317c:	f7fd fd98 	bl	8000cb0 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7fd fd94 	bl	8000cb0 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e053      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 020c 	and.w	r2, r3, #12
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1eb      	bne.n	8003184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d210      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 0207 	bic.w	r2, r3, #7
 80031c2:	4922      	ldr	r1, [pc, #136]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b20      	ldr	r3, [pc, #128]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e032      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4916      	ldr	r1, [pc, #88]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	490e      	ldr	r1, [pc, #56]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800321a:	f000 f821 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 800321e:	4601      	mov	r1, r0
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <HAL_RCC_ClockConfig+0x1c8>)
 800322c:	5cd3      	ldrb	r3, [r2, r3]
 800322e:	fa21 f303 	lsr.w	r3, r1, r3
 8003232:	4a09      	ldr	r2, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1cc>)
 8003234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCC_ClockConfig+0x1d0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd fcf6 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40022000 	.word	0x40022000
 8003250:	40021000 	.word	0x40021000
 8003254:	08008038 	.word	0x08008038
 8003258:	20000000 	.word	0x20000000
 800325c:	20000004 	.word	0x20000004

08003260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003260:	b490      	push	{r4, r7}
 8003262:	b08a      	sub	sp, #40	; 0x28
 8003264:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003266:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003268:	1d3c      	adds	r4, r7, #4
 800326a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800326c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003270:	4b28      	ldr	r3, [pc, #160]	; (8003314 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	2300      	movs	r3, #0
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800328a:	4b23      	ldr	r3, [pc, #140]	; (8003318 <HAL_RCC_GetSysClockFreq+0xb8>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b04      	cmp	r3, #4
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x40>
 800329a:	2b08      	cmp	r3, #8
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x46>
 800329e:	e02d      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032a0:	4b1e      	ldr	r3, [pc, #120]	; (800331c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032a2:	623b      	str	r3, [r7, #32]
      break;
 80032a4:	e02d      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	0c9b      	lsrs	r3, r3, #18
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032b2:	4413      	add	r3, r2
 80032b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032c4:	4b14      	ldr	r3, [pc, #80]	; (8003318 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	0c5b      	lsrs	r3, r3, #17
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032d2:	4413      	add	r3, r2
 80032d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	4a0f      	ldr	r2, [pc, #60]	; (800331c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032de:	fb02 f203 	mul.w	r2, r2, r3
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ea:	e004      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032f0:	fb02 f303 	mul.w	r3, r2, r3
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	623b      	str	r3, [r7, #32]
      break;
 80032fa:	e002      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032fc:	4b07      	ldr	r3, [pc, #28]	; (800331c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032fe:	623b      	str	r3, [r7, #32]
      break;
 8003300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003302:	6a3b      	ldr	r3, [r7, #32]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3728      	adds	r7, #40	; 0x28
 8003308:	46bd      	mov	sp, r7
 800330a:	bc90      	pop	{r4, r7}
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	08007fdc 	.word	0x08007fdc
 8003314:	08007fec 	.word	0x08007fec
 8003318:	40021000 	.word	0x40021000
 800331c:	007a1200 	.word	0x007a1200
 8003320:	003d0900 	.word	0x003d0900

08003324 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800332c:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <RCC_Delay+0x34>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a0a      	ldr	r2, [pc, #40]	; (800335c <RCC_Delay+0x38>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	0a5b      	lsrs	r3, r3, #9
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003340:	bf00      	nop
  }
  while (Delay --);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1e5a      	subs	r2, r3, #1
 8003346:	60fa      	str	r2, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f9      	bne.n	8003340 <RCC_Delay+0x1c>
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	20000000 	.word	0x20000000
 800335c:	10624dd3 	.word	0x10624dd3

08003360 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d07d      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800337c:	2300      	movs	r3, #0
 800337e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003380:	4b4f      	ldr	r3, [pc, #316]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10d      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338c:	4b4c      	ldr	r3, [pc, #304]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	4a4b      	ldr	r2, [pc, #300]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003396:	61d3      	str	r3, [r2, #28]
 8003398:	4b49      	ldr	r3, [pc, #292]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a4:	2301      	movs	r3, #1
 80033a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	4b46      	ldr	r3, [pc, #280]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d118      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b4:	4b43      	ldr	r3, [pc, #268]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a42      	ldr	r2, [pc, #264]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c0:	f7fd fc76 	bl	8000cb0 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c6:	e008      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c8:	f7fd fc72 	bl	8000cb0 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e06d      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b3a      	ldr	r3, [pc, #232]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033e6:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d02e      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	429a      	cmp	r2, r3
 8003402:	d027      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003404:	4b2e      	ldr	r3, [pc, #184]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800340e:	4b2e      	ldr	r3, [pc, #184]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003414:	4b2c      	ldr	r3, [pc, #176]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800341a:	4a29      	ldr	r2, [pc, #164]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d014      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342a:	f7fd fc41 	bl	8000cb0 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	e00a      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7fd fc3d 	bl	8000cb0 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e036      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ee      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003454:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4917      	ldr	r1, [pc, #92]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003462:	4313      	orrs	r3, r2
 8003464:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003466:	7dfb      	ldrb	r3, [r7, #23]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d105      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346c:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003476:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003484:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	490b      	ldr	r1, [pc, #44]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034a2:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	4904      	ldr	r1, [pc, #16]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40007000 	.word	0x40007000
 80034c8:	42420440 	.word	0x42420440

080034cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e076      	b.n	80035cc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d108      	bne.n	80034f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ee:	d009      	beq.n	8003504 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	61da      	str	r2, [r3, #28]
 80034f6:	e005      	b.n	8003504 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd fac6 	bl	8000ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800353a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003588:	ea42 0103 	orr.w	r1, r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	0c1a      	lsrs	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f002 0204 	and.w	r2, r2, #4
 80035aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_SPI_Transmit+0x22>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e126      	b.n	8003844 <HAL_SPI_Transmit+0x270>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035fe:	f7fd fb57 	bl	8000cb0 <HAL_GetTick>
 8003602:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d002      	beq.n	800361a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003614:	2302      	movs	r3, #2
 8003616:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003618:	e10b      	b.n	8003832 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_SPI_Transmit+0x52>
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	77fb      	strb	r3, [r7, #31]
    goto error;
 800362a:	e102      	b.n	8003832 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2203      	movs	r2, #3
 8003630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	88fa      	ldrh	r2, [r7, #6]
 8003644:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	88fa      	ldrh	r2, [r7, #6]
 800364a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003672:	d10f      	bne.n	8003694 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003682:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003692:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369e:	2b40      	cmp	r3, #64	; 0x40
 80036a0:	d007      	beq.n	80036b2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ba:	d14b      	bne.n	8003754 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <HAL_SPI_Transmit+0xf6>
 80036c4:	8afb      	ldrh	r3, [r7, #22]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d13e      	bne.n	8003748 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	881a      	ldrh	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	1c9a      	adds	r2, r3, #2
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036ee:	e02b      	b.n	8003748 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d112      	bne.n	8003724 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	881a      	ldrh	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	1c9a      	adds	r2, r3, #2
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	86da      	strh	r2, [r3, #54]	; 0x36
 8003722:	e011      	b.n	8003748 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003724:	f7fd fac4 	bl	8000cb0 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d803      	bhi.n	800373c <HAL_SPI_Transmit+0x168>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d102      	bne.n	8003742 <HAL_SPI_Transmit+0x16e>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003746:	e074      	b.n	8003832 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1ce      	bne.n	80036f0 <HAL_SPI_Transmit+0x11c>
 8003752:	e04c      	b.n	80037ee <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_SPI_Transmit+0x18e>
 800375c:	8afb      	ldrh	r3, [r7, #22]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d140      	bne.n	80037e4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	330c      	adds	r3, #12
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003788:	e02c      	b.n	80037e4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b02      	cmp	r3, #2
 8003796:	d113      	bne.n	80037c0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	330c      	adds	r3, #12
 80037a2:	7812      	ldrb	r2, [r2, #0]
 80037a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80037be:	e011      	b.n	80037e4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037c0:	f7fd fa76 	bl	8000cb0 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d803      	bhi.n	80037d8 <HAL_SPI_Transmit+0x204>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d6:	d102      	bne.n	80037de <HAL_SPI_Transmit+0x20a>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d102      	bne.n	80037e4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037e2:	e026      	b.n	8003832 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1cd      	bne.n	800378a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	6839      	ldr	r1, [r7, #0]
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f8b2 	bl	800395c <SPI_EndRxTxTransaction>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800380c:	2300      	movs	r3, #0
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e000      	b.n	8003832 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003830:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003842:	7ffb      	ldrb	r3, [r7, #31]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3720      	adds	r7, #32
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	4613      	mov	r3, r2
 800385a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800385c:	f7fd fa28 	bl	8000cb0 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	1a9b      	subs	r3, r3, r2
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	4413      	add	r3, r2
 800386a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800386c:	f7fd fa20 	bl	8000cb0 <HAL_GetTick>
 8003870:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003872:	4b39      	ldr	r3, [pc, #228]	; (8003958 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	015b      	lsls	r3, r3, #5
 8003878:	0d1b      	lsrs	r3, r3, #20
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	fb02 f303 	mul.w	r3, r2, r3
 8003880:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003882:	e054      	b.n	800392e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388a:	d050      	beq.n	800392e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800388c:	f7fd fa10 	bl	8000cb0 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	429a      	cmp	r2, r3
 800389a:	d902      	bls.n	80038a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d13d      	bne.n	800391e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ba:	d111      	bne.n	80038e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c4:	d004      	beq.n	80038d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ce:	d107      	bne.n	80038e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e8:	d10f      	bne.n	800390a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003908:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e017      	b.n	800394e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3b01      	subs	r3, #1
 800392c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4013      	ands	r3, r2
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	429a      	cmp	r2, r3
 800393c:	bf0c      	ite	eq
 800393e:	2301      	moveq	r3, #1
 8003940:	2300      	movne	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	429a      	cmp	r2, r3
 800394a:	d19b      	bne.n	8003884 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000000 	.word	0x20000000

0800395c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2200      	movs	r2, #0
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f7ff ff6a 	bl	800384c <SPI_WaitFlagStateUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	f043 0220 	orr.w	r2, r3, #32
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e000      	b.n	8003990 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003998:	b084      	sub	sp, #16
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	f107 0014 	add.w	r0, r7, #20
 80039a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	b004      	add	sp, #16
 80039b6:	4770      	bx	lr

080039b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039c8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80039cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80039f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	4013      	ands	r3, r2
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr

08003a18 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr

08003a30 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a30:	b084      	sub	sp, #16
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	f107 0014 	add.w	r0, r7, #20
 8003a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	b004      	add	sp, #16
 8003a6e:	4770      	bx	lr

08003a70 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b09b      	sub	sp, #108	; 0x6c
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a96:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	78db      	ldrb	r3, [r3, #3]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d81f      	bhi.n	8003ae2 <USB_ActivateEndpoint+0x72>
 8003aa2:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <USB_ActivateEndpoint+0x38>)
 8003aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003ad5 	.word	0x08003ad5
 8003ab0:	08003aeb 	.word	0x08003aeb
 8003ab4:	08003ac7 	.word	0x08003ac7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003ab8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003abc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ac0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003ac4:	e012      	b.n	8003aec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003ac6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003aca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003ace:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003ad2:	e00b      	b.n	8003aec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003ad4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003ad8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003adc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003ae0:	e004      	b.n	8003aec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003ae8:	e000      	b.n	8003aec <USB_ActivateEndpoint+0x7c>
      break;
 8003aea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	441a      	add	r2, r3
 8003af6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	441a      	add	r2, r3
 8003b3c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	7b1b      	ldrb	r3, [r3, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f040 8149 	bne.w	8003df0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	785b      	ldrb	r3, [r3, #1]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 8084 	beq.w	8003c70 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	461a      	mov	r2, r3
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	4413      	add	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	011a      	lsls	r2, r3, #4
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	88db      	ldrh	r3, [r3, #6]
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	81fb      	strh	r3, [r7, #14]
 8003baa:	89fb      	ldrh	r3, [r7, #14]
 8003bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01b      	beq.n	8003bec <USB_ActivateEndpoint+0x17c>
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	81bb      	strh	r3, [r7, #12]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	441a      	add	r2, r3
 8003bd6:	89bb      	ldrh	r3, [r7, #12]
 8003bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	78db      	ldrb	r3, [r3, #3]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d020      	beq.n	8003c36 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c0a:	813b      	strh	r3, [r7, #8]
 8003c0c:	893b      	ldrh	r3, [r7, #8]
 8003c0e:	f083 0320 	eor.w	r3, r3, #32
 8003c12:	813b      	strh	r3, [r7, #8]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	441a      	add	r2, r3
 8003c1e:	893b      	ldrh	r3, [r7, #8]
 8003c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	8013      	strh	r3, [r2, #0]
 8003c34:	e27f      	b.n	8004136 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c4c:	817b      	strh	r3, [r7, #10]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	441a      	add	r2, r3
 8003c58:	897b      	ldrh	r3, [r7, #10]
 8003c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	8013      	strh	r3, [r2, #0]
 8003c6e:	e262      	b.n	8004136 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	4413      	add	r3, r2
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	011a      	lsls	r2, r3, #4
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	88db      	ldrh	r3, [r3, #6]
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	4413      	add	r3, r2
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	011a      	lsls	r2, r3, #4
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d112      	bne.n	8003cf6 <USB_ActivateEndpoint+0x286>
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	801a      	strh	r2, [r3, #0]
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	801a      	strh	r2, [r3, #0]
 8003cf4:	e02f      	b.n	8003d56 <USB_ActivateEndpoint+0x2e6>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b3e      	cmp	r3, #62	; 0x3e
 8003cfc:	d813      	bhi.n	8003d26 <USB_ActivateEndpoint+0x2b6>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	663b      	str	r3, [r7, #96]	; 0x60
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <USB_ActivateEndpoint+0x2a8>
 8003d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d14:	3301      	adds	r3, #1
 8003d16:	663b      	str	r3, [r7, #96]	; 0x60
 8003d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	029b      	lsls	r3, r3, #10
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	801a      	strh	r2, [r3, #0]
 8003d24:	e017      	b.n	8003d56 <USB_ActivateEndpoint+0x2e6>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <USB_ActivateEndpoint+0x2d0>
 8003d3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	029b      	lsls	r3, r3, #10
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	83fb      	strh	r3, [r7, #30]
 8003d64:	8bfb      	ldrh	r3, [r7, #30]
 8003d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01b      	beq.n	8003da6 <USB_ActivateEndpoint+0x336>
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d84:	83bb      	strh	r3, [r7, #28]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	441a      	add	r2, r3
 8003d90:	8bbb      	ldrh	r3, [r7, #28]
 8003d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbc:	837b      	strh	r3, [r7, #26]
 8003dbe:	8b7b      	ldrh	r3, [r7, #26]
 8003dc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003dc4:	837b      	strh	r3, [r7, #26]
 8003dc6:	8b7b      	ldrh	r3, [r7, #26]
 8003dc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003dcc:	837b      	strh	r3, [r7, #26]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	441a      	add	r2, r3
 8003dd8:	8b7b      	ldrh	r3, [r7, #26]
 8003dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	8013      	strh	r3, [r2, #0]
 8003dee:	e1a2      	b.n	8004136 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	441a      	add	r2, r3
 8003e14:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e20:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e3c:	4413      	add	r3, r2
 8003e3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	011a      	lsls	r2, r3, #4
 8003e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e4e:	657b      	str	r3, [r7, #84]	; 0x54
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	891b      	ldrh	r3, [r3, #8]
 8003e54:	085b      	lsrs	r3, r3, #1
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e5e:	801a      	strh	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	653b      	str	r3, [r7, #80]	; 0x50
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e70:	4413      	add	r3, r2
 8003e72:	653b      	str	r3, [r7, #80]	; 0x50
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	011a      	lsls	r2, r3, #4
 8003e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	895b      	ldrh	r3, [r3, #10]
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e92:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	785b      	ldrb	r3, [r3, #1]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f040 8091 	bne.w	8003fc0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003eac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01b      	beq.n	8003eee <USB_ActivateEndpoint+0x47e>
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ecc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	441a      	add	r2, r3
 8003ed8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	873b      	strh	r3, [r7, #56]	; 0x38
 8003efc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01b      	beq.n	8003f3e <USB_ActivateEndpoint+0x4ce>
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	441a      	add	r2, r3
 8003f28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003f56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003f5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	441a      	add	r2, r3
 8003f70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f9c:	867b      	strh	r3, [r7, #50]	; 0x32
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	441a      	add	r2, r3
 8003fa8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	8013      	strh	r3, [r2, #0]
 8003fbe:	e0ba      	b.n	8004136 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003fd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01d      	beq.n	8004018 <USB_ActivateEndpoint+0x5a8>
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	441a      	add	r2, r3
 8004000:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800400c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004014:	b29b      	uxth	r3, r3
 8004016:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004028:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800402c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01d      	beq.n	8004070 <USB_ActivateEndpoint+0x600>
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	b29b      	uxth	r3, r3
 8004042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	441a      	add	r2, r3
 8004058:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800405c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004068:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800406c:	b29b      	uxth	r3, r3
 800406e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	78db      	ldrb	r3, [r3, #3]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d024      	beq.n	80040c2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b29b      	uxth	r3, r3
 8004086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800408a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004092:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004096:	f083 0320 	eor.w	r3, r3, #32
 800409a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	441a      	add	r2, r3
 80040a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80040ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040bc:	b29b      	uxth	r3, r3
 80040be:	8013      	strh	r3, [r2, #0]
 80040c0:	e01d      	b.n	80040fe <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80040ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004114:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	441a      	add	r2, r3
 8004120:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800412a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004132:	b29b      	uxth	r3, r3
 8004134:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004136:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800413a:	4618      	mov	r0, r3
 800413c:	376c      	adds	r7, #108	; 0x6c
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004144:	b480      	push	{r7}
 8004146:	b08d      	sub	sp, #52	; 0x34
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	7b1b      	ldrb	r3, [r3, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	f040 808e 	bne.w	8004274 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d044      	beq.n	80041ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	81bb      	strh	r3, [r7, #12]
 800416e:	89bb      	ldrh	r3, [r7, #12]
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01b      	beq.n	80041b0 <USB_DeactivateEndpoint+0x6c>
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	b29b      	uxth	r3, r3
 8004186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418e:	817b      	strh	r3, [r7, #10]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	441a      	add	r2, r3
 800419a:	897b      	ldrh	r3, [r7, #10]
 800419c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c6:	813b      	strh	r3, [r7, #8]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	441a      	add	r2, r3
 80041d2:	893b      	ldrh	r3, [r7, #8]
 80041d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	8013      	strh	r3, [r2, #0]
 80041e8:	e192      	b.n	8004510 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	827b      	strh	r3, [r7, #18]
 80041f8:	8a7b      	ldrh	r3, [r7, #18]
 80041fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d01b      	beq.n	800423a <USB_DeactivateEndpoint+0xf6>
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004218:	823b      	strh	r3, [r7, #16]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	441a      	add	r2, r3
 8004224:	8a3b      	ldrh	r3, [r7, #16]
 8004226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800422a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004236:	b29b      	uxth	r3, r3
 8004238:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	b29b      	uxth	r3, r3
 8004248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800424c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004250:	81fb      	strh	r3, [r7, #14]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	441a      	add	r2, r3
 800425c:	89fb      	ldrh	r3, [r7, #14]
 800425e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800426a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426e:	b29b      	uxth	r3, r3
 8004270:	8013      	strh	r3, [r2, #0]
 8004272:	e14d      	b.n	8004510 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	785b      	ldrb	r3, [r3, #1]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f040 80a5 	bne.w	80043c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	843b      	strh	r3, [r7, #32]
 800428c:	8c3b      	ldrh	r3, [r7, #32]
 800428e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d01b      	beq.n	80042ce <USB_DeactivateEndpoint+0x18a>
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ac:	83fb      	strh	r3, [r7, #30]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	441a      	add	r2, r3
 80042b8:	8bfb      	ldrh	r3, [r7, #30]
 80042ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	83bb      	strh	r3, [r7, #28]
 80042dc:	8bbb      	ldrh	r3, [r7, #28]
 80042de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01b      	beq.n	800431e <USB_DeactivateEndpoint+0x1da>
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fc:	837b      	strh	r3, [r7, #26]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	441a      	add	r2, r3
 8004308:	8b7b      	ldrh	r3, [r7, #26]
 800430a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800430e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004316:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800431a:	b29b      	uxth	r3, r3
 800431c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004334:	833b      	strh	r3, [r7, #24]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	441a      	add	r2, r3
 8004340:	8b3b      	ldrh	r3, [r7, #24]
 8004342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800434a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004352:	b29b      	uxth	r3, r3
 8004354:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	b29b      	uxth	r3, r3
 8004364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436c:	82fb      	strh	r3, [r7, #22]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	441a      	add	r2, r3
 8004378:	8afb      	ldrh	r3, [r7, #22]
 800437a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800437e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438a:	b29b      	uxth	r3, r3
 800438c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b29b      	uxth	r3, r3
 800439c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a4:	82bb      	strh	r3, [r7, #20]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	441a      	add	r2, r3
 80043b0:	8abb      	ldrh	r3, [r7, #20]
 80043b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	8013      	strh	r3, [r2, #0]
 80043c6:	e0a3      	b.n	8004510 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80043d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80043d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01b      	beq.n	8004418 <USB_DeactivateEndpoint+0x2d4>
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	441a      	add	r2, r3
 8004402:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800440c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004414:	b29b      	uxth	r3, r3
 8004416:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004426:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01b      	beq.n	8004468 <USB_DeactivateEndpoint+0x324>
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b29b      	uxth	r3, r3
 800443e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004446:	853b      	strh	r3, [r7, #40]	; 0x28
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	441a      	add	r2, r3
 8004452:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800445c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004460:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004464:	b29b      	uxth	r3, r3
 8004466:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	b29b      	uxth	r3, r3
 8004476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800447a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	441a      	add	r2, r3
 800448a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800448c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449c:	b29b      	uxth	r3, r3
 800449e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	441a      	add	r2, r3
 80044c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	441a      	add	r2, r3
 80044fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450c:	b29b      	uxth	r3, r3
 800450e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3734      	adds	r7, #52	; 0x34
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b0cc      	sub	sp, #304	; 0x130
 8004520:	af00      	add	r7, sp, #0
 8004522:	1d3b      	adds	r3, r7, #4
 8004524:	6018      	str	r0, [r3, #0]
 8004526:	463b      	mov	r3, r7
 8004528:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800452a:	463b      	mov	r3, r7
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	785b      	ldrb	r3, [r3, #1]
 8004530:	2b01      	cmp	r3, #1
 8004532:	f040 872e 	bne.w	8005392 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004536:	463b      	mov	r3, r7
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699a      	ldr	r2, [r3, #24]
 800453c:	463b      	mov	r3, r7
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	429a      	cmp	r2, r3
 8004544:	d905      	bls.n	8004552 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004546:	463b      	mov	r3, r7
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004550:	e004      	b.n	800455c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004552:	463b      	mov	r3, r7
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800455c:	463b      	mov	r3, r7
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	7b1b      	ldrb	r3, [r3, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d134      	bne.n	80045d0 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004566:	463b      	mov	r3, r7
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6959      	ldr	r1, [r3, #20]
 800456c:	463b      	mov	r3, r7
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	88da      	ldrh	r2, [r3, #6]
 8004572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004576:	b29b      	uxth	r3, r3
 8004578:	1d38      	adds	r0, r7, #4
 800457a:	6800      	ldr	r0, [r0, #0]
 800457c:	f001 fc03 	bl	8005d86 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004580:	f107 0310 	add.w	r3, r7, #16
 8004584:	1d3a      	adds	r2, r7, #4
 8004586:	6812      	ldr	r2, [r2, #0]
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	1d3b      	adds	r3, r7, #4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	4619      	mov	r1, r3
 8004596:	f107 0310 	add.w	r3, r7, #16
 800459a:	f107 0210 	add.w	r2, r7, #16
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	440a      	add	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	463b      	mov	r3, r7
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	011a      	lsls	r2, r3, #4
 80045ac:	f107 0310 	add.w	r3, r7, #16
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4413      	add	r3, r2
 80045b4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80045b8:	f107 030c 	add.w	r3, r7, #12
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	f107 030c 	add.w	r3, r7, #12
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	f000 beac 	b.w	8005328 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80045d0:	463b      	mov	r3, r7
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	78db      	ldrb	r3, [r3, #3]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	f040 838c 	bne.w	8004cf4 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80045dc:	463b      	mov	r3, r7
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6a1a      	ldr	r2, [r3, #32]
 80045e2:	463b      	mov	r3, r7
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	f240 8330 	bls.w	8004c4e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80045ee:	1d3b      	adds	r3, r7, #4
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	463b      	mov	r3, r7
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004608:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	463b      	mov	r3, r7
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	441a      	add	r2, r3
 800461a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800461e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004626:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800462a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800462e:	b29b      	uxth	r3, r3
 8004630:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004632:	463b      	mov	r3, r7
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a1a      	ldr	r2, [r3, #32]
 8004638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800463c:	1ad2      	subs	r2, r2, r3
 800463e:	463b      	mov	r3, r7
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004644:	1d3b      	adds	r3, r7, #4
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	463b      	mov	r3, r7
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 819e 	beq.w	800499c <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004660:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004664:	1d3a      	adds	r2, r7, #4
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	463b      	mov	r3, r7
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	785b      	ldrb	r3, [r3, #1]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d17a      	bne.n	800476a <USB_EPStartXfer+0x24e>
 8004674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004678:	1d3a      	adds	r2, r7, #4
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	1d3b      	adds	r3, r7, #4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004686:	b29b      	uxth	r3, r3
 8004688:	4619      	mov	r1, r3
 800468a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800468e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	440a      	add	r2, r1
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	463b      	mov	r3, r7
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	011a      	lsls	r2, r3, #4
 80046a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4413      	add	r3, r2
 80046a8:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80046ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d11a      	bne.n	80046f0 <USB_EPStartXfer+0x1d4>
 80046ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	801a      	strh	r2, [r3, #0]
 80046d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	801a      	strh	r2, [r3, #0]
 80046ee:	e062      	b.n	80047b6 <USB_EPStartXfer+0x29a>
 80046f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046f4:	2b3e      	cmp	r3, #62	; 0x3e
 80046f6:	d819      	bhi.n	800472c <USB_EPStartXfer+0x210>
 80046f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d004      	beq.n	8004718 <USB_EPStartXfer+0x1fc>
 800470e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004712:	3301      	adds	r3, #1
 8004714:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004718:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800471c:	b29b      	uxth	r3, r3
 800471e:	029b      	lsls	r3, r3, #10
 8004720:	b29a      	uxth	r2, r3
 8004722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	801a      	strh	r2, [r3, #0]
 800472a:	e044      	b.n	80047b6 <USB_EPStartXfer+0x29a>
 800472c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	2b00      	cmp	r3, #0
 8004740:	d104      	bne.n	800474c <USB_EPStartXfer+0x230>
 8004742:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004746:	3b01      	subs	r3, #1
 8004748:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800474c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004750:	b29b      	uxth	r3, r3
 8004752:	029b      	lsls	r3, r3, #10
 8004754:	b29b      	uxth	r3, r3
 8004756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800475a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800475e:	b29a      	uxth	r2, r3
 8004760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	801a      	strh	r2, [r3, #0]
 8004768:	e025      	b.n	80047b6 <USB_EPStartXfer+0x29a>
 800476a:	463b      	mov	r3, r7
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	785b      	ldrb	r3, [r3, #1]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d120      	bne.n	80047b6 <USB_EPStartXfer+0x29a>
 8004774:	1d3b      	adds	r3, r7, #4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477c:	b29b      	uxth	r3, r3
 800477e:	4619      	mov	r1, r3
 8004780:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004784:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	440a      	add	r2, r1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	463b      	mov	r3, r7
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	011a      	lsls	r2, r3, #4
 8004796:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4413      	add	r3, r2
 800479e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80047a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80047b6:	463b      	mov	r3, r7
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	895b      	ldrh	r3, [r3, #10]
 80047bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047c0:	463b      	mov	r3, r7
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6959      	ldr	r1, [r3, #20]
 80047c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80047d0:	1d38      	adds	r0, r7, #4
 80047d2:	6800      	ldr	r0, [r0, #0]
 80047d4:	f001 fad7 	bl	8005d86 <USB_WritePMA>
            ep->xfer_buff += len;
 80047d8:	463b      	mov	r3, r7
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047e2:	441a      	add	r2, r3
 80047e4:	463b      	mov	r3, r7
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80047ea:	463b      	mov	r3, r7
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6a1a      	ldr	r2, [r3, #32]
 80047f0:	463b      	mov	r3, r7
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d909      	bls.n	800480e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80047fa:	463b      	mov	r3, r7
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6a1a      	ldr	r2, [r3, #32]
 8004800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004804:	1ad2      	subs	r2, r2, r3
 8004806:	463b      	mov	r3, r7
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	621a      	str	r2, [r3, #32]
 800480c:	e008      	b.n	8004820 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800480e:	463b      	mov	r3, r7
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004818:	463b      	mov	r3, r7
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2200      	movs	r2, #0
 800481e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004820:	463b      	mov	r3, r7
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	785b      	ldrb	r3, [r3, #1]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d17a      	bne.n	8004920 <USB_EPStartXfer+0x404>
 800482a:	f107 0318 	add.w	r3, r7, #24
 800482e:	1d3a      	adds	r2, r7, #4
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	1d3b      	adds	r3, r7, #4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483c:	b29b      	uxth	r3, r3
 800483e:	4619      	mov	r1, r3
 8004840:	f107 0318 	add.w	r3, r7, #24
 8004844:	f107 0218 	add.w	r2, r7, #24
 8004848:	6812      	ldr	r2, [r2, #0]
 800484a:	440a      	add	r2, r1
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	463b      	mov	r3, r7
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	011a      	lsls	r2, r3, #4
 8004856:	f107 0318 	add.w	r3, r7, #24
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4413      	add	r3, r2
 800485e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004862:	f107 0314 	add.w	r3, r7, #20
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d11a      	bne.n	80048a6 <USB_EPStartXfer+0x38a>
 8004870:	f107 0314 	add.w	r3, r7, #20
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	b29b      	uxth	r3, r3
 800487a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800487e:	b29a      	uxth	r2, r3
 8004880:	f107 0314 	add.w	r3, r7, #20
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	801a      	strh	r2, [r3, #0]
 8004888:	f107 0314 	add.w	r3, r7, #20
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489a:	b29a      	uxth	r2, r3
 800489c:	f107 0314 	add.w	r3, r7, #20
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	801a      	strh	r2, [r3, #0]
 80048a4:	e067      	b.n	8004976 <USB_EPStartXfer+0x45a>
 80048a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048aa:	2b3e      	cmp	r3, #62	; 0x3e
 80048ac:	d819      	bhi.n	80048e2 <USB_EPStartXfer+0x3c6>
 80048ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d004      	beq.n	80048ce <USB_EPStartXfer+0x3b2>
 80048c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048c8:	3301      	adds	r3, #1
 80048ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	029b      	lsls	r3, r3, #10
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	f107 0314 	add.w	r3, r7, #20
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	e049      	b.n	8004976 <USB_EPStartXfer+0x45a>
 80048e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d104      	bne.n	8004902 <USB_EPStartXfer+0x3e6>
 80048f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048fc:	3b01      	subs	r3, #1
 80048fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004902:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004906:	b29b      	uxth	r3, r3
 8004908:	029b      	lsls	r3, r3, #10
 800490a:	b29b      	uxth	r3, r3
 800490c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004914:	b29a      	uxth	r2, r3
 8004916:	f107 0314 	add.w	r3, r7, #20
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	801a      	strh	r2, [r3, #0]
 800491e:	e02a      	b.n	8004976 <USB_EPStartXfer+0x45a>
 8004920:	463b      	mov	r3, r7
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	785b      	ldrb	r3, [r3, #1]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d125      	bne.n	8004976 <USB_EPStartXfer+0x45a>
 800492a:	f107 0320 	add.w	r3, r7, #32
 800492e:	1d3a      	adds	r2, r7, #4
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	1d3b      	adds	r3, r7, #4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493c:	b29b      	uxth	r3, r3
 800493e:	4619      	mov	r1, r3
 8004940:	f107 0320 	add.w	r3, r7, #32
 8004944:	f107 0220 	add.w	r2, r7, #32
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	440a      	add	r2, r1
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	463b      	mov	r3, r7
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	011a      	lsls	r2, r3, #4
 8004956:	f107 0320 	add.w	r3, r7, #32
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4413      	add	r3, r2
 800495e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004962:	f107 031c 	add.w	r3, r7, #28
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800496c:	b29a      	uxth	r2, r3
 800496e:	f107 031c 	add.w	r3, r7, #28
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004976:	463b      	mov	r3, r7
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	891b      	ldrh	r3, [r3, #8]
 800497c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004980:	463b      	mov	r3, r7
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6959      	ldr	r1, [r3, #20]
 8004986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800498a:	b29b      	uxth	r3, r3
 800498c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004990:	1d38      	adds	r0, r7, #4
 8004992:	6800      	ldr	r0, [r0, #0]
 8004994:	f001 f9f7 	bl	8005d86 <USB_WritePMA>
 8004998:	f000 bcc6 	b.w	8005328 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800499c:	463b      	mov	r3, r7
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	785b      	ldrb	r3, [r3, #1]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d164      	bne.n	8004a70 <USB_EPStartXfer+0x554>
 80049a6:	1d3b      	adds	r3, r7, #4
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ac:	1d3b      	adds	r3, r7, #4
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ba:	4413      	add	r3, r2
 80049bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80049be:	463b      	mov	r3, r7
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	011a      	lsls	r2, r3, #4
 80049c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c8:	4413      	add	r3, r2
 80049ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049ce:	647b      	str	r3, [r7, #68]	; 0x44
 80049d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d112      	bne.n	80049fe <USB_EPStartXfer+0x4e2>
 80049d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e6:	801a      	strh	r2, [r3, #0]
 80049e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fa:	801a      	strh	r2, [r3, #0]
 80049fc:	e057      	b.n	8004aae <USB_EPStartXfer+0x592>
 80049fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a02:	2b3e      	cmp	r3, #62	; 0x3e
 8004a04:	d817      	bhi.n	8004a36 <USB_EPStartXfer+0x51a>
 8004a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a0a:	085b      	lsrs	r3, r3, #1
 8004a0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d004      	beq.n	8004a26 <USB_EPStartXfer+0x50a>
 8004a1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a20:	3301      	adds	r3, #1
 8004a22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	029b      	lsls	r3, r3, #10
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a32:	801a      	strh	r2, [r3, #0]
 8004a34:	e03b      	b.n	8004aae <USB_EPStartXfer+0x592>
 8004a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <USB_EPStartXfer+0x53a>
 8004a4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a50:	3b01      	subs	r3, #1
 8004a52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	029b      	lsls	r3, r3, #10
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6c:	801a      	strh	r2, [r3, #0]
 8004a6e:	e01e      	b.n	8004aae <USB_EPStartXfer+0x592>
 8004a70:	463b      	mov	r3, r7
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	785b      	ldrb	r3, [r3, #1]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d119      	bne.n	8004aae <USB_EPStartXfer+0x592>
 8004a7a:	1d3b      	adds	r3, r7, #4
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a80:	1d3b      	adds	r3, r7, #4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a8e:	4413      	add	r3, r2
 8004a90:	653b      	str	r3, [r7, #80]	; 0x50
 8004a92:	463b      	mov	r3, r7
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	011a      	lsls	r2, r3, #4
 8004a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004aae:	463b      	mov	r3, r7
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	891b      	ldrh	r3, [r3, #8]
 8004ab4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ab8:	463b      	mov	r3, r7
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6959      	ldr	r1, [r3, #20]
 8004abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ac8:	1d38      	adds	r0, r7, #4
 8004aca:	6800      	ldr	r0, [r0, #0]
 8004acc:	f001 f95b 	bl	8005d86 <USB_WritePMA>
            ep->xfer_buff += len;
 8004ad0:	463b      	mov	r3, r7
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695a      	ldr	r2, [r3, #20]
 8004ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ada:	441a      	add	r2, r3
 8004adc:	463b      	mov	r3, r7
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ae2:	463b      	mov	r3, r7
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6a1a      	ldr	r2, [r3, #32]
 8004ae8:	463b      	mov	r3, r7
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d909      	bls.n	8004b06 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8004af2:	463b      	mov	r3, r7
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6a1a      	ldr	r2, [r3, #32]
 8004af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004afc:	1ad2      	subs	r2, r2, r3
 8004afe:	463b      	mov	r3, r7
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	621a      	str	r2, [r3, #32]
 8004b04:	e008      	b.n	8004b18 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b06:	463b      	mov	r3, r7
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004b10:	463b      	mov	r3, r7
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2200      	movs	r2, #0
 8004b16:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b18:	1d3b      	adds	r3, r7, #4
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b1e:	463b      	mov	r3, r7
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	785b      	ldrb	r3, [r3, #1]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d164      	bne.n	8004bf2 <USB_EPStartXfer+0x6d6>
 8004b28:	1d3b      	adds	r3, r7, #4
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b2e:	1d3b      	adds	r3, r7, #4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	461a      	mov	r2, r3
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3c:	4413      	add	r3, r2
 8004b3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b40:	463b      	mov	r3, r7
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	011a      	lsls	r2, r3, #4
 8004b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b50:	637b      	str	r3, [r7, #52]	; 0x34
 8004b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d112      	bne.n	8004b80 <USB_EPStartXfer+0x664>
 8004b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b68:	801a      	strh	r2, [r3, #0]
 8004b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7c:	801a      	strh	r2, [r3, #0]
 8004b7e:	e054      	b.n	8004c2a <USB_EPStartXfer+0x70e>
 8004b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b84:	2b3e      	cmp	r3, #62	; 0x3e
 8004b86:	d817      	bhi.n	8004bb8 <USB_EPStartXfer+0x69c>
 8004b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b8c:	085b      	lsrs	r3, r3, #1
 8004b8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <USB_EPStartXfer+0x68c>
 8004b9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004ba8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	029b      	lsls	r3, r3, #10
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb4:	801a      	strh	r2, [r3, #0]
 8004bb6:	e038      	b.n	8004c2a <USB_EPStartXfer+0x70e>
 8004bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bc6:	f003 031f 	and.w	r3, r3, #31
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d104      	bne.n	8004bd8 <USB_EPStartXfer+0x6bc>
 8004bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004bd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	029b      	lsls	r3, r3, #10
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bee:	801a      	strh	r2, [r3, #0]
 8004bf0:	e01b      	b.n	8004c2a <USB_EPStartXfer+0x70e>
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	785b      	ldrb	r3, [r3, #1]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d116      	bne.n	8004c2a <USB_EPStartXfer+0x70e>
 8004bfc:	1d3b      	adds	r3, r7, #4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	461a      	mov	r2, r3
 8004c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0a:	4413      	add	r3, r2
 8004c0c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c0e:	463b      	mov	r3, r7
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	011a      	lsls	r2, r3, #4
 8004c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c18:	4413      	add	r3, r2
 8004c1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004c2a:	463b      	mov	r3, r7
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	895b      	ldrh	r3, [r3, #10]
 8004c30:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c34:	463b      	mov	r3, r7
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6959      	ldr	r1, [r3, #20]
 8004c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c44:	1d38      	adds	r0, r7, #4
 8004c46:	6800      	ldr	r0, [r0, #0]
 8004c48:	f001 f89d 	bl	8005d86 <USB_WritePMA>
 8004c4c:	e36c      	b.n	8005328 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004c4e:	463b      	mov	r3, r7
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004c58:	1d3b      	adds	r3, r7, #4
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	463b      	mov	r3, r7
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c72:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004c76:	1d3b      	adds	r3, r7, #4
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	463b      	mov	r3, r7
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	441a      	add	r2, r3
 8004c84:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c9c:	1d3b      	adds	r3, r7, #4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca2:	1d3b      	adds	r3, r7, #4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cb0:	4413      	add	r3, r2
 8004cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cb4:	463b      	mov	r3, r7
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	011a      	lsls	r2, r3, #4
 8004cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004cd0:	463b      	mov	r3, r7
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	891b      	ldrh	r3, [r3, #8]
 8004cd6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cda:	463b      	mov	r3, r7
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6959      	ldr	r1, [r3, #20]
 8004ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004cea:	1d38      	adds	r0, r7, #4
 8004cec:	6800      	ldr	r0, [r0, #0]
 8004cee:	f001 f84a 	bl	8005d86 <USB_WritePMA>
 8004cf2:	e319      	b.n	8005328 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004cf4:	1d3b      	adds	r3, r7, #4
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004d12:	1d3b      	adds	r3, r7, #4
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	463b      	mov	r3, r7
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	441a      	add	r2, r3
 8004d20:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004d38:	463b      	mov	r3, r7
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6a1a      	ldr	r2, [r3, #32]
 8004d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d42:	1ad2      	subs	r2, r2, r3
 8004d44:	463b      	mov	r3, r7
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d4a:	1d3b      	adds	r3, r7, #4
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	463b      	mov	r3, r7
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8162 	beq.w	800502a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d66:	1d3b      	adds	r3, r7, #4
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d6e:	463b      	mov	r3, r7
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	785b      	ldrb	r3, [r3, #1]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d164      	bne.n	8004e42 <USB_EPStartXfer+0x926>
 8004d78:	1d3b      	adds	r3, r7, #4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d7e:	1d3b      	adds	r3, r7, #4
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d8c:	4413      	add	r3, r2
 8004d8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d90:	463b      	mov	r3, r7
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	011a      	lsls	r2, r3, #4
 8004d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004da0:	677b      	str	r3, [r7, #116]	; 0x74
 8004da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d112      	bne.n	8004dd0 <USB_EPStartXfer+0x8b4>
 8004daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db8:	801a      	strh	r2, [r3, #0]
 8004dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dcc:	801a      	strh	r2, [r3, #0]
 8004dce:	e057      	b.n	8004e80 <USB_EPStartXfer+0x964>
 8004dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dd4:	2b3e      	cmp	r3, #62	; 0x3e
 8004dd6:	d817      	bhi.n	8004e08 <USB_EPStartXfer+0x8ec>
 8004dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ddc:	085b      	lsrs	r3, r3, #1
 8004dde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d004      	beq.n	8004df8 <USB_EPStartXfer+0x8dc>
 8004dee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004df2:	3301      	adds	r3, #1
 8004df4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004df8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	029b      	lsls	r3, r3, #10
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e04:	801a      	strh	r2, [r3, #0]
 8004e06:	e03b      	b.n	8004e80 <USB_EPStartXfer+0x964>
 8004e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e16:	f003 031f 	and.w	r3, r3, #31
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d104      	bne.n	8004e28 <USB_EPStartXfer+0x90c>
 8004e1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004e22:	3b01      	subs	r3, #1
 8004e24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004e28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	029b      	lsls	r3, r3, #10
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e3e:	801a      	strh	r2, [r3, #0]
 8004e40:	e01e      	b.n	8004e80 <USB_EPStartXfer+0x964>
 8004e42:	463b      	mov	r3, r7
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d119      	bne.n	8004e80 <USB_EPStartXfer+0x964>
 8004e4c:	1d3b      	adds	r3, r7, #4
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e62:	463b      	mov	r3, r7
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	011a      	lsls	r2, r3, #4
 8004e6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e6e:	4413      	add	r3, r2
 8004e70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004e80:	463b      	mov	r3, r7
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	895b      	ldrh	r3, [r3, #10]
 8004e86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e8a:	463b      	mov	r3, r7
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6959      	ldr	r1, [r3, #20]
 8004e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e9a:	1d38      	adds	r0, r7, #4
 8004e9c:	6800      	ldr	r0, [r0, #0]
 8004e9e:	f000 ff72 	bl	8005d86 <USB_WritePMA>
          ep->xfer_buff += len;
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695a      	ldr	r2, [r3, #20]
 8004ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eac:	441a      	add	r2, r3
 8004eae:	463b      	mov	r3, r7
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004eb4:	463b      	mov	r3, r7
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6a1a      	ldr	r2, [r3, #32]
 8004eba:	463b      	mov	r3, r7
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d909      	bls.n	8004ed8 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8004ec4:	463b      	mov	r3, r7
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6a1a      	ldr	r2, [r3, #32]
 8004eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ece:	1ad2      	subs	r2, r2, r3
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	621a      	str	r2, [r3, #32]
 8004ed6:	e008      	b.n	8004eea <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8004ed8:	463b      	mov	r3, r7
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004ee2:	463b      	mov	r3, r7
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 821a 	beq.w	8005328 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ef4:	463b      	mov	r3, r7
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	785b      	ldrb	r3, [r3, #1]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d164      	bne.n	8004fc8 <USB_EPStartXfer+0xaac>
 8004efe:	1d3b      	adds	r3, r7, #4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f04:	1d3b      	adds	r3, r7, #4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f12:	4413      	add	r3, r2
 8004f14:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f16:	463b      	mov	r3, r7
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	011a      	lsls	r2, r3, #4
 8004f1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f20:	4413      	add	r3, r2
 8004f22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f26:	667b      	str	r3, [r7, #100]	; 0x64
 8004f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d112      	bne.n	8004f56 <USB_EPStartXfer+0xa3a>
 8004f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f3e:	801a      	strh	r2, [r3, #0]
 8004f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	e057      	b.n	8005006 <USB_EPStartXfer+0xaea>
 8004f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f5c:	d817      	bhi.n	8004f8e <USB_EPStartXfer+0xa72>
 8004f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f62:	085b      	lsrs	r3, r3, #1
 8004f64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d004      	beq.n	8004f7e <USB_EPStartXfer+0xa62>
 8004f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f78:	3301      	adds	r3, #1
 8004f7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	029b      	lsls	r3, r3, #10
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	e03b      	b.n	8005006 <USB_EPStartXfer+0xaea>
 8004f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f9c:	f003 031f 	and.w	r3, r3, #31
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d104      	bne.n	8004fae <USB_EPStartXfer+0xa92>
 8004fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	029b      	lsls	r3, r3, #10
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fc4:	801a      	strh	r2, [r3, #0]
 8004fc6:	e01e      	b.n	8005006 <USB_EPStartXfer+0xaea>
 8004fc8:	463b      	mov	r3, r7
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	785b      	ldrb	r3, [r3, #1]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d119      	bne.n	8005006 <USB_EPStartXfer+0xaea>
 8004fd2:	1d3b      	adds	r3, r7, #4
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	673b      	str	r3, [r7, #112]	; 0x70
 8004fd8:	1d3b      	adds	r3, r7, #4
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fe6:	4413      	add	r3, r2
 8004fe8:	673b      	str	r3, [r7, #112]	; 0x70
 8004fea:	463b      	mov	r3, r7
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	011a      	lsls	r2, r3, #4
 8004ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005000:	b29a      	uxth	r2, r3
 8005002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005004:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005006:	463b      	mov	r3, r7
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	891b      	ldrh	r3, [r3, #8]
 800500c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005010:	463b      	mov	r3, r7
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6959      	ldr	r1, [r3, #20]
 8005016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800501a:	b29b      	uxth	r3, r3
 800501c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005020:	1d38      	adds	r0, r7, #4
 8005022:	6800      	ldr	r0, [r0, #0]
 8005024:	f000 feaf 	bl	8005d86 <USB_WritePMA>
 8005028:	e17e      	b.n	8005328 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800502a:	463b      	mov	r3, r7
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d16f      	bne.n	8005114 <USB_EPStartXfer+0xbf8>
 8005034:	1d3b      	adds	r3, r7, #4
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800503c:	1d3b      	adds	r3, r7, #4
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005044:	b29b      	uxth	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800504c:	4413      	add	r3, r2
 800504e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005052:	463b      	mov	r3, r7
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	011a      	lsls	r2, r3, #4
 800505a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800505e:	4413      	add	r3, r2
 8005060:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d116      	bne.n	800509e <USB_EPStartXfer+0xb82>
 8005070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	b29b      	uxth	r3, r3
 8005078:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800507c:	b29a      	uxth	r2, r3
 800507e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005082:	801a      	strh	r2, [r3, #0]
 8005084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005094:	b29a      	uxth	r2, r3
 8005096:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	e05f      	b.n	800515e <USB_EPStartXfer+0xc42>
 800509e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a2:	2b3e      	cmp	r3, #62	; 0x3e
 80050a4:	d818      	bhi.n	80050d8 <USB_EPStartXfer+0xbbc>
 80050a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050aa:	085b      	lsrs	r3, r3, #1
 80050ac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80050b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d004      	beq.n	80050c6 <USB_EPStartXfer+0xbaa>
 80050bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050c0:	3301      	adds	r3, #1
 80050c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80050c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	029b      	lsls	r3, r3, #10
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050d4:	801a      	strh	r2, [r3, #0]
 80050d6:	e042      	b.n	800515e <USB_EPStartXfer+0xc42>
 80050d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050dc:	095b      	lsrs	r3, r3, #5
 80050de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80050e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d104      	bne.n	80050f8 <USB_EPStartXfer+0xbdc>
 80050ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050f2:	3b01      	subs	r3, #1
 80050f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80050f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	029b      	lsls	r3, r3, #10
 8005100:	b29b      	uxth	r3, r3
 8005102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510a:	b29a      	uxth	r2, r3
 800510c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005110:	801a      	strh	r2, [r3, #0]
 8005112:	e024      	b.n	800515e <USB_EPStartXfer+0xc42>
 8005114:	463b      	mov	r3, r7
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	785b      	ldrb	r3, [r3, #1]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d11f      	bne.n	800515e <USB_EPStartXfer+0xc42>
 800511e:	1d3b      	adds	r3, r7, #4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005126:	1d3b      	adds	r3, r7, #4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512e:	b29b      	uxth	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005136:	4413      	add	r3, r2
 8005138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800513c:	463b      	mov	r3, r7
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	011a      	lsls	r2, r3, #4
 8005144:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005148:	4413      	add	r3, r2
 800514a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800514e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005156:	b29a      	uxth	r2, r3
 8005158:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800515c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800515e:	463b      	mov	r3, r7
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	891b      	ldrh	r3, [r3, #8]
 8005164:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005168:	463b      	mov	r3, r7
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6959      	ldr	r1, [r3, #20]
 800516e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005172:	b29b      	uxth	r3, r3
 8005174:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005178:	1d38      	adds	r0, r7, #4
 800517a:	6800      	ldr	r0, [r0, #0]
 800517c:	f000 fe03 	bl	8005d86 <USB_WritePMA>
          ep->xfer_buff += len;
 8005180:	463b      	mov	r3, r7
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695a      	ldr	r2, [r3, #20]
 8005186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800518a:	441a      	add	r2, r3
 800518c:	463b      	mov	r3, r7
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005192:	463b      	mov	r3, r7
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6a1a      	ldr	r2, [r3, #32]
 8005198:	463b      	mov	r3, r7
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d909      	bls.n	80051b6 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80051a2:	463b      	mov	r3, r7
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6a1a      	ldr	r2, [r3, #32]
 80051a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ac:	1ad2      	subs	r2, r2, r3
 80051ae:	463b      	mov	r3, r7
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	621a      	str	r2, [r3, #32]
 80051b4:	e008      	b.n	80051c8 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80051b6:	463b      	mov	r3, r7
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80051c0:	463b      	mov	r3, r7
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2200      	movs	r2, #0
 80051c6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80051c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80ab 	beq.w	8005328 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051d2:	1d3b      	adds	r3, r7, #4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051da:	463b      	mov	r3, r7
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d16f      	bne.n	80052c4 <USB_EPStartXfer+0xda8>
 80051e4:	1d3b      	adds	r3, r7, #4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051ec:	1d3b      	adds	r3, r7, #4
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051fc:	4413      	add	r3, r2
 80051fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005202:	463b      	mov	r3, r7
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	011a      	lsls	r2, r3, #4
 800520a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800520e:	4413      	add	r3, r2
 8005210:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800521c:	2b00      	cmp	r3, #0
 800521e:	d116      	bne.n	800524e <USB_EPStartXfer+0xd32>
 8005220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29b      	uxth	r3, r3
 8005228:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800522c:	b29a      	uxth	r2, r3
 800522e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29b      	uxth	r3, r3
 800523c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005244:	b29a      	uxth	r2, r3
 8005246:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800524a:	801a      	strh	r2, [r3, #0]
 800524c:	e05b      	b.n	8005306 <USB_EPStartXfer+0xdea>
 800524e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005252:	2b3e      	cmp	r3, #62	; 0x3e
 8005254:	d818      	bhi.n	8005288 <USB_EPStartXfer+0xd6c>
 8005256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <USB_EPStartXfer+0xd5a>
 800526c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005270:	3301      	adds	r3, #1
 8005272:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800527a:	b29b      	uxth	r3, r3
 800527c:	029b      	lsls	r3, r3, #10
 800527e:	b29a      	uxth	r2, r3
 8005280:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005284:	801a      	strh	r2, [r3, #0]
 8005286:	e03e      	b.n	8005306 <USB_EPStartXfer+0xdea>
 8005288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800528c:	095b      	lsrs	r3, r3, #5
 800528e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	2b00      	cmp	r3, #0
 800529c:	d104      	bne.n	80052a8 <USB_EPStartXfer+0xd8c>
 800529e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a2:	3b01      	subs	r3, #1
 80052a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	029b      	lsls	r3, r3, #10
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052c0:	801a      	strh	r2, [r3, #0]
 80052c2:	e020      	b.n	8005306 <USB_EPStartXfer+0xdea>
 80052c4:	463b      	mov	r3, r7
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	785b      	ldrb	r3, [r3, #1]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d11b      	bne.n	8005306 <USB_EPStartXfer+0xdea>
 80052ce:	1d3b      	adds	r3, r7, #4
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052de:	4413      	add	r3, r2
 80052e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052e4:	463b      	mov	r3, r7
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	011a      	lsls	r2, r3, #4
 80052ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052f0:	4413      	add	r3, r2
 80052f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fe:	b29a      	uxth	r2, r3
 8005300:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005304:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005306:	463b      	mov	r3, r7
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	895b      	ldrh	r3, [r3, #10]
 800530c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005310:	463b      	mov	r3, r7
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6959      	ldr	r1, [r3, #20]
 8005316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800531a:	b29b      	uxth	r3, r3
 800531c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005320:	1d38      	adds	r0, r7, #4
 8005322:	6800      	ldr	r0, [r0, #0]
 8005324:	f000 fd2f 	bl	8005d86 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005328:	1d3b      	adds	r3, r7, #4
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	463b      	mov	r3, r7
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b29b      	uxth	r3, r3
 800533a:	f107 020a 	add.w	r2, r7, #10
 800533e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005346:	8013      	strh	r3, [r2, #0]
 8005348:	f107 030a 	add.w	r3, r7, #10
 800534c:	f107 020a 	add.w	r2, r7, #10
 8005350:	8812      	ldrh	r2, [r2, #0]
 8005352:	f082 0210 	eor.w	r2, r2, #16
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	f107 030a 	add.w	r3, r7, #10
 800535c:	f107 020a 	add.w	r2, r7, #10
 8005360:	8812      	ldrh	r2, [r2, #0]
 8005362:	f082 0220 	eor.w	r2, r2, #32
 8005366:	801a      	strh	r2, [r3, #0]
 8005368:	1d3b      	adds	r3, r7, #4
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	463b      	mov	r3, r7
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	441a      	add	r2, r3
 8005376:	f107 030a 	add.w	r3, r7, #10
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800538c:	b29b      	uxth	r3, r3
 800538e:	8013      	strh	r3, [r2, #0]
 8005390:	e3b5      	b.n	8005afe <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005392:	463b      	mov	r3, r7
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	7b1b      	ldrb	r3, [r3, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f040 8090 	bne.w	80054be <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800539e:	463b      	mov	r3, r7
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699a      	ldr	r2, [r3, #24]
 80053a4:	463b      	mov	r3, r7
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d90e      	bls.n	80053cc <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80053ae:	463b      	mov	r3, r7
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80053b8:	463b      	mov	r3, r7
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c2:	1ad2      	subs	r2, r2, r3
 80053c4:	463b      	mov	r3, r7
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	619a      	str	r2, [r3, #24]
 80053ca:	e008      	b.n	80053de <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80053cc:	463b      	mov	r3, r7
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80053d6:	463b      	mov	r3, r7
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2200      	movs	r2, #0
 80053dc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80053de:	1d3b      	adds	r3, r7, #4
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053e6:	1d3b      	adds	r3, r7, #4
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80053f6:	4413      	add	r3, r2
 80053f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053fc:	463b      	mov	r3, r7
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	011a      	lsls	r2, r3, #4
 8005404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005408:	4413      	add	r3, r2
 800540a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800540e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005416:	2b00      	cmp	r3, #0
 8005418:	d116      	bne.n	8005448 <USB_EPStartXfer+0xf2c>
 800541a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	b29b      	uxth	r3, r3
 8005422:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005426:	b29a      	uxth	r2, r3
 8005428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800543a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800543e:	b29a      	uxth	r2, r3
 8005440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005444:	801a      	strh	r2, [r3, #0]
 8005446:	e32c      	b.n	8005aa2 <USB_EPStartXfer+0x1586>
 8005448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800544c:	2b3e      	cmp	r3, #62	; 0x3e
 800544e:	d818      	bhi.n	8005482 <USB_EPStartXfer+0xf66>
 8005450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800545a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d004      	beq.n	8005470 <USB_EPStartXfer+0xf54>
 8005466:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800546a:	3301      	adds	r3, #1
 800546c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005470:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005474:	b29b      	uxth	r3, r3
 8005476:	029b      	lsls	r3, r3, #10
 8005478:	b29a      	uxth	r2, r3
 800547a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800547e:	801a      	strh	r2, [r3, #0]
 8005480:	e30f      	b.n	8005aa2 <USB_EPStartXfer+0x1586>
 8005482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800548c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	2b00      	cmp	r3, #0
 8005496:	d104      	bne.n	80054a2 <USB_EPStartXfer+0xf86>
 8005498:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800549c:	3b01      	subs	r3, #1
 800549e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80054a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	029b      	lsls	r3, r3, #10
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054ba:	801a      	strh	r2, [r3, #0]
 80054bc:	e2f1      	b.n	8005aa2 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80054be:	463b      	mov	r3, r7
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	78db      	ldrb	r3, [r3, #3]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	f040 818f 	bne.w	80057e8 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80054ca:	463b      	mov	r3, r7
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d175      	bne.n	80055c0 <USB_EPStartXfer+0x10a4>
 80054d4:	1d3b      	adds	r3, r7, #4
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054dc:	1d3b      	adds	r3, r7, #4
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	461a      	mov	r2, r3
 80054e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054ec:	4413      	add	r3, r2
 80054ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054f2:	463b      	mov	r3, r7
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	011a      	lsls	r2, r3, #4
 80054fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054fe:	4413      	add	r3, r2
 8005500:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005504:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005508:	463b      	mov	r3, r7
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d116      	bne.n	8005540 <USB_EPStartXfer+0x1024>
 8005512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800551e:	b29a      	uxth	r2, r3
 8005520:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005524:	801a      	strh	r2, [r3, #0]
 8005526:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29b      	uxth	r3, r3
 800552e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005536:	b29a      	uxth	r2, r3
 8005538:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800553c:	801a      	strh	r2, [r3, #0]
 800553e:	e065      	b.n	800560c <USB_EPStartXfer+0x10f0>
 8005540:	463b      	mov	r3, r7
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2b3e      	cmp	r3, #62	; 0x3e
 8005548:	d81a      	bhi.n	8005580 <USB_EPStartXfer+0x1064>
 800554a:	463b      	mov	r3, r7
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	085b      	lsrs	r3, r3, #1
 8005552:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005556:	463b      	mov	r3, r7
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d004      	beq.n	800556e <USB_EPStartXfer+0x1052>
 8005564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005568:	3301      	adds	r3, #1
 800556a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800556e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005572:	b29b      	uxth	r3, r3
 8005574:	029b      	lsls	r3, r3, #10
 8005576:	b29a      	uxth	r2, r3
 8005578:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	e045      	b.n	800560c <USB_EPStartXfer+0x10f0>
 8005580:	463b      	mov	r3, r7
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800558c:	463b      	mov	r3, r7
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 031f 	and.w	r3, r3, #31
 8005596:	2b00      	cmp	r3, #0
 8005598:	d104      	bne.n	80055a4 <USB_EPStartXfer+0x1088>
 800559a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800559e:	3b01      	subs	r3, #1
 80055a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	029b      	lsls	r3, r3, #10
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055bc:	801a      	strh	r2, [r3, #0]
 80055be:	e025      	b.n	800560c <USB_EPStartXfer+0x10f0>
 80055c0:	463b      	mov	r3, r7
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	785b      	ldrb	r3, [r3, #1]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d120      	bne.n	800560c <USB_EPStartXfer+0x10f0>
 80055ca:	1d3b      	adds	r3, r7, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80055d2:	1d3b      	adds	r3, r7, #4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055da:	b29b      	uxth	r3, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055e2:	4413      	add	r3, r2
 80055e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80055e8:	463b      	mov	r3, r7
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	011a      	lsls	r2, r3, #4
 80055f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055f4:	4413      	add	r3, r2
 80055f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055fe:	463b      	mov	r3, r7
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	b29a      	uxth	r2, r3
 8005606:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800560a:	801a      	strh	r2, [r3, #0]
 800560c:	1d3b      	adds	r3, r7, #4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005614:	463b      	mov	r3, r7
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	785b      	ldrb	r3, [r3, #1]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d175      	bne.n	800570a <USB_EPStartXfer+0x11ee>
 800561e:	1d3b      	adds	r3, r7, #4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005626:	1d3b      	adds	r3, r7, #4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800562e:	b29b      	uxth	r3, r3
 8005630:	461a      	mov	r2, r3
 8005632:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005636:	4413      	add	r3, r2
 8005638:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800563c:	463b      	mov	r3, r7
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	011a      	lsls	r2, r3, #4
 8005644:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005648:	4413      	add	r3, r2
 800564a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800564e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005652:	463b      	mov	r3, r7
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d116      	bne.n	800568a <USB_EPStartXfer+0x116e>
 800565c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005668:	b29a      	uxth	r2, r3
 800566a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800566e:	801a      	strh	r2, [r3, #0]
 8005670:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800567c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005680:	b29a      	uxth	r2, r3
 8005682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005686:	801a      	strh	r2, [r3, #0]
 8005688:	e061      	b.n	800574e <USB_EPStartXfer+0x1232>
 800568a:	463b      	mov	r3, r7
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	2b3e      	cmp	r3, #62	; 0x3e
 8005692:	d81a      	bhi.n	80056ca <USB_EPStartXfer+0x11ae>
 8005694:	463b      	mov	r3, r7
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056a0:	463b      	mov	r3, r7
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d004      	beq.n	80056b8 <USB_EPStartXfer+0x119c>
 80056ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80056b2:	3301      	adds	r3, #1
 80056b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80056bc:	b29b      	uxth	r3, r3
 80056be:	029b      	lsls	r3, r3, #10
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	e041      	b.n	800574e <USB_EPStartXfer+0x1232>
 80056ca:	463b      	mov	r3, r7
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	095b      	lsrs	r3, r3, #5
 80056d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056d6:	463b      	mov	r3, r7
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f003 031f 	and.w	r3, r3, #31
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <USB_EPStartXfer+0x11d2>
 80056e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80056e8:	3b01      	subs	r3, #1
 80056ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	029b      	lsls	r3, r3, #10
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005700:	b29a      	uxth	r2, r3
 8005702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005706:	801a      	strh	r2, [r3, #0]
 8005708:	e021      	b.n	800574e <USB_EPStartXfer+0x1232>
 800570a:	463b      	mov	r3, r7
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d11c      	bne.n	800574e <USB_EPStartXfer+0x1232>
 8005714:	1d3b      	adds	r3, r7, #4
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800571c:	b29b      	uxth	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005724:	4413      	add	r3, r2
 8005726:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800572a:	463b      	mov	r3, r7
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	011a      	lsls	r2, r3, #4
 8005732:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005736:	4413      	add	r3, r2
 8005738:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800573c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005740:	463b      	mov	r3, r7
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	b29a      	uxth	r2, r3
 8005748:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800574c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800574e:	463b      	mov	r3, r7
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 81a4 	beq.w	8005aa2 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800575a:	1d3b      	adds	r3, r7, #4
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	463b      	mov	r3, r7
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800576e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d005      	beq.n	8005786 <USB_EPStartXfer+0x126a>
 800577a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10d      	bne.n	80057a2 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005786:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800578a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800578e:	2b00      	cmp	r3, #0
 8005790:	f040 8187 	bne.w	8005aa2 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005794:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579c:	2b00      	cmp	r3, #0
 800579e:	f040 8180 	bne.w	8005aa2 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80057a2:	1d3b      	adds	r3, r7, #4
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	463b      	mov	r3, r7
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057bc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80057c0:	1d3b      	adds	r3, r7, #4
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	463b      	mov	r3, r7
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	441a      	add	r2, r3
 80057ce:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80057d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	8013      	strh	r3, [r2, #0]
 80057e6:	e15c      	b.n	8005aa2 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80057e8:	463b      	mov	r3, r7
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	78db      	ldrb	r3, [r3, #3]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	f040 8155 	bne.w	8005a9e <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80057f4:	463b      	mov	r3, r7
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	463b      	mov	r3, r7
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	429a      	cmp	r2, r3
 8005802:	d90e      	bls.n	8005822 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8005804:	463b      	mov	r3, r7
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800580e:	463b      	mov	r3, r7
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005818:	1ad2      	subs	r2, r2, r3
 800581a:	463b      	mov	r3, r7
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	619a      	str	r2, [r3, #24]
 8005820:	e008      	b.n	8005834 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8005822:	463b      	mov	r3, r7
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800582c:	463b      	mov	r3, r7
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2200      	movs	r2, #0
 8005832:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005834:	463b      	mov	r3, r7
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	785b      	ldrb	r3, [r3, #1]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d16f      	bne.n	800591e <USB_EPStartXfer+0x1402>
 800583e:	1d3b      	adds	r3, r7, #4
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005846:	1d3b      	adds	r3, r7, #4
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800584e:	b29b      	uxth	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005856:	4413      	add	r3, r2
 8005858:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800585c:	463b      	mov	r3, r7
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	011a      	lsls	r2, r3, #4
 8005864:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005868:	4413      	add	r3, r2
 800586a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800586e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d116      	bne.n	80058a8 <USB_EPStartXfer+0x138c>
 800587a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005886:	b29a      	uxth	r2, r3
 8005888:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800588c:	801a      	strh	r2, [r3, #0]
 800588e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	b29b      	uxth	r3, r3
 8005896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800589a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800589e:	b29a      	uxth	r2, r3
 80058a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058a4:	801a      	strh	r2, [r3, #0]
 80058a6:	e05f      	b.n	8005968 <USB_EPStartXfer+0x144c>
 80058a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ac:	2b3e      	cmp	r3, #62	; 0x3e
 80058ae:	d818      	bhi.n	80058e2 <USB_EPStartXfer+0x13c6>
 80058b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b4:	085b      	lsrs	r3, r3, #1
 80058b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d004      	beq.n	80058d0 <USB_EPStartXfer+0x13b4>
 80058c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ca:	3301      	adds	r3, #1
 80058cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	029b      	lsls	r3, r3, #10
 80058d8:	b29a      	uxth	r2, r3
 80058da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058de:	801a      	strh	r2, [r3, #0]
 80058e0:	e042      	b.n	8005968 <USB_EPStartXfer+0x144c>
 80058e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d104      	bne.n	8005902 <USB_EPStartXfer+0x13e6>
 80058f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058fc:	3b01      	subs	r3, #1
 80058fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005906:	b29b      	uxth	r3, r3
 8005908:	029b      	lsls	r3, r3, #10
 800590a:	b29b      	uxth	r3, r3
 800590c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005914:	b29a      	uxth	r2, r3
 8005916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800591a:	801a      	strh	r2, [r3, #0]
 800591c:	e024      	b.n	8005968 <USB_EPStartXfer+0x144c>
 800591e:	463b      	mov	r3, r7
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d11f      	bne.n	8005968 <USB_EPStartXfer+0x144c>
 8005928:	1d3b      	adds	r3, r7, #4
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005930:	1d3b      	adds	r3, r7, #4
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005938:	b29b      	uxth	r3, r3
 800593a:	461a      	mov	r2, r3
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005940:	4413      	add	r3, r2
 8005942:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005946:	463b      	mov	r3, r7
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	011a      	lsls	r2, r3, #4
 800594e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005952:	4413      	add	r3, r2
 8005954:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005958:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800595c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005960:	b29a      	uxth	r2, r3
 8005962:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005966:	801a      	strh	r2, [r3, #0]
 8005968:	1d3b      	adds	r3, r7, #4
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005970:	463b      	mov	r3, r7
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	785b      	ldrb	r3, [r3, #1]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d16f      	bne.n	8005a5a <USB_EPStartXfer+0x153e>
 800597a:	1d3b      	adds	r3, r7, #4
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005982:	1d3b      	adds	r3, r7, #4
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598a:	b29b      	uxth	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005992:	4413      	add	r3, r2
 8005994:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005998:	463b      	mov	r3, r7
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	011a      	lsls	r2, r3, #4
 80059a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a4:	4413      	add	r3, r2
 80059a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d116      	bne.n	80059e4 <USB_EPStartXfer+0x14c8>
 80059b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059c8:	801a      	strh	r2, [r3, #0]
 80059ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059da:	b29a      	uxth	r2, r3
 80059dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	e05e      	b.n	8005aa2 <USB_EPStartXfer+0x1586>
 80059e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e8:	2b3e      	cmp	r3, #62	; 0x3e
 80059ea:	d818      	bhi.n	8005a1e <USB_EPStartXfer+0x1502>
 80059ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f0:	085b      	lsrs	r3, r3, #1
 80059f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80059f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d004      	beq.n	8005a0c <USB_EPStartXfer+0x14f0>
 8005a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a06:	3301      	adds	r3, #1
 8005a08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	029b      	lsls	r3, r3, #10
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a1a:	801a      	strh	r2, [r3, #0]
 8005a1c:	e041      	b.n	8005aa2 <USB_EPStartXfer+0x1586>
 8005a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d104      	bne.n	8005a3e <USB_EPStartXfer+0x1522>
 8005a34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	029b      	lsls	r3, r3, #10
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a56:	801a      	strh	r2, [r3, #0]
 8005a58:	e023      	b.n	8005aa2 <USB_EPStartXfer+0x1586>
 8005a5a:	463b      	mov	r3, r7
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d11e      	bne.n	8005aa2 <USB_EPStartXfer+0x1586>
 8005a64:	1d3b      	adds	r3, r7, #4
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a74:	4413      	add	r3, r2
 8005a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	011a      	lsls	r2, r3, #4
 8005a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a86:	4413      	add	r3, r2
 8005a88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a9a:	801a      	strh	r2, [r3, #0]
 8005a9c:	e001      	b.n	8005aa2 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e02e      	b.n	8005b00 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005aa2:	1d3b      	adds	r3, r7, #4
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005abc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005ac0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005ac4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ac8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005acc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005ad0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ad4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005ad8:	1d3b      	adds	r3, r7, #4
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	463b      	mov	r3, r7
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	441a      	add	r2, r3
 8005ae6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	785b      	ldrb	r3, [r3, #1]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d020      	beq.n	8005b5e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b32:	81bb      	strh	r3, [r7, #12]
 8005b34:	89bb      	ldrh	r3, [r7, #12]
 8005b36:	f083 0310 	eor.w	r3, r3, #16
 8005b3a:	81bb      	strh	r3, [r7, #12]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	441a      	add	r2, r3
 8005b46:	89bb      	ldrh	r3, [r7, #12]
 8005b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	8013      	strh	r3, [r2, #0]
 8005b5c:	e01f      	b.n	8005b9e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b74:	81fb      	strh	r3, [r7, #14]
 8005b76:	89fb      	ldrh	r3, [r7, #14]
 8005b78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b7c:	81fb      	strh	r3, [r7, #14]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	441a      	add	r2, r3
 8005b88:	89fb      	ldrh	r3, [r7, #14]
 8005b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bc80      	pop	{r7}
 8005ba8:	4770      	bx	lr

08005baa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b087      	sub	sp, #28
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	7b1b      	ldrb	r3, [r3, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f040 809d 	bne.w	8005cf8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	785b      	ldrb	r3, [r3, #1]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d04c      	beq.n	8005c60 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	823b      	strh	r3, [r7, #16]
 8005bd4:	8a3b      	ldrh	r3, [r7, #16]
 8005bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d01b      	beq.n	8005c16 <USB_EPClearStall+0x6c>
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf4:	81fb      	strh	r3, [r7, #14]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	441a      	add	r2, r3
 8005c00:	89fb      	ldrh	r3, [r7, #14]
 8005c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	78db      	ldrb	r3, [r3, #3]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d06c      	beq.n	8005cf8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c34:	81bb      	strh	r3, [r7, #12]
 8005c36:	89bb      	ldrh	r3, [r7, #12]
 8005c38:	f083 0320 	eor.w	r3, r3, #32
 8005c3c:	81bb      	strh	r3, [r7, #12]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	441a      	add	r2, r3
 8005c48:	89bb      	ldrh	r3, [r7, #12]
 8005c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	8013      	strh	r3, [r2, #0]
 8005c5e:	e04b      	b.n	8005cf8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	82fb      	strh	r3, [r7, #22]
 8005c6e:	8afb      	ldrh	r3, [r7, #22]
 8005c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d01b      	beq.n	8005cb0 <USB_EPClearStall+0x106>
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8e:	82bb      	strh	r3, [r7, #20]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	441a      	add	r2, r3
 8005c9a:	8abb      	ldrh	r3, [r7, #20]
 8005c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc6:	827b      	strh	r3, [r7, #18]
 8005cc8:	8a7b      	ldrh	r3, [r7, #18]
 8005cca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cce:	827b      	strh	r3, [r7, #18]
 8005cd0:	8a7b      	ldrh	r3, [r7, #18]
 8005cd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cd6:	827b      	strh	r3, [r7, #18]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	441a      	add	r2, r3
 8005ce2:	8a7b      	ldrh	r3, [r7, #18]
 8005ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr

08005d04 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d103      	bne.n	8005d1e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2280      	movs	r2, #128	; 0x80
 8005d1a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr

08005d2a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bc80      	pop	{r7}
 8005d3c:	4770      	bx	lr

08005d3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr

08005d52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005d64:	68fb      	ldr	r3, [r7, #12]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr

08005d70 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr

08005d86 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b08d      	sub	sp, #52	; 0x34
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	4611      	mov	r1, r2
 8005d92:	461a      	mov	r2, r3
 8005d94:	460b      	mov	r3, r1
 8005d96:	80fb      	strh	r3, [r7, #6]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005d9c:	88bb      	ldrh	r3, [r7, #4]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	085b      	lsrs	r3, r3, #1
 8005da2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005dac:	88fb      	ldrh	r3, [r7, #6]
 8005dae:	005a      	lsls	r2, r3, #1
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005db8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dbe:	e01e      	b.n	8005dfe <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	3301      	adds	r3, #1
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de8:	3302      	adds	r3, #2
 8005dea:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	3302      	adds	r3, #2
 8005df0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	3301      	adds	r3, #1
 8005df6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1dd      	bne.n	8005dc0 <USB_WritePMA+0x3a>
  }
}
 8005e04:	bf00      	nop
 8005e06:	3734      	adds	r7, #52	; 0x34
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc80      	pop	{r7}
 8005e0c:	4770      	bx	lr

08005e0e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b08b      	sub	sp, #44	; 0x2c
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	4611      	mov	r1, r2
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	80fb      	strh	r3, [r7, #6]
 8005e20:	4613      	mov	r3, r2
 8005e22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005e24:	88bb      	ldrh	r3, [r7, #4]
 8005e26:	085b      	lsrs	r3, r3, #1
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e34:	88fb      	ldrh	r3, [r7, #6]
 8005e36:	005a      	lsls	r2, r3, #1
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e40:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
 8005e46:	e01b      	b.n	8005e80 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	3302      	adds	r3, #2
 8005e54:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3301      	adds	r3, #1
 8005e62:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	0a1b      	lsrs	r3, r3, #8
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	3301      	adds	r3, #1
 8005e72:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	3302      	adds	r3, #2
 8005e78:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e0      	bne.n	8005e48 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005e86:	88bb      	ldrh	r3, [r7, #4]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	701a      	strb	r2, [r3, #0]
  }
}
 8005ea2:	bf00      	nop
 8005ea4:	372c      	adds	r7, #44	; 0x2c
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr

08005eac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	7c1b      	ldrb	r3, [r3, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d115      	bne.n	8005ef0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ec8:	2202      	movs	r2, #2
 8005eca:	2181      	movs	r1, #129	; 0x81
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f001 fe7c 	bl	8007bca <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005edc:	2202      	movs	r2, #2
 8005ede:	2101      	movs	r1, #1
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f001 fe72 	bl	8007bca <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005eee:	e012      	b.n	8005f16 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ef0:	2340      	movs	r3, #64	; 0x40
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	2181      	movs	r1, #129	; 0x81
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 fe67 	bl	8007bca <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f02:	2340      	movs	r3, #64	; 0x40
 8005f04:	2202      	movs	r2, #2
 8005f06:	2101      	movs	r1, #1
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f001 fe5e 	bl	8007bca <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f16:	2308      	movs	r3, #8
 8005f18:	2203      	movs	r2, #3
 8005f1a:	2182      	movs	r1, #130	; 0x82
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f001 fe54 	bl	8007bca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f2c:	f001 ff74 	bl	8007e18 <USBD_static_malloc>
 8005f30:	4602      	mov	r2, r0
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d102      	bne.n	8005f48 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005f42:	2301      	movs	r3, #1
 8005f44:	73fb      	strb	r3, [r7, #15]
 8005f46:	e026      	b.n	8005f96 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	7c1b      	ldrb	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f001 ff14 	bl	8007dac <USBD_LL_PrepareReceive>
 8005f84:	e007      	b.n	8005f96 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f8c:	2340      	movs	r3, #64	; 0x40
 8005f8e:	2101      	movs	r1, #1
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f001 ff0b 	bl	8007dac <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005fb0:	2181      	movs	r1, #129	; 0x81
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 fe2f 	bl	8007c16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 fe28 	bl	8007c16 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005fce:	2182      	movs	r1, #130	; 0x82
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 fe20 	bl	8007c16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00e      	beq.n	8006004 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f001 ff1a 	bl	8007e30 <USBD_static_free>
    pdev->pClassData = NULL;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006004:	7bfb      	ldrb	r3, [r7, #15]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b086      	sub	sp, #24
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800601e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006028:	2300      	movs	r3, #0
 800602a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006034:	2b00      	cmp	r3, #0
 8006036:	d039      	beq.n	80060ac <USBD_CDC_Setup+0x9e>
 8006038:	2b20      	cmp	r3, #32
 800603a:	d17c      	bne.n	8006136 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	88db      	ldrh	r3, [r3, #6]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d029      	beq.n	8006098 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	b25b      	sxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	da11      	bge.n	8006072 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800605a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	88d2      	ldrh	r2, [r2, #6]
 8006060:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006062:	6939      	ldr	r1, [r7, #16]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	88db      	ldrh	r3, [r3, #6]
 8006068:	461a      	mov	r2, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f001 f9fa 	bl	8007464 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006070:	e068      	b.n	8006144 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	785a      	ldrb	r2, [r3, #1]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	88db      	ldrh	r3, [r3, #6]
 8006080:	b2da      	uxtb	r2, r3
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006088:	6939      	ldr	r1, [r7, #16]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	88db      	ldrh	r3, [r3, #6]
 800608e:	461a      	mov	r2, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f001 fa15 	bl	80074c0 <USBD_CtlPrepareRx>
      break;
 8006096:	e055      	b.n	8006144 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	7850      	ldrb	r0, [r2, #1]
 80060a4:	2200      	movs	r2, #0
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	4798      	blx	r3
      break;
 80060aa:	e04b      	b.n	8006144 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	785b      	ldrb	r3, [r3, #1]
 80060b0:	2b0a      	cmp	r3, #10
 80060b2:	d017      	beq.n	80060e4 <USBD_CDC_Setup+0xd6>
 80060b4:	2b0b      	cmp	r3, #11
 80060b6:	d029      	beq.n	800610c <USBD_CDC_Setup+0xfe>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d133      	bne.n	8006124 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060c2:	2b03      	cmp	r3, #3
 80060c4:	d107      	bne.n	80060d6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80060c6:	f107 030c 	add.w	r3, r7, #12
 80060ca:	2202      	movs	r2, #2
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f001 f9c8 	bl	8007464 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060d4:	e02e      	b.n	8006134 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f001 f959 	bl	8007390 <USBD_CtlError>
            ret = USBD_FAIL;
 80060de:	2302      	movs	r3, #2
 80060e0:	75fb      	strb	r3, [r7, #23]
          break;
 80060e2:	e027      	b.n	8006134 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d107      	bne.n	80060fe <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80060ee:	f107 030f 	add.w	r3, r7, #15
 80060f2:	2201      	movs	r2, #1
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f001 f9b4 	bl	8007464 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060fc:	e01a      	b.n	8006134 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 f945 	bl	8007390 <USBD_CtlError>
            ret = USBD_FAIL;
 8006106:	2302      	movs	r3, #2
 8006108:	75fb      	strb	r3, [r7, #23]
          break;
 800610a:	e013      	b.n	8006134 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006112:	2b03      	cmp	r3, #3
 8006114:	d00d      	beq.n	8006132 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 f939 	bl	8007390 <USBD_CtlError>
            ret = USBD_FAIL;
 800611e:	2302      	movs	r3, #2
 8006120:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006122:	e006      	b.n	8006132 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006124:	6839      	ldr	r1, [r7, #0]
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f001 f932 	bl	8007390 <USBD_CtlError>
          ret = USBD_FAIL;
 800612c:	2302      	movs	r3, #2
 800612e:	75fb      	strb	r3, [r7, #23]
          break;
 8006130:	e000      	b.n	8006134 <USBD_CDC_Setup+0x126>
          break;
 8006132:	bf00      	nop
      }
      break;
 8006134:	e006      	b.n	8006144 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 f929 	bl	8007390 <USBD_CtlError>
      ret = USBD_FAIL;
 800613e:	2302      	movs	r3, #2
 8006140:	75fb      	strb	r3, [r7, #23]
      break;
 8006142:	bf00      	nop
  }

  return ret;
 8006144:	7dfb      	ldrb	r3, [r7, #23]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	460b      	mov	r3, r1
 8006158:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006160:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006168:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006170:	2b00      	cmp	r3, #0
 8006172:	d03a      	beq.n	80061ea <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006174:	78fa      	ldrb	r2, [r7, #3]
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	440b      	add	r3, r1
 8006182:	331c      	adds	r3, #28
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d029      	beq.n	80061de <USBD_CDC_DataIn+0x90>
 800618a:	78fa      	ldrb	r2, [r7, #3]
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	440b      	add	r3, r1
 8006198:	331c      	adds	r3, #28
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	78f9      	ldrb	r1, [r7, #3]
 800619e:	68b8      	ldr	r0, [r7, #8]
 80061a0:	460b      	mov	r3, r1
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	4403      	add	r3, r0
 80061aa:	3338      	adds	r3, #56	; 0x38
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	fbb2 f1f3 	udiv	r1, r2, r3
 80061b2:	fb03 f301 	mul.w	r3, r3, r1
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d110      	bne.n	80061de <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80061bc:	78fa      	ldrb	r2, [r7, #3]
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	4613      	mov	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	440b      	add	r3, r1
 80061ca:	331c      	adds	r3, #28
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061d0:	78f9      	ldrb	r1, [r7, #3]
 80061d2:	2300      	movs	r3, #0
 80061d4:	2200      	movs	r2, #0
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f001 fdc5 	bl	8007d66 <USBD_LL_Transmit>
 80061dc:	e003      	b.n	80061e6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	e000      	b.n	80061ec <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80061ea:	2302      	movs	r3, #2
  }
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006206:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f001 fdf0 	bl	8007df2 <USBD_LL_GetRxDataSize>
 8006212:	4602      	mov	r2, r0
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00d      	beq.n	8006240 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006238:	4611      	mov	r1, r2
 800623a:	4798      	blx	r3

    return USBD_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	e000      	b.n	8006242 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006240:	2302      	movs	r3, #2
  }
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006258:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006260:	2b00      	cmp	r3, #0
 8006262:	d015      	beq.n	8006290 <USBD_CDC_EP0_RxReady+0x46>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800626a:	2bff      	cmp	r3, #255	; 0xff
 800626c:	d010      	beq.n	8006290 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800627c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006284:	b292      	uxth	r2, r2
 8006286:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	22ff      	movs	r2, #255	; 0xff
 800628c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2243      	movs	r2, #67	; 0x43
 80062a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80062aa:	4b03      	ldr	r3, [pc, #12]	; (80062b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	20000094 	.word	0x20000094

080062bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2243      	movs	r2, #67	; 0x43
 80062c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80062ca:	4b03      	ldr	r3, [pc, #12]	; (80062d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bc80      	pop	{r7}
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	20000050 	.word	0x20000050

080062dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2243      	movs	r2, #67	; 0x43
 80062e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80062ea:	4b03      	ldr	r3, [pc, #12]	; (80062f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bc80      	pop	{r7}
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	200000d8 	.word	0x200000d8

080062fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	220a      	movs	r2, #10
 8006308:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800630a:	4b03      	ldr	r3, [pc, #12]	; (8006318 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	bc80      	pop	{r7}
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	2000000c 	.word	0x2000000c

0800631c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006326:	2302      	movs	r3, #2
 8006328:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d005      	beq.n	800633c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800633c:	7bfb      	ldrb	r3, [r7, #15]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	bc80      	pop	{r7}
 8006346:	4770      	bx	lr

08006348 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	4613      	mov	r3, r2
 8006354:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006366:	88fa      	ldrh	r2, [r7, #6]
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr

0800637a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800637a:	b480      	push	{r7}
 800637c:	b085      	sub	sp, #20
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	bc80      	pop	{r7}
 800639e:	4770      	bx	lr

080063a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d01c      	beq.n	80063f4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d115      	bne.n	80063f0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2181      	movs	r1, #129	; 0x81
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 fcbd 	bl	8007d66 <USBD_LL_Transmit>

      return USBD_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	e002      	b.n	80063f6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e000      	b.n	80063f6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80063f4:	2302      	movs	r3, #2
  }
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006414:	2b00      	cmp	r3, #0
 8006416:	d017      	beq.n	8006448 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	7c1b      	ldrb	r3, [r3, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800642a:	2101      	movs	r1, #1
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 fcbd 	bl	8007dac <USBD_LL_PrepareReceive>
 8006432:	e007      	b.n	8006444 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800643a:	2340      	movs	r3, #64	; 0x40
 800643c:	2101      	movs	r1, #1
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f001 fcb4 	bl	8007dac <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006444:	2300      	movs	r3, #0
 8006446:	e000      	b.n	800644a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006448:	2302      	movs	r3, #2
  }
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	4613      	mov	r3, r2
 800645e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006466:	2302      	movs	r3, #2
 8006468:	e01a      	b.n	80064a0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	79fa      	ldrb	r2, [r7, #7]
 8006496:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f001 fb21 	bl	8007ae0 <USBD_LL_Init>

  return USBD_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d006      	beq.n	80064ca <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	73fb      	strb	r3, [r7, #15]
 80064c8:	e001      	b.n	80064ce <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80064ca:	2302      	movs	r3, #2
 80064cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bc80      	pop	{r7}
 80064d8:	4770      	bx	lr

080064da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 fb56 	bl	8007b94 <USBD_LL_Start>

  return USBD_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr

08006506 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	460b      	mov	r3, r1
 8006510:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006512:	2302      	movs	r3, #2
 8006514:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00c      	beq.n	800653a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	78fa      	ldrb	r2, [r7, #3]
 800652a:	4611      	mov	r1, r2
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	4798      	blx	r3
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800653a:	7bfb      	ldrb	r3, [r7, #15]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	78fa      	ldrb	r2, [r7, #3]
 800655a:	4611      	mov	r1, r2
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3

  return USBD_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b082      	sub	sp, #8
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fecb 	bl	8007318 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006590:	461a      	mov	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800659e:	f003 031f 	and.w	r3, r3, #31
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d00c      	beq.n	80065c0 <USBD_LL_SetupStage+0x56>
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d302      	bcc.n	80065b0 <USBD_LL_SetupStage+0x46>
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d010      	beq.n	80065d0 <USBD_LL_SetupStage+0x66>
 80065ae:	e017      	b.n	80065e0 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f9cb 	bl	8006954 <USBD_StdDevReq>
      break;
 80065be:	e01a      	b.n	80065f6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fa2d 	bl	8006a28 <USBD_StdItfReq>
      break;
 80065ce:	e012      	b.n	80065f6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fa6b 	bl	8006ab4 <USBD_StdEPReq>
      break;
 80065de:	e00a      	b.n	80065f6 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 fb30 	bl	8007c54 <USBD_LL_StallEP>
      break;
 80065f4:	bf00      	nop
  }

  return USBD_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	460b      	mov	r3, r1
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800660e:	7afb      	ldrb	r3, [r7, #11]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d14b      	bne.n	80066ac <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800661a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006622:	2b03      	cmp	r3, #3
 8006624:	d134      	bne.n	8006690 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	429a      	cmp	r2, r3
 8006630:	d919      	bls.n	8006666 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	1ad2      	subs	r2, r2, r3
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006648:	429a      	cmp	r2, r3
 800664a:	d203      	bcs.n	8006654 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006650:	b29b      	uxth	r3, r3
 8006652:	e002      	b.n	800665a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006658:	b29b      	uxth	r3, r3
 800665a:	461a      	mov	r2, r3
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 ff4c 	bl	80074fc <USBD_CtlContinueRx>
 8006664:	e038      	b.n	80066d8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006678:	2b03      	cmp	r3, #3
 800667a:	d105      	bne.n	8006688 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 ff49 	bl	8007520 <USBD_CtlSendStatus>
 800668e:	e023      	b.n	80066d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006696:	2b05      	cmp	r3, #5
 8006698:	d11e      	bne.n	80066d8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80066a2:	2100      	movs	r1, #0
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f001 fad5 	bl	8007c54 <USBD_LL_StallEP>
 80066aa:	e015      	b.n	80066d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00d      	beq.n	80066d4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d108      	bne.n	80066d4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	7afa      	ldrb	r2, [r7, #11]
 80066cc:	4611      	mov	r1, r2
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	4798      	blx	r3
 80066d2:	e001      	b.n	80066d8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80066d4:	2302      	movs	r3, #2
 80066d6:	e000      	b.n	80066da <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b086      	sub	sp, #24
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	460b      	mov	r3, r1
 80066ec:	607a      	str	r2, [r7, #4]
 80066ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d17f      	bne.n	80067f6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3314      	adds	r3, #20
 80066fa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006702:	2b02      	cmp	r3, #2
 8006704:	d15c      	bne.n	80067c0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	429a      	cmp	r2, r3
 8006710:	d915      	bls.n	800673e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	68da      	ldr	r2, [r3, #12]
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	1ad2      	subs	r2, r2, r3
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	b29b      	uxth	r3, r3
 8006726:	461a      	mov	r2, r3
 8006728:	6879      	ldr	r1, [r7, #4]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 feb6 	bl	800749c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006730:	2300      	movs	r3, #0
 8006732:	2200      	movs	r2, #0
 8006734:	2100      	movs	r1, #0
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f001 fb38 	bl	8007dac <USBD_LL_PrepareReceive>
 800673c:	e04e      	b.n	80067dc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	6912      	ldr	r2, [r2, #16]
 8006746:	fbb3 f1f2 	udiv	r1, r3, r2
 800674a:	fb02 f201 	mul.w	r2, r2, r1
 800674e:	1a9b      	subs	r3, r3, r2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d11c      	bne.n	800678e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800675c:	429a      	cmp	r2, r3
 800675e:	d316      	bcc.n	800678e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800676a:	429a      	cmp	r2, r3
 800676c:	d20f      	bcs.n	800678e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800676e:	2200      	movs	r2, #0
 8006770:	2100      	movs	r1, #0
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 fe92 	bl	800749c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006780:	2300      	movs	r3, #0
 8006782:	2200      	movs	r2, #0
 8006784:	2100      	movs	r1, #0
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f001 fb10 	bl	8007dac <USBD_LL_PrepareReceive>
 800678c:	e026      	b.n	80067dc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d105      	bne.n	80067b0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f001 fa4e 	bl	8007c54 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 fec4 	bl	8007546 <USBD_CtlReceiveStatus>
 80067be:	e00d      	b.n	80067dc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d004      	beq.n	80067d4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d103      	bne.n	80067dc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80067d4:	2180      	movs	r1, #128	; 0x80
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f001 fa3c 	bl	8007c54 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d11d      	bne.n	8006822 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff fe83 	bl	80064f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80067f4:	e015      	b.n	8006822 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00d      	beq.n	800681e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006808:	2b03      	cmp	r3, #3
 800680a:	d108      	bne.n	800681e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	7afa      	ldrb	r2, [r7, #11]
 8006816:	4611      	mov	r1, r2
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	4798      	blx	r3
 800681c:	e001      	b.n	8006822 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800681e:	2302      	movs	r3, #2
 8006820:	e000      	b.n	8006824 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006834:	2340      	movs	r3, #64	; 0x40
 8006836:	2200      	movs	r2, #0
 8006838:	2100      	movs	r1, #0
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f001 f9c5 	bl	8007bca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2240      	movs	r2, #64	; 0x40
 800684c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006850:	2340      	movs	r3, #64	; 0x40
 8006852:	2200      	movs	r2, #0
 8006854:	2180      	movs	r1, #128	; 0x80
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f001 f9b7 	bl	8007bca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2240      	movs	r2, #64	; 0x40
 8006866:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688c:	2b00      	cmp	r3, #0
 800688e:	d009      	beq.n	80068a4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6852      	ldr	r2, [r2, #4]
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	4611      	mov	r1, r2
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4798      	blx	r3
  }

  return USBD_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	460b      	mov	r3, r1
 80068b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	78fa      	ldrb	r2, [r7, #3]
 80068be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bc80      	pop	{r7}
 80068ca:	4770      	bx	lr

080068cc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2204      	movs	r2, #4
 80068e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr

080068f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006902:	2b04      	cmp	r3, #4
 8006904:	d105      	bne.n	8006912 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr

0800691e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b082      	sub	sp, #8
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692c:	2b03      	cmp	r3, #3
 800692e:	d10b      	bne.n	8006948 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d005      	beq.n	8006948 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800696a:	2b20      	cmp	r3, #32
 800696c:	d004      	beq.n	8006978 <USBD_StdDevReq+0x24>
 800696e:	2b40      	cmp	r3, #64	; 0x40
 8006970:	d002      	beq.n	8006978 <USBD_StdDevReq+0x24>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <USBD_StdDevReq+0x34>
 8006976:	e04c      	b.n	8006a12 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	4798      	blx	r3
      break;
 8006986:	e049      	b.n	8006a1c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	785b      	ldrb	r3, [r3, #1]
 800698c:	2b09      	cmp	r3, #9
 800698e:	d83a      	bhi.n	8006a06 <USBD_StdDevReq+0xb2>
 8006990:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <USBD_StdDevReq+0x44>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	080069e9 	.word	0x080069e9
 800699c:	080069fd 	.word	0x080069fd
 80069a0:	08006a07 	.word	0x08006a07
 80069a4:	080069f3 	.word	0x080069f3
 80069a8:	08006a07 	.word	0x08006a07
 80069ac:	080069cb 	.word	0x080069cb
 80069b0:	080069c1 	.word	0x080069c1
 80069b4:	08006a07 	.word	0x08006a07
 80069b8:	080069df 	.word	0x080069df
 80069bc:	080069d5 	.word	0x080069d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f9d4 	bl	8006d70 <USBD_GetDescriptor>
          break;
 80069c8:	e022      	b.n	8006a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fb37 	bl	8007040 <USBD_SetAddress>
          break;
 80069d2:	e01d      	b.n	8006a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fb74 	bl	80070c4 <USBD_SetConfig>
          break;
 80069dc:	e018      	b.n	8006a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fbfd 	bl	80071e0 <USBD_GetConfig>
          break;
 80069e6:	e013      	b.n	8006a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fc2c 	bl	8007248 <USBD_GetStatus>
          break;
 80069f0:	e00e      	b.n	8006a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fc5a 	bl	80072ae <USBD_SetFeature>
          break;
 80069fa:	e009      	b.n	8006a10 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fc69 	bl	80072d6 <USBD_ClrFeature>
          break;
 8006a04:	e004      	b.n	8006a10 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fcc1 	bl	8007390 <USBD_CtlError>
          break;
 8006a0e:	bf00      	nop
      }
      break;
 8006a10:	e004      	b.n	8006a1c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fcbb 	bl	8007390 <USBD_CtlError>
      break;
 8006a1a:	bf00      	nop
  }

  return ret;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop

08006a28 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a3e:	2b20      	cmp	r3, #32
 8006a40:	d003      	beq.n	8006a4a <USBD_StdItfReq+0x22>
 8006a42:	2b40      	cmp	r3, #64	; 0x40
 8006a44:	d001      	beq.n	8006a4a <USBD_StdItfReq+0x22>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d12a      	bne.n	8006aa0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a50:	3b01      	subs	r3, #1
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d81d      	bhi.n	8006a92 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	889b      	ldrh	r3, [r3, #4]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d813      	bhi.n	8006a88 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	88db      	ldrh	r3, [r3, #6]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d110      	bne.n	8006a9c <USBD_StdItfReq+0x74>
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10d      	bne.n	8006a9c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fd4d 	bl	8007520 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a86:	e009      	b.n	8006a9c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fc80 	bl	8007390 <USBD_CtlError>
          break;
 8006a90:	e004      	b.n	8006a9c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fc7b 	bl	8007390 <USBD_CtlError>
          break;
 8006a9a:	e000      	b.n	8006a9e <USBD_StdItfReq+0x76>
          break;
 8006a9c:	bf00      	nop
      }
      break;
 8006a9e:	e004      	b.n	8006aaa <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fc74 	bl	8007390 <USBD_CtlError>
      break;
 8006aa8:	bf00      	nop
  }

  return USBD_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	889b      	ldrh	r3, [r3, #4]
 8006ac6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	d004      	beq.n	8006ade <USBD_StdEPReq+0x2a>
 8006ad4:	2b40      	cmp	r3, #64	; 0x40
 8006ad6:	d002      	beq.n	8006ade <USBD_StdEPReq+0x2a>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d008      	beq.n	8006aee <USBD_StdEPReq+0x3a>
 8006adc:	e13d      	b.n	8006d5a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	4798      	blx	r3
      break;
 8006aec:	e13a      	b.n	8006d64 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d10a      	bne.n	8006b10 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	e12a      	b.n	8006d66 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	785b      	ldrb	r3, [r3, #1]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d03e      	beq.n	8006b96 <USBD_StdEPReq+0xe2>
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d002      	beq.n	8006b22 <USBD_StdEPReq+0x6e>
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d070      	beq.n	8006c02 <USBD_StdEPReq+0x14e>
 8006b20:	e115      	b.n	8006d4e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d002      	beq.n	8006b32 <USBD_StdEPReq+0x7e>
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d015      	beq.n	8006b5c <USBD_StdEPReq+0xa8>
 8006b30:	e02b      	b.n	8006b8a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b32:	7bbb      	ldrb	r3, [r7, #14]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00c      	beq.n	8006b52 <USBD_StdEPReq+0x9e>
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	2b80      	cmp	r3, #128	; 0x80
 8006b3c:	d009      	beq.n	8006b52 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 f886 	bl	8007c54 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b48:	2180      	movs	r1, #128	; 0x80
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 f882 	bl	8007c54 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b50:	e020      	b.n	8006b94 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fc1b 	bl	8007390 <USBD_CtlError>
              break;
 8006b5a:	e01b      	b.n	8006b94 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	885b      	ldrh	r3, [r3, #2]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10e      	bne.n	8006b82 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006b64:	7bbb      	ldrb	r3, [r7, #14]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00b      	beq.n	8006b82 <USBD_StdEPReq+0xce>
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	2b80      	cmp	r3, #128	; 0x80
 8006b6e:	d008      	beq.n	8006b82 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	88db      	ldrh	r3, [r3, #6]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d104      	bne.n	8006b82 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f869 	bl	8007c54 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fccc 	bl	8007520 <USBD_CtlSendStatus>

              break;
 8006b88:	e004      	b.n	8006b94 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fbff 	bl	8007390 <USBD_CtlError>
              break;
 8006b92:	bf00      	nop
          }
          break;
 8006b94:	e0e0      	b.n	8006d58 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d002      	beq.n	8006ba6 <USBD_StdEPReq+0xf2>
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d015      	beq.n	8006bd0 <USBD_StdEPReq+0x11c>
 8006ba4:	e026      	b.n	8006bf4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00c      	beq.n	8006bc6 <USBD_StdEPReq+0x112>
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	2b80      	cmp	r3, #128	; 0x80
 8006bb0:	d009      	beq.n	8006bc6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006bb2:	7bbb      	ldrb	r3, [r7, #14]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f001 f84c 	bl	8007c54 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006bbc:	2180      	movs	r1, #128	; 0x80
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 f848 	bl	8007c54 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bc4:	e01c      	b.n	8006c00 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006bc6:	6839      	ldr	r1, [r7, #0]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fbe1 	bl	8007390 <USBD_CtlError>
              break;
 8006bce:	e017      	b.n	8006c00 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	885b      	ldrh	r3, [r3, #2]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d112      	bne.n	8006bfe <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006bd8:	7bbb      	ldrb	r3, [r7, #14]
 8006bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d004      	beq.n	8006bec <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006be2:	7bbb      	ldrb	r3, [r7, #14]
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 f853 	bl	8007c92 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fc97 	bl	8007520 <USBD_CtlSendStatus>
              }
              break;
 8006bf2:	e004      	b.n	8006bfe <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fbca 	bl	8007390 <USBD_CtlError>
              break;
 8006bfc:	e000      	b.n	8006c00 <USBD_StdEPReq+0x14c>
              break;
 8006bfe:	bf00      	nop
          }
          break;
 8006c00:	e0aa      	b.n	8006d58 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d002      	beq.n	8006c12 <USBD_StdEPReq+0x15e>
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d032      	beq.n	8006c76 <USBD_StdEPReq+0x1c2>
 8006c10:	e097      	b.n	8006d42 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d007      	beq.n	8006c28 <USBD_StdEPReq+0x174>
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	2b80      	cmp	r3, #128	; 0x80
 8006c1c:	d004      	beq.n	8006c28 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fbb5 	bl	8007390 <USBD_CtlError>
                break;
 8006c26:	e091      	b.n	8006d4c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	da0b      	bge.n	8006c48 <USBD_StdEPReq+0x194>
 8006c30:	7bbb      	ldrb	r3, [r7, #14]
 8006c32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	3310      	adds	r3, #16
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	4413      	add	r3, r2
 8006c44:	3304      	adds	r3, #4
 8006c46:	e00b      	b.n	8006c60 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c4e:	4613      	mov	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	3304      	adds	r3, #4
 8006c60:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fbf8 	bl	8007464 <USBD_CtlSendData>
              break;
 8006c74:	e06a      	b.n	8006d4c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	da11      	bge.n	8006ca2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	f003 020f 	and.w	r2, r3, #15
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	440b      	add	r3, r1
 8006c90:	3318      	adds	r3, #24
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d117      	bne.n	8006cc8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fb78 	bl	8007390 <USBD_CtlError>
                  break;
 8006ca0:	e054      	b.n	8006d4c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	f003 020f 	and.w	r2, r3, #15
 8006ca8:	6879      	ldr	r1, [r7, #4]
 8006caa:	4613      	mov	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d104      	bne.n	8006cc8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fb65 	bl	8007390 <USBD_CtlError>
                  break;
 8006cc6:	e041      	b.n	8006d4c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	da0b      	bge.n	8006ce8 <USBD_StdEPReq+0x234>
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	3310      	adds	r3, #16
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	e00b      	b.n	8006d00 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	3304      	adds	r3, #4
 8006d00:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <USBD_StdEPReq+0x25a>
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d103      	bne.n	8006d16 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	e00e      	b.n	8006d34 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006d16:	7bbb      	ldrb	r3, [r7, #14]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 ffd8 	bl	8007cd0 <USBD_LL_IsStallEP>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	e002      	b.n	8006d34 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2202      	movs	r2, #2
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fb92 	bl	8007464 <USBD_CtlSendData>
              break;
 8006d40:	e004      	b.n	8006d4c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fb23 	bl	8007390 <USBD_CtlError>
              break;
 8006d4a:	bf00      	nop
          }
          break;
 8006d4c:	e004      	b.n	8006d58 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fb1d 	bl	8007390 <USBD_CtlError>
          break;
 8006d56:	bf00      	nop
      }
      break;
 8006d58:	e004      	b.n	8006d64 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fb17 	bl	8007390 <USBD_CtlError>
      break;
 8006d62:	bf00      	nop
  }

  return ret;
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	885b      	ldrh	r3, [r3, #2]
 8006d8a:	0a1b      	lsrs	r3, r3, #8
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	2b06      	cmp	r3, #6
 8006d92:	f200 8128 	bhi.w	8006fe6 <USBD_GetDescriptor+0x276>
 8006d96:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <USBD_GetDescriptor+0x2c>)
 8006d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9c:	08006db9 	.word	0x08006db9
 8006da0:	08006dd1 	.word	0x08006dd1
 8006da4:	08006e11 	.word	0x08006e11
 8006da8:	08006fe7 	.word	0x08006fe7
 8006dac:	08006fe7 	.word	0x08006fe7
 8006db0:	08006f87 	.word	0x08006f87
 8006db4:	08006fb3 	.word	0x08006fb3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	7c12      	ldrb	r2, [r2, #16]
 8006dc4:	f107 0108 	add.w	r1, r7, #8
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4798      	blx	r3
 8006dcc:	60f8      	str	r0, [r7, #12]
      break;
 8006dce:	e112      	b.n	8006ff6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	7c1b      	ldrb	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10d      	bne.n	8006df4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	f107 0208 	add.w	r2, r7, #8
 8006de4:	4610      	mov	r0, r2
 8006de6:	4798      	blx	r3
 8006de8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3301      	adds	r3, #1
 8006dee:	2202      	movs	r2, #2
 8006df0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006df2:	e100      	b.n	8006ff6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	f107 0208 	add.w	r2, r7, #8
 8006e00:	4610      	mov	r0, r2
 8006e02:	4798      	blx	r3
 8006e04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	701a      	strb	r2, [r3, #0]
      break;
 8006e0e:	e0f2      	b.n	8006ff6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	885b      	ldrh	r3, [r3, #2]
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b05      	cmp	r3, #5
 8006e18:	f200 80ac 	bhi.w	8006f74 <USBD_GetDescriptor+0x204>
 8006e1c:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <USBD_GetDescriptor+0xb4>)
 8006e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e22:	bf00      	nop
 8006e24:	08006e3d 	.word	0x08006e3d
 8006e28:	08006e71 	.word	0x08006e71
 8006e2c:	08006ea5 	.word	0x08006ea5
 8006e30:	08006ed9 	.word	0x08006ed9
 8006e34:	08006f0d 	.word	0x08006f0d
 8006e38:	08006f41 	.word	0x08006f41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00b      	beq.n	8006e60 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	7c12      	ldrb	r2, [r2, #16]
 8006e54:	f107 0108 	add.w	r1, r7, #8
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4798      	blx	r3
 8006e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e5e:	e091      	b.n	8006f84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fa94 	bl	8007390 <USBD_CtlError>
            err++;
 8006e68:	7afb      	ldrb	r3, [r7, #11]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e6e:	e089      	b.n	8006f84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00b      	beq.n	8006e94 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	7c12      	ldrb	r2, [r2, #16]
 8006e88:	f107 0108 	add.w	r1, r7, #8
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	4798      	blx	r3
 8006e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e92:	e077      	b.n	8006f84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fa7a 	bl	8007390 <USBD_CtlError>
            err++;
 8006e9c:	7afb      	ldrb	r3, [r7, #11]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ea2:	e06f      	b.n	8006f84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	7c12      	ldrb	r2, [r2, #16]
 8006ebc:	f107 0108 	add.w	r1, r7, #8
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4798      	blx	r3
 8006ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ec6:	e05d      	b.n	8006f84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa60 	bl	8007390 <USBD_CtlError>
            err++;
 8006ed0:	7afb      	ldrb	r3, [r7, #11]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ed6:	e055      	b.n	8006f84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00b      	beq.n	8006efc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	7c12      	ldrb	r2, [r2, #16]
 8006ef0:	f107 0108 	add.w	r1, r7, #8
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
 8006ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006efa:	e043      	b.n	8006f84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fa46 	bl	8007390 <USBD_CtlError>
            err++;
 8006f04:	7afb      	ldrb	r3, [r7, #11]
 8006f06:	3301      	adds	r3, #1
 8006f08:	72fb      	strb	r3, [r7, #11]
          break;
 8006f0a:	e03b      	b.n	8006f84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	7c12      	ldrb	r2, [r2, #16]
 8006f24:	f107 0108 	add.w	r1, r7, #8
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
 8006f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f2e:	e029      	b.n	8006f84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fa2c 	bl	8007390 <USBD_CtlError>
            err++;
 8006f38:	7afb      	ldrb	r3, [r7, #11]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f3e:	e021      	b.n	8006f84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00b      	beq.n	8006f64 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	7c12      	ldrb	r2, [r2, #16]
 8006f58:	f107 0108 	add.w	r1, r7, #8
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4798      	blx	r3
 8006f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f62:	e00f      	b.n	8006f84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fa12 	bl	8007390 <USBD_CtlError>
            err++;
 8006f6c:	7afb      	ldrb	r3, [r7, #11]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	72fb      	strb	r3, [r7, #11]
          break;
 8006f72:	e007      	b.n	8006f84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fa0a 	bl	8007390 <USBD_CtlError>
          err++;
 8006f7c:	7afb      	ldrb	r3, [r7, #11]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006f82:	e038      	b.n	8006ff6 <USBD_GetDescriptor+0x286>
 8006f84:	e037      	b.n	8006ff6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	7c1b      	ldrb	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f96:	f107 0208 	add.w	r2, r7, #8
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	4798      	blx	r3
 8006f9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fa0:	e029      	b.n	8006ff6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f9f3 	bl	8007390 <USBD_CtlError>
        err++;
 8006faa:	7afb      	ldrb	r3, [r7, #11]
 8006fac:	3301      	adds	r3, #1
 8006fae:	72fb      	strb	r3, [r7, #11]
      break;
 8006fb0:	e021      	b.n	8006ff6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	7c1b      	ldrb	r3, [r3, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10d      	bne.n	8006fd6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc2:	f107 0208 	add.w	r2, r7, #8
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	4798      	blx	r3
 8006fca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	2207      	movs	r2, #7
 8006fd2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fd4:	e00f      	b.n	8006ff6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f9d9 	bl	8007390 <USBD_CtlError>
        err++;
 8006fde:	7afb      	ldrb	r3, [r7, #11]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	72fb      	strb	r3, [r7, #11]
      break;
 8006fe4:	e007      	b.n	8006ff6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f9d1 	bl	8007390 <USBD_CtlError>
      err++;
 8006fee:	7afb      	ldrb	r3, [r7, #11]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ff4:	bf00      	nop
  }

  if (err != 0U)
 8006ff6:	7afb      	ldrb	r3, [r7, #11]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d11c      	bne.n	8007036 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006ffc:	893b      	ldrh	r3, [r7, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d011      	beq.n	8007026 <USBD_GetDescriptor+0x2b6>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	88db      	ldrh	r3, [r3, #6]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00d      	beq.n	8007026 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	88da      	ldrh	r2, [r3, #6]
 800700e:	893b      	ldrh	r3, [r7, #8]
 8007010:	4293      	cmp	r3, r2
 8007012:	bf28      	it	cs
 8007014:	4613      	movcs	r3, r2
 8007016:	b29b      	uxth	r3, r3
 8007018:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800701a:	893b      	ldrh	r3, [r7, #8]
 800701c:	461a      	mov	r2, r3
 800701e:	68f9      	ldr	r1, [r7, #12]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fa1f 	bl	8007464 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	88db      	ldrh	r3, [r3, #6]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d104      	bne.n	8007038 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fa76 	bl	8007520 <USBD_CtlSendStatus>
 8007034:	e000      	b.n	8007038 <USBD_GetDescriptor+0x2c8>
    return;
 8007036:	bf00      	nop
    }
  }
}
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop

08007040 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	889b      	ldrh	r3, [r3, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d130      	bne.n	80070b4 <USBD_SetAddress+0x74>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	88db      	ldrh	r3, [r3, #6]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d12c      	bne.n	80070b4 <USBD_SetAddress+0x74>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	885b      	ldrh	r3, [r3, #2]
 800705e:	2b7f      	cmp	r3, #127	; 0x7f
 8007060:	d828      	bhi.n	80070b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	885b      	ldrh	r3, [r3, #2]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800706c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007074:	2b03      	cmp	r3, #3
 8007076:	d104      	bne.n	8007082 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f988 	bl	8007390 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007080:	e01c      	b.n	80070bc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	7bfa      	ldrb	r2, [r7, #15]
 8007086:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fe4a 	bl	8007d28 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fa43 	bl	8007520 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d004      	beq.n	80070aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a8:	e008      	b.n	80070bc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b2:	e003      	b.n	80070bc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f96a 	bl	8007390 <USBD_CtlError>
  }
}
 80070bc:	bf00      	nop
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	885b      	ldrh	r3, [r3, #2]
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	4b41      	ldr	r3, [pc, #260]	; (80071dc <USBD_SetConfig+0x118>)
 80070d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070d8:	4b40      	ldr	r3, [pc, #256]	; (80071dc <USBD_SetConfig+0x118>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d904      	bls.n	80070ea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f954 	bl	8007390 <USBD_CtlError>
 80070e8:	e075      	b.n	80071d6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d002      	beq.n	80070fa <USBD_SetConfig+0x36>
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d023      	beq.n	8007140 <USBD_SetConfig+0x7c>
 80070f8:	e062      	b.n	80071c0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80070fa:	4b38      	ldr	r3, [pc, #224]	; (80071dc <USBD_SetConfig+0x118>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d01a      	beq.n	8007138 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007102:	4b36      	ldr	r3, [pc, #216]	; (80071dc <USBD_SetConfig+0x118>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2203      	movs	r2, #3
 8007110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007114:	4b31      	ldr	r3, [pc, #196]	; (80071dc <USBD_SetConfig+0x118>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff f9f3 	bl	8006506 <USBD_SetClassConfig>
 8007120:	4603      	mov	r3, r0
 8007122:	2b02      	cmp	r3, #2
 8007124:	d104      	bne.n	8007130 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f931 	bl	8007390 <USBD_CtlError>
            return;
 800712e:	e052      	b.n	80071d6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f9f5 	bl	8007520 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007136:	e04e      	b.n	80071d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f9f1 	bl	8007520 <USBD_CtlSendStatus>
        break;
 800713e:	e04a      	b.n	80071d6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007140:	4b26      	ldr	r3, [pc, #152]	; (80071dc <USBD_SetConfig+0x118>)
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d112      	bne.n	800716e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007150:	4b22      	ldr	r3, [pc, #136]	; (80071dc <USBD_SetConfig+0x118>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	461a      	mov	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800715a:	4b20      	ldr	r3, [pc, #128]	; (80071dc <USBD_SetConfig+0x118>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff f9ef 	bl	8006544 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f9da 	bl	8007520 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800716c:	e033      	b.n	80071d6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800716e:	4b1b      	ldr	r3, [pc, #108]	; (80071dc <USBD_SetConfig+0x118>)
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	429a      	cmp	r2, r3
 800717a:	d01d      	beq.n	80071b8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	b2db      	uxtb	r3, r3
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff f9dd 	bl	8006544 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800718a:	4b14      	ldr	r3, [pc, #80]	; (80071dc <USBD_SetConfig+0x118>)
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	461a      	mov	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007194:	4b11      	ldr	r3, [pc, #68]	; (80071dc <USBD_SetConfig+0x118>)
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff f9b3 	bl	8006506 <USBD_SetClassConfig>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d104      	bne.n	80071b0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f8f1 	bl	8007390 <USBD_CtlError>
            return;
 80071ae:	e012      	b.n	80071d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f9b5 	bl	8007520 <USBD_CtlSendStatus>
        break;
 80071b6:	e00e      	b.n	80071d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f9b1 	bl	8007520 <USBD_CtlSendStatus>
        break;
 80071be:	e00a      	b.n	80071d6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f8e4 	bl	8007390 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80071c8:	4b04      	ldr	r3, [pc, #16]	; (80071dc <USBD_SetConfig+0x118>)
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7ff f9b8 	bl	8006544 <USBD_ClrClassConfig>
        break;
 80071d4:	bf00      	nop
    }
  }
}
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	2000019c 	.word	0x2000019c

080071e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	88db      	ldrh	r3, [r3, #6]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d004      	beq.n	80071fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f8cb 	bl	8007390 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071fa:	e021      	b.n	8007240 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007202:	2b01      	cmp	r3, #1
 8007204:	db17      	blt.n	8007236 <USBD_GetConfig+0x56>
 8007206:	2b02      	cmp	r3, #2
 8007208:	dd02      	ble.n	8007210 <USBD_GetConfig+0x30>
 800720a:	2b03      	cmp	r3, #3
 800720c:	d00b      	beq.n	8007226 <USBD_GetConfig+0x46>
 800720e:	e012      	b.n	8007236 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3308      	adds	r3, #8
 800721a:	2201      	movs	r2, #1
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f920 	bl	8007464 <USBD_CtlSendData>
        break;
 8007224:	e00c      	b.n	8007240 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3304      	adds	r3, #4
 800722a:	2201      	movs	r2, #1
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f918 	bl	8007464 <USBD_CtlSendData>
        break;
 8007234:	e004      	b.n	8007240 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f8a9 	bl	8007390 <USBD_CtlError>
        break;
 800723e:	bf00      	nop
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007258:	3b01      	subs	r3, #1
 800725a:	2b02      	cmp	r3, #2
 800725c:	d81e      	bhi.n	800729c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	88db      	ldrh	r3, [r3, #6]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d004      	beq.n	8007270 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f891 	bl	8007390 <USBD_CtlError>
        break;
 800726e:	e01a      	b.n	80072a6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800727c:	2b00      	cmp	r3, #0
 800727e:	d005      	beq.n	800728c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f043 0202 	orr.w	r2, r3, #2
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	330c      	adds	r3, #12
 8007290:	2202      	movs	r2, #2
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f8e5 	bl	8007464 <USBD_CtlSendData>
      break;
 800729a:	e004      	b.n	80072a6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f876 	bl	8007390 <USBD_CtlError>
      break;
 80072a4:	bf00      	nop
  }
}
 80072a6:	bf00      	nop
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	885b      	ldrh	r3, [r3, #2]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d106      	bne.n	80072ce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f929 	bl	8007520 <USBD_CtlSendStatus>
  }
}
 80072ce:	bf00      	nop
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e6:	3b01      	subs	r3, #1
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d80b      	bhi.n	8007304 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	885b      	ldrh	r3, [r3, #2]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d10c      	bne.n	800730e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f90f 	bl	8007520 <USBD_CtlSendStatus>
      }
      break;
 8007302:	e004      	b.n	800730e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f842 	bl	8007390 <USBD_CtlError>
      break;
 800730c:	e000      	b.n	8007310 <USBD_ClrFeature+0x3a>
      break;
 800730e:	bf00      	nop
  }
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781a      	ldrb	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	785a      	ldrb	r2, [r3, #1]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	3302      	adds	r3, #2
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	b29a      	uxth	r2, r3
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	3303      	adds	r3, #3
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	b29b      	uxth	r3, r3
 8007342:	021b      	lsls	r3, r3, #8
 8007344:	b29b      	uxth	r3, r3
 8007346:	4413      	add	r3, r2
 8007348:	b29a      	uxth	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	3304      	adds	r3, #4
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	b29a      	uxth	r2, r3
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	3305      	adds	r3, #5
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	b29b      	uxth	r3, r3
 800735e:	021b      	lsls	r3, r3, #8
 8007360:	b29b      	uxth	r3, r3
 8007362:	4413      	add	r3, r2
 8007364:	b29a      	uxth	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	3306      	adds	r3, #6
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	b29a      	uxth	r2, r3
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	3307      	adds	r3, #7
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	b29b      	uxth	r3, r3
 800737a:	021b      	lsls	r3, r3, #8
 800737c:	b29b      	uxth	r3, r3
 800737e:	4413      	add	r3, r2
 8007380:	b29a      	uxth	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	80da      	strh	r2, [r3, #6]

}
 8007386:	bf00      	nop
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr

08007390 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800739a:	2180      	movs	r1, #128	; 0x80
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fc59 	bl	8007c54 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80073a2:	2100      	movs	r1, #0
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fc55 	bl	8007c54 <USBD_LL_StallEP>
}
 80073aa:	bf00      	nop
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b086      	sub	sp, #24
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d032      	beq.n	800742e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 f834 	bl	8007436 <USBD_GetLen>
 80073ce:	4603      	mov	r3, r0
 80073d0:	3301      	adds	r3, #1
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	005b      	lsls	r3, r3, #1
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	75fa      	strb	r2, [r7, #23]
 80073e2:	461a      	mov	r2, r3
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	4413      	add	r3, r2
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	7812      	ldrb	r2, [r2, #0]
 80073ec:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	75fa      	strb	r2, [r7, #23]
 80073f4:	461a      	mov	r2, r3
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	4413      	add	r3, r2
 80073fa:	2203      	movs	r2, #3
 80073fc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80073fe:	e012      	b.n	8007426 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	60fa      	str	r2, [r7, #12]
 8007406:	7dfa      	ldrb	r2, [r7, #23]
 8007408:	1c51      	adds	r1, r2, #1
 800740a:	75f9      	strb	r1, [r7, #23]
 800740c:	4611      	mov	r1, r2
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	440a      	add	r2, r1
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	75fa      	strb	r2, [r7, #23]
 800741c:	461a      	mov	r2, r3
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	4413      	add	r3, r2
 8007422:	2200      	movs	r2, #0
 8007424:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e8      	bne.n	8007400 <USBD_GetString+0x4e>
    }
  }
}
 800742e:	bf00      	nop
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007442:	e005      	b.n	8007450 <USBD_GetLen+0x1a>
  {
    len++;
 8007444:	7bfb      	ldrb	r3, [r7, #15]
 8007446:	3301      	adds	r3, #1
 8007448:	73fb      	strb	r3, [r7, #15]
    buf++;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3301      	adds	r3, #1
 800744e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1f5      	bne.n	8007444 <USBD_GetLen+0xe>
  }

  return len;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	bc80      	pop	{r7}
 8007462:	4770      	bx	lr

08007464 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2202      	movs	r2, #2
 8007476:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800747a:	88fa      	ldrh	r2, [r7, #6]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007480:	88fa      	ldrh	r2, [r7, #6]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007486:	88fb      	ldrh	r3, [r7, #6]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	2100      	movs	r1, #0
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 fc6a 	bl	8007d66 <USBD_LL_Transmit>

  return USBD_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	4613      	mov	r3, r2
 80074a8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074aa:	88fb      	ldrh	r3, [r7, #6]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	2100      	movs	r1, #0
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 fc58 	bl	8007d66 <USBD_LL_Transmit>

  return USBD_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	4613      	mov	r3, r2
 80074cc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2203      	movs	r2, #3
 80074d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80074d6:	88fa      	ldrh	r2, [r7, #6]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80074de:	88fa      	ldrh	r2, [r7, #6]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074e6:	88fb      	ldrh	r3, [r7, #6]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	2100      	movs	r1, #0
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fc5d 	bl	8007dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	4613      	mov	r3, r2
 8007508:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800750a:	88fb      	ldrh	r3, [r7, #6]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	2100      	movs	r1, #0
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 fc4b 	bl	8007dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2204      	movs	r2, #4
 800752c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007530:	2300      	movs	r3, #0
 8007532:	2200      	movs	r2, #0
 8007534:	2100      	movs	r1, #0
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fc15 	bl	8007d66 <USBD_LL_Transmit>

  return USBD_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b082      	sub	sp, #8
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2205      	movs	r2, #5
 8007552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007556:	2300      	movs	r3, #0
 8007558:	2200      	movs	r2, #0
 800755a:	2100      	movs	r1, #0
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fc25 	bl	8007dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007570:	2200      	movs	r2, #0
 8007572:	4912      	ldr	r1, [pc, #72]	; (80075bc <MX_USB_DEVICE_Init+0x50>)
 8007574:	4812      	ldr	r0, [pc, #72]	; (80075c0 <MX_USB_DEVICE_Init+0x54>)
 8007576:	f7fe ff6c 	bl	8006452 <USBD_Init>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007580:	f7f9 fa60 	bl	8000a44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007584:	490f      	ldr	r1, [pc, #60]	; (80075c4 <MX_USB_DEVICE_Init+0x58>)
 8007586:	480e      	ldr	r0, [pc, #56]	; (80075c0 <MX_USB_DEVICE_Init+0x54>)
 8007588:	f7fe ff8e 	bl	80064a8 <USBD_RegisterClass>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007592:	f7f9 fa57 	bl	8000a44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007596:	490c      	ldr	r1, [pc, #48]	; (80075c8 <MX_USB_DEVICE_Init+0x5c>)
 8007598:	4809      	ldr	r0, [pc, #36]	; (80075c0 <MX_USB_DEVICE_Init+0x54>)
 800759a:	f7fe febf 	bl	800631c <USBD_CDC_RegisterInterface>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80075a4:	f7f9 fa4e 	bl	8000a44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075a8:	4805      	ldr	r0, [pc, #20]	; (80075c0 <MX_USB_DEVICE_Init+0x54>)
 80075aa:	f7fe ff96 	bl	80064da <USBD_Start>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80075b4:	f7f9 fa46 	bl	8000a44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075b8:	bf00      	nop
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	2000012c 	.word	0x2000012c
 80075c0:	2000041c 	.word	0x2000041c
 80075c4:	20000018 	.word	0x20000018
 80075c8:	2000011c 	.word	0x2000011c

080075cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80075d0:	2200      	movs	r2, #0
 80075d2:	4905      	ldr	r1, [pc, #20]	; (80075e8 <CDC_Init_FS+0x1c>)
 80075d4:	4805      	ldr	r0, [pc, #20]	; (80075ec <CDC_Init_FS+0x20>)
 80075d6:	f7fe feb7 	bl	8006348 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80075da:	4905      	ldr	r1, [pc, #20]	; (80075f0 <CDC_Init_FS+0x24>)
 80075dc:	4803      	ldr	r0, [pc, #12]	; (80075ec <CDC_Init_FS+0x20>)
 80075de:	f7fe fecc 	bl	800637a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80075e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20000ac8 	.word	0x20000ac8
 80075ec:	2000041c 	.word	0x2000041c
 80075f0:	200006e0 	.word	0x200006e0

080075f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80075f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bc80      	pop	{r7}
 8007600:	4770      	bx	lr
	...

08007604 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	6039      	str	r1, [r7, #0]
 800760e:	71fb      	strb	r3, [r7, #7]
 8007610:	4613      	mov	r3, r2
 8007612:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	2b23      	cmp	r3, #35	; 0x23
 8007618:	d84a      	bhi.n	80076b0 <CDC_Control_FS+0xac>
 800761a:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <CDC_Control_FS+0x1c>)
 800761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007620:	080076b1 	.word	0x080076b1
 8007624:	080076b1 	.word	0x080076b1
 8007628:	080076b1 	.word	0x080076b1
 800762c:	080076b1 	.word	0x080076b1
 8007630:	080076b1 	.word	0x080076b1
 8007634:	080076b1 	.word	0x080076b1
 8007638:	080076b1 	.word	0x080076b1
 800763c:	080076b1 	.word	0x080076b1
 8007640:	080076b1 	.word	0x080076b1
 8007644:	080076b1 	.word	0x080076b1
 8007648:	080076b1 	.word	0x080076b1
 800764c:	080076b1 	.word	0x080076b1
 8007650:	080076b1 	.word	0x080076b1
 8007654:	080076b1 	.word	0x080076b1
 8007658:	080076b1 	.word	0x080076b1
 800765c:	080076b1 	.word	0x080076b1
 8007660:	080076b1 	.word	0x080076b1
 8007664:	080076b1 	.word	0x080076b1
 8007668:	080076b1 	.word	0x080076b1
 800766c:	080076b1 	.word	0x080076b1
 8007670:	080076b1 	.word	0x080076b1
 8007674:	080076b1 	.word	0x080076b1
 8007678:	080076b1 	.word	0x080076b1
 800767c:	080076b1 	.word	0x080076b1
 8007680:	080076b1 	.word	0x080076b1
 8007684:	080076b1 	.word	0x080076b1
 8007688:	080076b1 	.word	0x080076b1
 800768c:	080076b1 	.word	0x080076b1
 8007690:	080076b1 	.word	0x080076b1
 8007694:	080076b1 	.word	0x080076b1
 8007698:	080076b1 	.word	0x080076b1
 800769c:	080076b1 	.word	0x080076b1
 80076a0:	080076b1 	.word	0x080076b1
 80076a4:	080076b1 	.word	0x080076b1
 80076a8:	080076b1 	.word	0x080076b1
 80076ac:	080076b1 	.word	0x080076b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80076b0:	bf00      	nop
  }

  return (USBD_OK);
 80076b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop

080076c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_Transmit_FS(Buf, *Len);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f80e 	bl	80076f4 <CDC_Transmit_FS>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80076d8:	6879      	ldr	r1, [r7, #4]
 80076da:	4805      	ldr	r0, [pc, #20]	; (80076f0 <CDC_Receive_FS+0x30>)
 80076dc:	f7fe fe4d 	bl	800637a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80076e0:	4803      	ldr	r0, [pc, #12]	; (80076f0 <CDC_Receive_FS+0x30>)
 80076e2:	f7fe fe8c 	bl	80063fe <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80076e6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	2000041c 	.word	0x2000041c

080076f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	460b      	mov	r3, r1
 80076fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007704:	4b0d      	ldr	r3, [pc, #52]	; (800773c <CDC_Transmit_FS+0x48>)
 8007706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007716:	2301      	movs	r3, #1
 8007718:	e00b      	b.n	8007732 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800771a:	887b      	ldrh	r3, [r7, #2]
 800771c:	461a      	mov	r2, r3
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	4806      	ldr	r0, [pc, #24]	; (800773c <CDC_Transmit_FS+0x48>)
 8007722:	f7fe fe11 	bl	8006348 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007726:	4805      	ldr	r0, [pc, #20]	; (800773c <CDC_Transmit_FS+0x48>)
 8007728:	f7fe fe3a 	bl	80063a0 <USBD_CDC_TransmitPacket>
 800772c:	4603      	mov	r3, r0
 800772e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007730:	7bfb      	ldrb	r3, [r7, #15]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	2000041c 	.word	0x2000041c

08007740 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	6039      	str	r1, [r7, #0]
 800774a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2212      	movs	r2, #18
 8007750:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007752:	4b03      	ldr	r3, [pc, #12]	; (8007760 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007754:	4618      	mov	r0, r3
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	bc80      	pop	{r7}
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	20000148 	.word	0x20000148

08007764 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	4603      	mov	r3, r0
 800776c:	6039      	str	r1, [r7, #0]
 800776e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2204      	movs	r2, #4
 8007774:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007776:	4b03      	ldr	r3, [pc, #12]	; (8007784 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	2000015c 	.word	0x2000015c

08007788 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	4603      	mov	r3, r0
 8007790:	6039      	str	r1, [r7, #0]
 8007792:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d105      	bne.n	80077a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	4907      	ldr	r1, [pc, #28]	; (80077bc <USBD_FS_ProductStrDescriptor+0x34>)
 800779e:	4808      	ldr	r0, [pc, #32]	; (80077c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80077a0:	f7ff fe07 	bl	80073b2 <USBD_GetString>
 80077a4:	e004      	b.n	80077b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	4904      	ldr	r1, [pc, #16]	; (80077bc <USBD_FS_ProductStrDescriptor+0x34>)
 80077aa:	4805      	ldr	r0, [pc, #20]	; (80077c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80077ac:	f7ff fe01 	bl	80073b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077b0:	4b02      	ldr	r3, [pc, #8]	; (80077bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20000eb0 	.word	0x20000eb0
 80077c0:	08007ff0 	.word	0x08007ff0

080077c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4603      	mov	r3, r0
 80077cc:	6039      	str	r1, [r7, #0]
 80077ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	4904      	ldr	r1, [pc, #16]	; (80077e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80077d4:	4804      	ldr	r0, [pc, #16]	; (80077e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80077d6:	f7ff fdec 	bl	80073b2 <USBD_GetString>
  return USBD_StrDesc;
 80077da:	4b02      	ldr	r3, [pc, #8]	; (80077e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	20000eb0 	.word	0x20000eb0
 80077e8:	08008008 	.word	0x08008008

080077ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	6039      	str	r1, [r7, #0]
 80077f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	221a      	movs	r2, #26
 80077fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80077fe:	f000 f843 	bl	8007888 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007802:	4b02      	ldr	r3, [pc, #8]	; (800780c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	20000160 	.word	0x20000160

08007810 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	4603      	mov	r3, r0
 8007818:	6039      	str	r1, [r7, #0]
 800781a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800781c:	79fb      	ldrb	r3, [r7, #7]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d105      	bne.n	800782e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	4907      	ldr	r1, [pc, #28]	; (8007844 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007826:	4808      	ldr	r0, [pc, #32]	; (8007848 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007828:	f7ff fdc3 	bl	80073b2 <USBD_GetString>
 800782c:	e004      	b.n	8007838 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	4904      	ldr	r1, [pc, #16]	; (8007844 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007832:	4805      	ldr	r0, [pc, #20]	; (8007848 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007834:	f7ff fdbd 	bl	80073b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007838:	4b02      	ldr	r3, [pc, #8]	; (8007844 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	20000eb0 	.word	0x20000eb0
 8007848:	0800801c 	.word	0x0800801c

0800784c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	4603      	mov	r3, r0
 8007854:	6039      	str	r1, [r7, #0]
 8007856:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007858:	79fb      	ldrb	r3, [r7, #7]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d105      	bne.n	800786a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	4907      	ldr	r1, [pc, #28]	; (8007880 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007862:	4808      	ldr	r0, [pc, #32]	; (8007884 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007864:	f7ff fda5 	bl	80073b2 <USBD_GetString>
 8007868:	e004      	b.n	8007874 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	4904      	ldr	r1, [pc, #16]	; (8007880 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800786e:	4805      	ldr	r0, [pc, #20]	; (8007884 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007870:	f7ff fd9f 	bl	80073b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007874:	4b02      	ldr	r3, [pc, #8]	; (8007880 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	20000eb0 	.word	0x20000eb0
 8007884:	08008028 	.word	0x08008028

08007888 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800788e:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <Get_SerialNum+0x44>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007894:	4b0e      	ldr	r3, [pc, #56]	; (80078d0 <Get_SerialNum+0x48>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800789a:	4b0e      	ldr	r3, [pc, #56]	; (80078d4 <Get_SerialNum+0x4c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4413      	add	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d009      	beq.n	80078c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078ae:	2208      	movs	r2, #8
 80078b0:	4909      	ldr	r1, [pc, #36]	; (80078d8 <Get_SerialNum+0x50>)
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 f814 	bl	80078e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80078b8:	2204      	movs	r2, #4
 80078ba:	4908      	ldr	r1, [pc, #32]	; (80078dc <Get_SerialNum+0x54>)
 80078bc:	68b8      	ldr	r0, [r7, #8]
 80078be:	f000 f80f 	bl	80078e0 <IntToUnicode>
  }
}
 80078c2:	bf00      	nop
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	1ffff7e8 	.word	0x1ffff7e8
 80078d0:	1ffff7ec 	.word	0x1ffff7ec
 80078d4:	1ffff7f0 	.word	0x1ffff7f0
 80078d8:	20000162 	.word	0x20000162
 80078dc:	20000172 	.word	0x20000172

080078e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	4613      	mov	r3, r2
 80078ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80078ee:	2300      	movs	r3, #0
 80078f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80078f2:	2300      	movs	r3, #0
 80078f4:	75fb      	strb	r3, [r7, #23]
 80078f6:	e027      	b.n	8007948 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	0f1b      	lsrs	r3, r3, #28
 80078fc:	2b09      	cmp	r3, #9
 80078fe:	d80b      	bhi.n	8007918 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	0f1b      	lsrs	r3, r3, #28
 8007904:	b2da      	uxtb	r2, r3
 8007906:	7dfb      	ldrb	r3, [r7, #23]
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	4619      	mov	r1, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	440b      	add	r3, r1
 8007910:	3230      	adds	r2, #48	; 0x30
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	701a      	strb	r2, [r3, #0]
 8007916:	e00a      	b.n	800792e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	0f1b      	lsrs	r3, r3, #28
 800791c:	b2da      	uxtb	r2, r3
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	4619      	mov	r1, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	440b      	add	r3, r1
 8007928:	3237      	adds	r2, #55	; 0x37
 800792a:	b2d2      	uxtb	r2, r2
 800792c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007934:	7dfb      	ldrb	r3, [r7, #23]
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	3301      	adds	r3, #1
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	4413      	add	r3, r2
 800793e:	2200      	movs	r2, #0
 8007940:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	3301      	adds	r3, #1
 8007946:	75fb      	strb	r3, [r7, #23]
 8007948:	7dfa      	ldrb	r2, [r7, #23]
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	429a      	cmp	r2, r3
 800794e:	d3d3      	bcc.n	80078f8 <IntToUnicode+0x18>
  }
}
 8007950:	bf00      	nop
 8007952:	371c      	adds	r7, #28
 8007954:	46bd      	mov	sp, r7
 8007956:	bc80      	pop	{r7}
 8007958:	4770      	bx	lr
	...

0800795c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a0d      	ldr	r2, [pc, #52]	; (80079a0 <HAL_PCD_MspInit+0x44>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d113      	bne.n	8007996 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800796e:	4b0d      	ldr	r3, [pc, #52]	; (80079a4 <HAL_PCD_MspInit+0x48>)
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	4a0c      	ldr	r2, [pc, #48]	; (80079a4 <HAL_PCD_MspInit+0x48>)
 8007974:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007978:	61d3      	str	r3, [r2, #28]
 800797a:	4b0a      	ldr	r3, [pc, #40]	; (80079a4 <HAL_PCD_MspInit+0x48>)
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007986:	2200      	movs	r2, #0
 8007988:	2100      	movs	r1, #0
 800798a:	2014      	movs	r0, #20
 800798c:	f7f9 fa93 	bl	8000eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007990:	2014      	movs	r0, #20
 8007992:	f7f9 faac 	bl	8000eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007996:	bf00      	nop
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	40005c00 	.word	0x40005c00
 80079a4:	40021000 	.word	0x40021000

080079a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80079bc:	4619      	mov	r1, r3
 80079be:	4610      	mov	r0, r2
 80079c0:	f7fe fdd3 	bl	800656a <USBD_LL_SetupStage>
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	4613      	mov	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	440b      	add	r3, r1
 80079ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	78fb      	ldrb	r3, [r7, #3]
 80079f4:	4619      	mov	r1, r3
 80079f6:	f7fe fe03 	bl	8006600 <USBD_LL_DataOutStage>
}
 80079fa:	bf00      	nop
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007a14:	78fa      	ldrb	r2, [r7, #3]
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	440b      	add	r3, r1
 8007a22:	333c      	adds	r3, #60	; 0x3c
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	78fb      	ldrb	r3, [r7, #3]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f7fe fe5a 	bl	80066e2 <USBD_LL_DataInStage>
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe ff6a 	bl	800691e <USBD_LL_SOF>
}
 8007a4a:	bf00      	nop
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d001      	beq.n	8007a6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007a66:	f7f8 ffed 	bl	8000a44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a70:	7bfa      	ldrb	r2, [r7, #15]
 8007a72:	4611      	mov	r1, r2
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fe ff1a 	bl	80068ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7fe fed3 	bl	800682c <USBD_LL_Reset>
}
 8007a86:	bf00      	nop
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fe ff14 	bl	80068cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d005      	beq.n	8007ab8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007aac:	4b04      	ldr	r3, [pc, #16]	; (8007ac0 <HAL_PCD_SuspendCallback+0x30>)
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	4a03      	ldr	r2, [pc, #12]	; (8007ac0 <HAL_PCD_SuspendCallback+0x30>)
 8007ab2:	f043 0306 	orr.w	r3, r3, #6
 8007ab6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ab8:	bf00      	nop
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	e000ed00 	.word	0xe000ed00

08007ac4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fe ff0e 	bl	80068f4 <USBD_LL_Resume>
}
 8007ad8:	bf00      	nop
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007ae8:	4a28      	ldr	r2, [pc, #160]	; (8007b8c <USBD_LL_Init+0xac>)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a26      	ldr	r2, [pc, #152]	; (8007b8c <USBD_LL_Init+0xac>)
 8007af4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007af8:	4b24      	ldr	r3, [pc, #144]	; (8007b8c <USBD_LL_Init+0xac>)
 8007afa:	4a25      	ldr	r2, [pc, #148]	; (8007b90 <USBD_LL_Init+0xb0>)
 8007afc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007afe:	4b23      	ldr	r3, [pc, #140]	; (8007b8c <USBD_LL_Init+0xac>)
 8007b00:	2208      	movs	r2, #8
 8007b02:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007b04:	4b21      	ldr	r3, [pc, #132]	; (8007b8c <USBD_LL_Init+0xac>)
 8007b06:	2202      	movs	r2, #2
 8007b08:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007b0a:	4b20      	ldr	r3, [pc, #128]	; (8007b8c <USBD_LL_Init+0xac>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007b10:	4b1e      	ldr	r3, [pc, #120]	; (8007b8c <USBD_LL_Init+0xac>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007b16:	4b1d      	ldr	r3, [pc, #116]	; (8007b8c <USBD_LL_Init+0xac>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007b1c:	481b      	ldr	r0, [pc, #108]	; (8007b8c <USBD_LL_Init+0xac>)
 8007b1e:	f7f9 fb73 	bl	8001208 <HAL_PCD_Init>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007b28:	f7f8 ff8c 	bl	8000a44 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b32:	2318      	movs	r3, #24
 8007b34:	2200      	movs	r2, #0
 8007b36:	2100      	movs	r1, #0
 8007b38:	f7fa ffe6 	bl	8002b08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b42:	2358      	movs	r3, #88	; 0x58
 8007b44:	2200      	movs	r2, #0
 8007b46:	2180      	movs	r1, #128	; 0x80
 8007b48:	f7fa ffde 	bl	8002b08 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b52:	23c0      	movs	r3, #192	; 0xc0
 8007b54:	2200      	movs	r2, #0
 8007b56:	2181      	movs	r1, #129	; 0x81
 8007b58:	f7fa ffd6 	bl	8002b08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b62:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007b66:	2200      	movs	r2, #0
 8007b68:	2101      	movs	r1, #1
 8007b6a:	f7fa ffcd 	bl	8002b08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b78:	2200      	movs	r2, #0
 8007b7a:	2182      	movs	r1, #130	; 0x82
 8007b7c:	f7fa ffc4 	bl	8002b08 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	200010b0 	.word	0x200010b0
 8007b90:	40005c00 	.word	0x40005c00

08007b94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7f9 fc37 	bl	800141e <HAL_PCD_Start>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 f94e 	bl	8007e58 <USBD_Get_USB_Status>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	4603      	mov	r3, r0
 8007bda:	70fb      	strb	r3, [r7, #3]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70bb      	strb	r3, [r7, #2]
 8007be0:	4613      	mov	r3, r2
 8007be2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007bf2:	78bb      	ldrb	r3, [r7, #2]
 8007bf4:	883a      	ldrh	r2, [r7, #0]
 8007bf6:	78f9      	ldrb	r1, [r7, #3]
 8007bf8:	f7f9 fdb1 	bl	800175e <HAL_PCD_EP_Open>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 f928 	bl	8007e58 <USBD_Get_USB_Status>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c30:	78fa      	ldrb	r2, [r7, #3]
 8007c32:	4611      	mov	r1, r2
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7f9 fdf8 	bl	800182a <HAL_PCD_EP_Close>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 f909 	bl	8007e58 <USBD_Get_USB_Status>
 8007c46:	4603      	mov	r3, r0
 8007c48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c6e:	78fa      	ldrb	r2, [r7, #3]
 8007c70:	4611      	mov	r1, r2
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7f9 feb8 	bl	80019e8 <HAL_PCD_EP_SetStall>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 f8ea 	bl	8007e58 <USBD_Get_USB_Status>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b084      	sub	sp, #16
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cac:	78fa      	ldrb	r2, [r7, #3]
 8007cae:	4611      	mov	r1, r2
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7f9 fef9 	bl	8001aa8 <HAL_PCD_EP_ClrStall>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 f8cb 	bl	8007e58 <USBD_Get_USB_Status>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ce2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ce4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	da0c      	bge.n	8007d06 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007cec:	78fb      	ldrb	r3, [r7, #3]
 8007cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cf2:	68f9      	ldr	r1, [r7, #12]
 8007cf4:	1c5a      	adds	r2, r3, #1
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	00db      	lsls	r3, r3, #3
 8007cfe:	440b      	add	r3, r1
 8007d00:	3302      	adds	r3, #2
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	e00b      	b.n	8007d1e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d06:	78fb      	ldrb	r3, [r7, #3]
 8007d08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d0c:	68f9      	ldr	r1, [r7, #12]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4413      	add	r3, r2
 8007d14:	00db      	lsls	r3, r3, #3
 8007d16:	440b      	add	r3, r1
 8007d18:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007d1c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bc80      	pop	{r7}
 8007d26:	4770      	bx	lr

08007d28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d42:	78fa      	ldrb	r2, [r7, #3]
 8007d44:	4611      	mov	r1, r2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7f9 fce4 	bl	8001714 <HAL_PCD_SetAddress>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 f880 	bl	8007e58 <USBD_Get_USB_Status>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b086      	sub	sp, #24
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	60f8      	str	r0, [r7, #12]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	461a      	mov	r2, r3
 8007d72:	460b      	mov	r3, r1
 8007d74:	72fb      	strb	r3, [r7, #11]
 8007d76:	4613      	mov	r3, r2
 8007d78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d88:	893b      	ldrh	r3, [r7, #8]
 8007d8a:	7af9      	ldrb	r1, [r7, #11]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	f7f9 fde8 	bl	8001962 <HAL_PCD_EP_Transmit>
 8007d92:	4603      	mov	r3, r0
 8007d94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d96:	7dfb      	ldrb	r3, [r7, #23]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 f85d 	bl	8007e58 <USBD_Get_USB_Status>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007da2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b086      	sub	sp, #24
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	607a      	str	r2, [r7, #4]
 8007db6:	461a      	mov	r2, r3
 8007db8:	460b      	mov	r3, r1
 8007dba:	72fb      	strb	r3, [r7, #11]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dce:	893b      	ldrh	r3, [r7, #8]
 8007dd0:	7af9      	ldrb	r1, [r7, #11]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	f7f9 fd71 	bl	80018ba <HAL_PCD_EP_Receive>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 f83a 	bl	8007e58 <USBD_Get_USB_Status>
 8007de4:	4603      	mov	r3, r0
 8007de6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007de8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e04:	78fa      	ldrb	r2, [r7, #3]
 8007e06:	4611      	mov	r1, r2
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7f9 fd93 	bl	8001934 <HAL_PCD_EP_GetRxCount>
 8007e0e:	4603      	mov	r3, r0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e20:	4b02      	ldr	r3, [pc, #8]	; (8007e2c <USBD_static_malloc+0x14>)
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bc80      	pop	{r7}
 8007e2a:	4770      	bx	lr
 8007e2c:	200001a0 	.word	0x200001a0

08007e30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]

}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bc80      	pop	{r7}
 8007e40:	4770      	bx	lr

08007e42 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bc80      	pop	{r7}
 8007e56:	4770      	bx	lr

08007e58 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	d817      	bhi.n	8007e9c <USBD_Get_USB_Status+0x44>
 8007e6c:	a201      	add	r2, pc, #4	; (adr r2, 8007e74 <USBD_Get_USB_Status+0x1c>)
 8007e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e72:	bf00      	nop
 8007e74:	08007e85 	.word	0x08007e85
 8007e78:	08007e8b 	.word	0x08007e8b
 8007e7c:	08007e91 	.word	0x08007e91
 8007e80:	08007e97 	.word	0x08007e97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	73fb      	strb	r3, [r7, #15]
    break;
 8007e88:	e00b      	b.n	8007ea2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e8e:	e008      	b.n	8007ea2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e90:	2301      	movs	r3, #1
 8007e92:	73fb      	strb	r3, [r7, #15]
    break;
 8007e94:	e005      	b.n	8007ea2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e96:	2302      	movs	r3, #2
 8007e98:	73fb      	strb	r3, [r7, #15]
    break;
 8007e9a:	e002      	b.n	8007ea2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007ea0:	bf00      	nop
  }
  return usb_status;
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bc80      	pop	{r7}
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop

08007eb0 <__libc_init_array>:
 8007eb0:	b570      	push	{r4, r5, r6, lr}
 8007eb2:	2500      	movs	r5, #0
 8007eb4:	4e0c      	ldr	r6, [pc, #48]	; (8007ee8 <__libc_init_array+0x38>)
 8007eb6:	4c0d      	ldr	r4, [pc, #52]	; (8007eec <__libc_init_array+0x3c>)
 8007eb8:	1ba4      	subs	r4, r4, r6
 8007eba:	10a4      	asrs	r4, r4, #2
 8007ebc:	42a5      	cmp	r5, r4
 8007ebe:	d109      	bne.n	8007ed4 <__libc_init_array+0x24>
 8007ec0:	f000 f822 	bl	8007f08 <_init>
 8007ec4:	2500      	movs	r5, #0
 8007ec6:	4e0a      	ldr	r6, [pc, #40]	; (8007ef0 <__libc_init_array+0x40>)
 8007ec8:	4c0a      	ldr	r4, [pc, #40]	; (8007ef4 <__libc_init_array+0x44>)
 8007eca:	1ba4      	subs	r4, r4, r6
 8007ecc:	10a4      	asrs	r4, r4, #2
 8007ece:	42a5      	cmp	r5, r4
 8007ed0:	d105      	bne.n	8007ede <__libc_init_array+0x2e>
 8007ed2:	bd70      	pop	{r4, r5, r6, pc}
 8007ed4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ed8:	4798      	blx	r3
 8007eda:	3501      	adds	r5, #1
 8007edc:	e7ee      	b.n	8007ebc <__libc_init_array+0xc>
 8007ede:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ee2:	4798      	blx	r3
 8007ee4:	3501      	adds	r5, #1
 8007ee6:	e7f2      	b.n	8007ece <__libc_init_array+0x1e>
 8007ee8:	08008048 	.word	0x08008048
 8007eec:	08008048 	.word	0x08008048
 8007ef0:	08008048 	.word	0x08008048
 8007ef4:	0800804c 	.word	0x0800804c

08007ef8 <memset>:
 8007ef8:	4603      	mov	r3, r0
 8007efa:	4402      	add	r2, r0
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d100      	bne.n	8007f02 <memset+0xa>
 8007f00:	4770      	bx	lr
 8007f02:	f803 1b01 	strb.w	r1, [r3], #1
 8007f06:	e7f9      	b.n	8007efc <memset+0x4>

08007f08 <_init>:
 8007f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0a:	bf00      	nop
 8007f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0e:	bc08      	pop	{r3}
 8007f10:	469e      	mov	lr, r3
 8007f12:	4770      	bx	lr

08007f14 <_fini>:
 8007f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f16:	bf00      	nop
 8007f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1a:	bc08      	pop	{r3}
 8007f1c:	469e      	mov	lr, r3
 8007f1e:	4770      	bx	lr
